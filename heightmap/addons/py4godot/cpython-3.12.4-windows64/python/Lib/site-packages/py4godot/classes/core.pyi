from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.Object.Object as __object__

class String(VariantTypeWrapper4):

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->String:pass


  @staticmethod
  def new0() -> str:pass
  @staticmethod
  def new1(from_:str) -> str:pass
  @staticmethod
  def new2(from_:StringName) -> str:pass
  @staticmethod
  def new3(from_:NodePath) -> str:pass



  def casecmp_to(self, to:str)->int: pass

  def nocasecmp_to(self, to:str)->int: pass

  def naturalcasecmp_to(self, to:str)->int: pass

  def naturalnocasecmp_to(self, to:str)->int: pass

  def filecasecmp_to(self, to:str)->int: pass

  def filenocasecmp_to(self, to:str)->int: pass

  def length(self)->int: pass

  def substr(self, from_:int, len_:int=-1)->str: pass

  def get_slice(self, delimiter:str, slice:int)->str: pass

  def get_slicec(self, delimiter:int, slice:int)->str: pass

  def get_slice_count(self, delimiter:str)->int: pass

  def find(self, what:str, from_:int=0)->int: pass

  def findn(self, what:str, from_:int=0)->int: pass

  def count(self, what:str, from_:int=0, to:int=0)->int: pass

  def countn(self, what:str, from_:int=0, to:int=0)->int: pass

  def rfind(self, what:str, from_:int=-1)->int: pass

  def rfindn(self, what:str, from_:int=-1)->int: pass

  def match(self, expr:str)->bool: pass

  def matchn(self, expr:str)->bool: pass

  def begins_with(self, text:str)->bool: pass

  def ends_with(self, text:str)->bool: pass

  def is_subsequence_of(self, text:str)->bool: pass

  def is_subsequence_ofn(self, text:str)->bool: pass

  def bigrams(self)->PackedStringArray: pass

  def similarity(self, text:str)->float: pass

  def format(self, values:object, placeholder:str= String.new0())->str: pass

  def replace(self, what:str, forwhat:str)->str: pass

  def replacen(self, what:str, forwhat:str)->str: pass

  def repeat(self, count:int)->str: pass

  def reverse(self)->str: pass

  def insert(self, position:int, what:str)->str: pass

  def erase(self, position:int, chars:int=1)->str: pass

  def capitalize(self)->str: pass

  def to_camel_case(self)->str: pass

  def to_pascal_case(self)->str: pass

  def to_snake_case(self)->str: pass

  def split(self, delimiter:str= String.new0(), allow_empty:bool=True, maxsplit:int=0)->PackedStringArray: pass

  def rsplit(self, delimiter:str= String.new0(), allow_empty:bool=True, maxsplit:int=0)->PackedStringArray: pass

  def split_floats(self, delimiter:str, allow_empty:bool=True)->PackedFloat64Array: pass

  def join(self, parts:PackedStringArray)->str: pass

  def to_upper(self)->str: pass

  def to_lower(self)->str: pass

  def left(self, length:int)->str: pass

  def right(self, length:int)->str: pass

  def strip_edges(self, left:bool=True, right:bool=True)->str: pass

  def strip_escapes(self)->str: pass

  def lstrip(self, chars:str)->str: pass

  def rstrip(self, chars:str)->str: pass

  def get_extension(self)->str: pass

  def get_basename(self)->str: pass

  def path_join(self, file:str)->str: pass

  def unicode_at(self, at:int)->int: pass

  def indent(self, prefix:str)->str: pass

  def dedent(self)->str: pass

  def hash(self)->int: pass

  def md5_text(self)->str: pass

  def sha1_text(self)->str: pass

  def sha256_text(self)->str: pass

  def md5_buffer(self)->PackedByteArray: pass

  def sha1_buffer(self)->PackedByteArray: pass

  def sha256_buffer(self)->PackedByteArray: pass

  def is_empty(self)->bool: pass

  def contains(self, what:str)->bool: pass

  def containsn(self, what:str)->bool: pass

  def is_absolute_path(self)->bool: pass

  def is_relative_path(self)->bool: pass

  def simplify_path(self)->str: pass

  def get_base_dir(self)->str: pass

  def get_file(self)->str: pass

  def xml_escape(self, escape_quotes:bool=False)->str: pass

  def xml_unescape(self)->str: pass

  def uri_encode(self)->str: pass

  def uri_decode(self)->str: pass

  def c_escape(self)->str: pass

  def c_unescape(self)->str: pass

  def json_escape(self)->str: pass

  def validate_node_name(self)->str: pass

  def validate_filename(self)->str: pass

  def is_valid_identifier(self)->bool: pass

  def is_valid_int(self)->bool: pass

  def is_valid_float(self)->bool: pass

  def is_valid_hex_number(self, with_prefix:bool=False)->bool: pass

  def is_valid_html_color(self)->bool: pass

  def is_valid_ip_address(self)->bool: pass

  def is_valid_filename(self)->bool: pass

  def to_int(self)->int: pass

  def to_float(self)->float: pass

  def hex_to_int(self)->int: pass

  def bin_to_int(self)->int: pass

  def lpad(self, min_length:int, character:str= String.new0())->str: pass

  def rpad(self, min_length:int, character:str= String.new0())->str: pass

  def pad_decimals(self, digits:int)->str: pass

  def pad_zeros(self, digits:int)->str: pass

  def trim_prefix(self, prefix:str)->str: pass

  def trim_suffix(self, suffix:str)->str: pass

  def to_ascii_buffer(self)->PackedByteArray: pass

  def to_utf8_buffer(self)->PackedByteArray: pass

  def to_utf16_buffer(self)->PackedByteArray: pass

  def to_utf32_buffer(self)->PackedByteArray: pass

  def hex_decode(self)->PackedByteArray: pass

  def to_wchar_buffer(self)->PackedByteArray: pass

  @staticmethod
  def num_scientific(number:float)->str: pass

  @staticmethod
  def num(number:float, decimals:int=-1)->str: pass

  @staticmethod
  def num_int64(number:int, base:int=10, capitalize_hex:bool=False)->str: pass

  @staticmethod
  def num_uint64(number:int, base:int=10, capitalize_hex:bool=False)->str: pass

  @staticmethod
  def chr(char:int)->str: pass

  @staticmethod
  def humanize_size(size:int)->str: pass

  def __eq__(self, other:object|str|StringName) -> bool: pass
  def __ne__(self, other:object|str|StringName) -> bool: pass
  def __mod__(self, other:object|bool|int|float|str|Vector2|Vector2i|Rect2|Rect2i|Vector3|Vector3i|Transform2D|Vector4|Vector4i|Plane|Quaternion|AABB|Basis|Transform3D|Projection|Color|StringName|NodePath|__object__.Object|Callable|Signal|Dictionary|Array|PackedByteArray|PackedInt32Array|PackedInt64Array|PackedFloat32Array|PackedFloat64Array|PackedStringArray|PackedVector2Array|PackedVector3Array|PackedColorArray|PackedVector4Array) -> String: pass
  def __lt__(self, other:str) -> bool: pass
  def __le__(self, other:str) -> bool: pass
  def __gt__(self, other:str) -> bool: pass
  def __ge__(self, other:str) -> bool: pass
  def __add__(self, other:str|StringName) -> String: pass


class Vector2(VariantTypeWrapper4):

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->Vector2:pass


  @staticmethod
  def new0() -> Vector2:pass
  @staticmethod
  def new1(from_:Vector2) -> Vector2:pass
  @staticmethod
  def new2(from_:Vector2i) -> Vector2:pass
  @staticmethod
  def new3(x:float, y:float) -> Vector2:pass



  @property
  def x(self)->float:pass
  def get_x(self)->float:pass

  @x.setter
  def x(self, value:float)->None:pass
  def set_x(self, value:float)->None:pass
  @property
  def y(self)->float:pass
  def get_y(self)->float:pass

  @y.setter
  def y(self, value:float)->None:pass
  def set_y(self, value:float)->None:pass
  def angle(self)->float: pass

  def angle_to(self, to:Vector2)->float: pass

  def angle_to_point(self, to:Vector2)->float: pass

  def direction_to(self, to:Vector2)->Vector2: pass

  def distance_to(self, to:Vector2)->float: pass

  def distance_squared_to(self, to:Vector2)->float: pass

  def length(self)->float: pass

  def length_squared(self)->float: pass

  def limit_length(self, length:float=1.0)->Vector2: pass

  def normalized(self)->Vector2: pass

  def is_normalized(self)->bool: pass

  def is_equal_approx(self, to:Vector2)->bool: pass

  def is_zero_approx(self)->bool: pass

  def is_finite(self)->bool: pass

  def posmod(self, mod:float)->Vector2: pass

  def posmodv(self, modv:Vector2)->Vector2: pass

  def project(self, b:Vector2)->Vector2: pass

  def lerp(self, to:Vector2, weight:float)->Vector2: pass

  def slerp(self, to:Vector2, weight:float)->Vector2: pass

  def cubic_interpolate(self, b:Vector2, pre_a:Vector2, post_b:Vector2, weight:float)->Vector2: pass

  def cubic_interpolate_in_time(self, b:Vector2, pre_a:Vector2, post_b:Vector2, weight:float, b_t:float, pre_a_t:float, post_b_t:float)->Vector2: pass

  def bezier_interpolate(self, control_1:Vector2, control_2:Vector2, end:Vector2, t:float)->Vector2: pass

  def bezier_derivative(self, control_1:Vector2, control_2:Vector2, end:Vector2, t:float)->Vector2: pass

  def max_axis_index(self)->int: pass

  def min_axis_index(self)->int: pass

  def move_toward(self, to:Vector2, delta:float)->Vector2: pass

  def rotated(self, angle:float)->Vector2: pass

  def orthogonal(self)->Vector2: pass

  def floor(self)->Vector2: pass

  def ceil(self)->Vector2: pass

  def round(self)->Vector2: pass

  def aspect(self)->float: pass

  def dot(self, with_:Vector2)->float: pass

  def slide(self, n:Vector2)->Vector2: pass

  def bounce(self, n:Vector2)->Vector2: pass

  def reflect(self, line:Vector2)->Vector2: pass

  def cross(self, with_:Vector2)->float: pass

  def abs(self)->Vector2: pass

  def sign(self)->Vector2: pass

  def clamp(self, min:Vector2, max:Vector2)->Vector2: pass

  def clampf(self, min:float, max:float)->Vector2: pass

  def snapped(self, step:Vector2)->Vector2: pass

  def snappedf(self, step:float)->Vector2: pass

  def min(self, with_:Vector2)->Vector2: pass

  def minf(self, with_:float)->Vector2: pass

  def max(self, with_:Vector2)->Vector2: pass

  def maxf(self, with_:float)->Vector2: pass

  @staticmethod
  def from_angle(angle:float)->Vector2: pass

  def __eq__(self, other:object|Vector2) -> bool: pass
  def __ne__(self, other:object|Vector2) -> bool: pass
  def __mul__(self, other:int|float|Vector2|Transform2D) -> Vector2: pass
  def __div__(self, other:int|float|Vector2) -> Vector2: pass
  def __lt__(self, other:Vector2) -> bool: pass
  def __le__(self, other:Vector2) -> bool: pass
  def __gt__(self, other:Vector2) -> bool: pass
  def __ge__(self, other:Vector2) -> bool: pass
  def __add__(self, other:Vector2) -> Vector2: pass
  def __sub__(self, other:Vector2) -> Vector2: pass


class Vector2i(VariantTypeWrapper4):

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->Vector2i:pass


  @staticmethod
  def new0() -> Vector2i:pass
  @staticmethod
  def new1(from_:Vector2i) -> Vector2i:pass
  @staticmethod
  def new2(from_:Vector2) -> Vector2i:pass
  @staticmethod
  def new3(x:int, y:int) -> Vector2i:pass



  @property
  def x(self)->int:pass
  def get_x(self)->int:pass

  @x.setter
  def x(self, value:int)->None:pass
  def set_x(self, value:int)->None:pass
  @property
  def y(self)->int:pass
  def get_y(self)->int:pass

  @y.setter
  def y(self, value:int)->None:pass
  def set_y(self, value:int)->None:pass
  def aspect(self)->float: pass

  def max_axis_index(self)->int: pass

  def min_axis_index(self)->int: pass

  def distance_to(self, to:Vector2i)->float: pass

  def distance_squared_to(self, to:Vector2i)->int: pass

  def length(self)->float: pass

  def length_squared(self)->int: pass

  def sign(self)->Vector2i: pass

  def abs(self)->Vector2i: pass

  def clamp(self, min:Vector2i, max:Vector2i)->Vector2i: pass

  def clampi(self, min:int, max:int)->Vector2i: pass

  def snapped(self, step:Vector2i)->Vector2i: pass

  def snappedi(self, step:int)->Vector2i: pass

  def min(self, with_:Vector2i)->Vector2i: pass

  def mini(self, with_:int)->Vector2i: pass

  def max(self, with_:Vector2i)->Vector2i: pass

  def maxi(self, with_:int)->Vector2i: pass

  def __eq__(self, other:object|Vector2i) -> bool: pass
  def __ne__(self, other:object|Vector2i) -> bool: pass
  def __mul__(self, other:int|float|Vector2i) -> Vector2i: pass
  def __div__(self, other:int|float|Vector2i) -> Vector2i: pass
  def __mod__(self, other:int|Vector2i) -> Vector2i: pass
  def __lt__(self, other:Vector2i) -> bool: pass
  def __le__(self, other:Vector2i) -> bool: pass
  def __gt__(self, other:Vector2i) -> bool: pass
  def __ge__(self, other:Vector2i) -> bool: pass
  def __add__(self, other:Vector2i) -> Vector2i: pass
  def __sub__(self, other:Vector2i) -> Vector2i: pass


class Rect2(VariantTypeWrapper4):

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->Rect2:pass


  @staticmethod
  def new0() -> Rect2:pass
  @staticmethod
  def new1(from_:Rect2) -> Rect2:pass
  @staticmethod
  def new2(from_:Rect2i) -> Rect2:pass
  @staticmethod
  def new3(position:Vector2, size:Vector2) -> Rect2:pass
  @staticmethod
  def new4(x:float, y:float, width:float, height:float) -> Rect2:pass



  @property
  def position(self)->Vector2:pass
  def get_position(self)->Vector2:pass

  @position.setter
  def position(self, value:Vector2)->None:pass
  def set_position(self, value:Vector2)->None:pass
  @property
  def size(self)->Vector2:pass
  def get_size(self)->Vector2:pass

  @size.setter
  def size(self, value:Vector2)->None:pass
  def set_size(self, value:Vector2)->None:pass
  def get_center(self)->Vector2: pass

  def get_area(self)->float: pass

  def has_area(self)->bool: pass

  def has_point(self, point:Vector2)->bool: pass

  def is_equal_approx(self, rect:Rect2)->bool: pass

  def is_finite(self)->bool: pass

  def intersects(self, b:Rect2, include_borders:bool=False)->bool: pass

  def encloses(self, b:Rect2)->bool: pass

  def intersection(self, b:Rect2)->Rect2: pass

  def merge(self, b:Rect2)->Rect2: pass

  def expand(self, to:Vector2)->Rect2: pass

  def grow(self, amount:float)->Rect2: pass

  def grow_side(self, side:int, amount:float)->Rect2: pass

  def grow_individual(self, left:float, top:float, right:float, bottom:float)->Rect2: pass

  def abs(self)->Rect2: pass

  def __eq__(self, other:object|Rect2) -> bool: pass
  def __ne__(self, other:object|Rect2) -> bool: pass
  def __mul__(self, other:Transform2D) -> Rect2: pass


class Rect2i(VariantTypeWrapper4):

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->Rect2i:pass


  @staticmethod
  def new0() -> Rect2i:pass
  @staticmethod
  def new1(from_:Rect2i) -> Rect2i:pass
  @staticmethod
  def new2(from_:Rect2) -> Rect2i:pass
  @staticmethod
  def new3(position:Vector2i, size:Vector2i) -> Rect2i:pass
  @staticmethod
  def new4(x:int, y:int, width:int, height:int) -> Rect2i:pass



  @property
  def position(self)->Vector2i:pass
  def get_position(self)->Vector2i:pass

  @position.setter
  def position(self, value:Vector2i)->None:pass
  def set_position(self, value:Vector2i)->None:pass
  @property
  def size(self)->Vector2i:pass
  def get_size(self)->Vector2i:pass

  @size.setter
  def size(self, value:Vector2i)->None:pass
  def set_size(self, value:Vector2i)->None:pass
  def get_center(self)->Vector2i: pass

  def get_area(self)->int: pass

  def has_area(self)->bool: pass

  def has_point(self, point:Vector2i)->bool: pass

  def intersects(self, b:Rect2i)->bool: pass

  def encloses(self, b:Rect2i)->bool: pass

  def intersection(self, b:Rect2i)->Rect2i: pass

  def merge(self, b:Rect2i)->Rect2i: pass

  def expand(self, to:Vector2i)->Rect2i: pass

  def grow(self, amount:int)->Rect2i: pass

  def grow_side(self, side:int, amount:int)->Rect2i: pass

  def grow_individual(self, left:int, top:int, right:int, bottom:int)->Rect2i: pass

  def abs(self)->Rect2i: pass

  def __eq__(self, other:object|Rect2i) -> bool: pass
  def __ne__(self, other:object|Rect2i) -> bool: pass


class Vector3(VariantTypeWrapper4):

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->Vector3:pass


  @staticmethod
  def new0() -> Vector3:pass
  @staticmethod
  def new1(from_:Vector3) -> Vector3:pass
  @staticmethod
  def new2(from_:Vector3i) -> Vector3:pass
  @staticmethod
  def new3(x:float, y:float, z:float) -> Vector3:pass



  @property
  def x(self)->float:pass
  def get_x(self)->float:pass

  @x.setter
  def x(self, value:float)->None:pass
  def set_x(self, value:float)->None:pass
  @property
  def y(self)->float:pass
  def get_y(self)->float:pass

  @y.setter
  def y(self, value:float)->None:pass
  def set_y(self, value:float)->None:pass
  @property
  def z(self)->float:pass
  def get_z(self)->float:pass

  @z.setter
  def z(self, value:float)->None:pass
  def set_z(self, value:float)->None:pass
  def min_axis_index(self)->int: pass

  def max_axis_index(self)->int: pass

  def angle_to(self, to:Vector3)->float: pass

  def signed_angle_to(self, to:Vector3, axis:Vector3)->float: pass

  def direction_to(self, to:Vector3)->Vector3: pass

  def distance_to(self, to:Vector3)->float: pass

  def distance_squared_to(self, to:Vector3)->float: pass

  def length(self)->float: pass

  def length_squared(self)->float: pass

  def limit_length(self, length:float=1.0)->Vector3: pass

  def normalized(self)->Vector3: pass

  def is_normalized(self)->bool: pass

  def is_equal_approx(self, to:Vector3)->bool: pass

  def is_zero_approx(self)->bool: pass

  def is_finite(self)->bool: pass

  def inverse(self)->Vector3: pass

  def clamp(self, min:Vector3, max:Vector3)->Vector3: pass

  def clampf(self, min:float, max:float)->Vector3: pass

  def snapped(self, step:Vector3)->Vector3: pass

  def snappedf(self, step:float)->Vector3: pass

  def rotated(self, axis:Vector3, angle:float)->Vector3: pass

  def lerp(self, to:Vector3, weight:float)->Vector3: pass

  def slerp(self, to:Vector3, weight:float)->Vector3: pass

  def cubic_interpolate(self, b:Vector3, pre_a:Vector3, post_b:Vector3, weight:float)->Vector3: pass

  def cubic_interpolate_in_time(self, b:Vector3, pre_a:Vector3, post_b:Vector3, weight:float, b_t:float, pre_a_t:float, post_b_t:float)->Vector3: pass

  def bezier_interpolate(self, control_1:Vector3, control_2:Vector3, end:Vector3, t:float)->Vector3: pass

  def bezier_derivative(self, control_1:Vector3, control_2:Vector3, end:Vector3, t:float)->Vector3: pass

  def move_toward(self, to:Vector3, delta:float)->Vector3: pass

  def dot(self, with_:Vector3)->float: pass

  def cross(self, with_:Vector3)->Vector3: pass

  def outer(self, with_:Vector3)->Basis: pass

  def abs(self)->Vector3: pass

  def floor(self)->Vector3: pass

  def ceil(self)->Vector3: pass

  def round(self)->Vector3: pass

  def posmod(self, mod:float)->Vector3: pass

  def posmodv(self, modv:Vector3)->Vector3: pass

  def project(self, b:Vector3)->Vector3: pass

  def slide(self, n:Vector3)->Vector3: pass

  def bounce(self, n:Vector3)->Vector3: pass

  def reflect(self, n:Vector3)->Vector3: pass

  def sign(self)->Vector3: pass

  def octahedron_encode(self)->Vector2: pass

  def min(self, with_:Vector3)->Vector3: pass

  def minf(self, with_:float)->Vector3: pass

  def max(self, with_:Vector3)->Vector3: pass

  def maxf(self, with_:float)->Vector3: pass

  @staticmethod
  def octahedron_decode(uv:Vector2)->Vector3: pass

  def __eq__(self, other:object|Vector3) -> bool: pass
  def __ne__(self, other:object|Vector3) -> bool: pass
  def __mul__(self, other:int|float|Vector3|Quaternion|Basis|Transform3D) -> Vector3: pass
  def __div__(self, other:int|float|Vector3) -> Vector3: pass
  def __lt__(self, other:Vector3) -> bool: pass
  def __le__(self, other:Vector3) -> bool: pass
  def __gt__(self, other:Vector3) -> bool: pass
  def __ge__(self, other:Vector3) -> bool: pass
  def __add__(self, other:Vector3) -> Vector3: pass
  def __sub__(self, other:Vector3) -> Vector3: pass


class Vector3i(VariantTypeWrapper4):

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->Vector3i:pass


  @staticmethod
  def new0() -> Vector3i:pass
  @staticmethod
  def new1(from_:Vector3i) -> Vector3i:pass
  @staticmethod
  def new2(from_:Vector3) -> Vector3i:pass
  @staticmethod
  def new3(x:int, y:int, z:int) -> Vector3i:pass



  @property
  def x(self)->int:pass
  def get_x(self)->int:pass

  @x.setter
  def x(self, value:int)->None:pass
  def set_x(self, value:int)->None:pass
  @property
  def y(self)->int:pass
  def get_y(self)->int:pass

  @y.setter
  def y(self, value:int)->None:pass
  def set_y(self, value:int)->None:pass
  @property
  def z(self)->int:pass
  def get_z(self)->int:pass

  @z.setter
  def z(self, value:int)->None:pass
  def set_z(self, value:int)->None:pass
  def min_axis_index(self)->int: pass

  def max_axis_index(self)->int: pass

  def distance_to(self, to:Vector3i)->float: pass

  def distance_squared_to(self, to:Vector3i)->int: pass

  def length(self)->float: pass

  def length_squared(self)->int: pass

  def sign(self)->Vector3i: pass

  def abs(self)->Vector3i: pass

  def clamp(self, min:Vector3i, max:Vector3i)->Vector3i: pass

  def clampi(self, min:int, max:int)->Vector3i: pass

  def snapped(self, step:Vector3i)->Vector3i: pass

  def snappedi(self, step:int)->Vector3i: pass

  def min(self, with_:Vector3i)->Vector3i: pass

  def mini(self, with_:int)->Vector3i: pass

  def max(self, with_:Vector3i)->Vector3i: pass

  def maxi(self, with_:int)->Vector3i: pass

  def __eq__(self, other:object|Vector3i) -> bool: pass
  def __ne__(self, other:object|Vector3i) -> bool: pass
  def __mul__(self, other:int|float|Vector3i) -> Vector3i: pass
  def __div__(self, other:int|float|Vector3i) -> Vector3i: pass
  def __mod__(self, other:int|Vector3i) -> Vector3i: pass
  def __lt__(self, other:Vector3i) -> bool: pass
  def __le__(self, other:Vector3i) -> bool: pass
  def __gt__(self, other:Vector3i) -> bool: pass
  def __ge__(self, other:Vector3i) -> bool: pass
  def __add__(self, other:Vector3i) -> Vector3i: pass
  def __sub__(self, other:Vector3i) -> Vector3i: pass


class Transform2D(VariantTypeWrapper4):

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->Transform2D:pass


  @staticmethod
  def new0() -> Transform2D:pass
  @staticmethod
  def new1(from_:Transform2D) -> Transform2D:pass
  @staticmethod
  def new2(rotation:float, position:Vector2) -> Transform2D:pass
  @staticmethod
  def new3(rotation:float, scale:Vector2, skew:float, position:Vector2) -> Transform2D:pass
  @staticmethod
  def new4(x_axis:Vector2, y_axis:Vector2, origin:Vector2) -> Transform2D:pass



  @property
  def x(self)->Vector2:pass
  def get_x(self)->Vector2:pass

  @x.setter
  def x(self, value:Vector2)->None:pass
  def set_x(self, value:Vector2)->None:pass
  @property
  def y(self)->Vector2:pass
  def get_y(self)->Vector2:pass

  @y.setter
  def y(self, value:Vector2)->None:pass
  def set_y(self, value:Vector2)->None:pass
  @property
  def origin(self)->Vector2:pass
  def get_origin(self)->Vector2:pass

  @origin.setter
  def origin(self, value:Vector2)->None:pass
  def set_origin(self, value:Vector2)->None:pass
  def inverse(self)->Transform2D: pass

  def affine_inverse(self)->Transform2D: pass

  def get_rotation(self)->float: pass

  def get_origin(self)->Vector2: pass

  def get_scale(self)->Vector2: pass

  def get_skew(self)->float: pass

  def orthonormalized(self)->Transform2D: pass

  def rotated(self, angle:float)->Transform2D: pass

  def rotated_local(self, angle:float)->Transform2D: pass

  def scaled(self, scale:Vector2)->Transform2D: pass

  def scaled_local(self, scale:Vector2)->Transform2D: pass

  def translated(self, offset:Vector2)->Transform2D: pass

  def translated_local(self, offset:Vector2)->Transform2D: pass

  def determinant(self)->float: pass

  def basis_xform(self, v:Vector2)->Vector2: pass

  def basis_xform_inv(self, v:Vector2)->Vector2: pass

  def interpolate_with(self, xform:Transform2D, weight:float)->Transform2D: pass

  def is_conformal(self)->bool: pass

  def is_equal_approx(self, xform:Transform2D)->bool: pass

  def is_finite(self)->bool: pass

  def looking_at(self, target:Vector2= Vector2.new0())->Transform2D: pass

  def __eq__(self, other:object|Transform2D) -> bool: pass
  def __ne__(self, other:object|Transform2D) -> bool: pass
  def __mul__(self, other:int|float|Vector2|Rect2|Transform2D|PackedVector2Array) -> Transform2D: pass
  def __div__(self, other:int|float) -> Transform2D: pass


class Vector4(VariantTypeWrapper4):

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->Vector4:pass


  @staticmethod
  def new0() -> Vector4:pass
  @staticmethod
  def new1(from_:Vector4) -> Vector4:pass
  @staticmethod
  def new2(from_:Vector4i) -> Vector4:pass
  @staticmethod
  def new3(x:float, y:float, z:float, w:float) -> Vector4:pass



  @property
  def x(self)->float:pass
  def get_x(self)->float:pass

  @x.setter
  def x(self, value:float)->None:pass
  def set_x(self, value:float)->None:pass
  @property
  def y(self)->float:pass
  def get_y(self)->float:pass

  @y.setter
  def y(self, value:float)->None:pass
  def set_y(self, value:float)->None:pass
  @property
  def z(self)->float:pass
  def get_z(self)->float:pass

  @z.setter
  def z(self, value:float)->None:pass
  def set_z(self, value:float)->None:pass
  @property
  def w(self)->float:pass
  def get_w(self)->float:pass

  @w.setter
  def w(self, value:float)->None:pass
  def set_w(self, value:float)->None:pass
  def min_axis_index(self)->int: pass

  def max_axis_index(self)->int: pass

  def length(self)->float: pass

  def length_squared(self)->float: pass

  def abs(self)->Vector4: pass

  def sign(self)->Vector4: pass

  def floor(self)->Vector4: pass

  def ceil(self)->Vector4: pass

  def round(self)->Vector4: pass

  def lerp(self, to:Vector4, weight:float)->Vector4: pass

  def cubic_interpolate(self, b:Vector4, pre_a:Vector4, post_b:Vector4, weight:float)->Vector4: pass

  def cubic_interpolate_in_time(self, b:Vector4, pre_a:Vector4, post_b:Vector4, weight:float, b_t:float, pre_a_t:float, post_b_t:float)->Vector4: pass

  def posmod(self, mod:float)->Vector4: pass

  def posmodv(self, modv:Vector4)->Vector4: pass

  def snapped(self, step:Vector4)->Vector4: pass

  def snappedf(self, step:float)->Vector4: pass

  def clamp(self, min:Vector4, max:Vector4)->Vector4: pass

  def clampf(self, min:float, max:float)->Vector4: pass

  def normalized(self)->Vector4: pass

  def is_normalized(self)->bool: pass

  def direction_to(self, to:Vector4)->Vector4: pass

  def distance_to(self, to:Vector4)->float: pass

  def distance_squared_to(self, to:Vector4)->float: pass

  def dot(self, with_:Vector4)->float: pass

  def inverse(self)->Vector4: pass

  def is_equal_approx(self, to:Vector4)->bool: pass

  def is_zero_approx(self)->bool: pass

  def is_finite(self)->bool: pass

  def min(self, with_:Vector4)->Vector4: pass

  def minf(self, with_:float)->Vector4: pass

  def max(self, with_:Vector4)->Vector4: pass

  def maxf(self, with_:float)->Vector4: pass

  def __eq__(self, other:object|Vector4) -> bool: pass
  def __ne__(self, other:object|Vector4) -> bool: pass
  def __mul__(self, other:int|float|Vector4|Projection) -> Vector4: pass
  def __div__(self, other:int|float|Vector4) -> Vector4: pass
  def __lt__(self, other:Vector4) -> bool: pass
  def __le__(self, other:Vector4) -> bool: pass
  def __gt__(self, other:Vector4) -> bool: pass
  def __ge__(self, other:Vector4) -> bool: pass
  def __add__(self, other:Vector4) -> Vector4: pass
  def __sub__(self, other:Vector4) -> Vector4: pass


class Vector4i(VariantTypeWrapper4):

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->Vector4i:pass


  @staticmethod
  def new0() -> Vector4i:pass
  @staticmethod
  def new1(from_:Vector4i) -> Vector4i:pass
  @staticmethod
  def new2(from_:Vector4) -> Vector4i:pass
  @staticmethod
  def new3(x:int, y:int, z:int, w:int) -> Vector4i:pass



  @property
  def x(self)->int:pass
  def get_x(self)->int:pass

  @x.setter
  def x(self, value:int)->None:pass
  def set_x(self, value:int)->None:pass
  @property
  def y(self)->int:pass
  def get_y(self)->int:pass

  @y.setter
  def y(self, value:int)->None:pass
  def set_y(self, value:int)->None:pass
  @property
  def z(self)->int:pass
  def get_z(self)->int:pass

  @z.setter
  def z(self, value:int)->None:pass
  def set_z(self, value:int)->None:pass
  @property
  def w(self)->int:pass
  def get_w(self)->int:pass

  @w.setter
  def w(self, value:int)->None:pass
  def set_w(self, value:int)->None:pass
  def min_axis_index(self)->int: pass

  def max_axis_index(self)->int: pass

  def length(self)->float: pass

  def length_squared(self)->int: pass

  def sign(self)->Vector4i: pass

  def abs(self)->Vector4i: pass

  def clamp(self, min:Vector4i, max:Vector4i)->Vector4i: pass

  def clampi(self, min:int, max:int)->Vector4i: pass

  def snapped(self, step:Vector4i)->Vector4i: pass

  def snappedi(self, step:int)->Vector4i: pass

  def min(self, with_:Vector4i)->Vector4i: pass

  def mini(self, with_:int)->Vector4i: pass

  def max(self, with_:Vector4i)->Vector4i: pass

  def maxi(self, with_:int)->Vector4i: pass

  def distance_to(self, to:Vector4i)->float: pass

  def distance_squared_to(self, to:Vector4i)->int: pass

  def __eq__(self, other:object|Vector4i) -> bool: pass
  def __ne__(self, other:object|Vector4i) -> bool: pass
  def __mul__(self, other:int|float|Vector4i) -> Vector4i: pass
  def __div__(self, other:int|float|Vector4i) -> Vector4i: pass
  def __mod__(self, other:int|Vector4i) -> Vector4i: pass
  def __lt__(self, other:Vector4i) -> bool: pass
  def __le__(self, other:Vector4i) -> bool: pass
  def __gt__(self, other:Vector4i) -> bool: pass
  def __ge__(self, other:Vector4i) -> bool: pass
  def __add__(self, other:Vector4i) -> Vector4i: pass
  def __sub__(self, other:Vector4i) -> Vector4i: pass


class Plane(VariantTypeWrapper4):

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->Plane:pass


  @staticmethod
  def new0() -> Plane:pass
  @staticmethod
  def new1(from_:Plane) -> Plane:pass
  @staticmethod
  def new2(normal:Vector3) -> Plane:pass
  @staticmethod
  def new3(normal:Vector3, d:float) -> Plane:pass
  @staticmethod
  def new4(normal:Vector3, point:Vector3) -> Plane:pass
  @staticmethod
  def new5(point1:Vector3, point2:Vector3, point3:Vector3) -> Plane:pass
  @staticmethod
  def new6(a:float, b:float, c:float, d:float) -> Plane:pass



  @property
  def normal(self)->Vector3:pass
  def get_normal(self)->Vector3:pass

  @normal.setter
  def normal(self, value:Vector3)->None:pass
  def set_normal(self, value:Vector3)->None:pass
  @property
  def d(self)->float:pass
  def get_d(self)->float:pass

  @d.setter
  def d(self, value:float)->None:pass
  def set_d(self, value:float)->None:pass
  def normalized(self)->Plane: pass

  def get_center(self)->Vector3: pass

  def is_equal_approx(self, to_plane:Plane)->bool: pass

  def is_finite(self)->bool: pass

  def is_point_over(self, point:Vector3)->bool: pass

  def distance_to(self, point:Vector3)->float: pass

  def has_point(self, point:Vector3, tolerance:float=1e-05)->bool: pass

  def project(self, point:Vector3)->Vector3: pass

  def intersect_3(self, b:Plane, c:Plane)->object: pass

  def intersects_ray(self, from_:Vector3, dir:Vector3)->object: pass

  def intersects_segment(self, from_:Vector3, to:Vector3)->object: pass

  def __eq__(self, other:object|Plane) -> bool: pass
  def __ne__(self, other:object|Plane) -> bool: pass
  def __mul__(self, other:Transform3D) -> Plane: pass


class Quaternion(VariantTypeWrapper4):

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->Quaternion:pass


  @staticmethod
  def new0() -> Quaternion:pass
  @staticmethod
  def new1(from_:Quaternion) -> Quaternion:pass
  @staticmethod
  def new2(from_:Basis) -> Quaternion:pass
  @staticmethod
  def new3(axis:Vector3, angle:float) -> Quaternion:pass
  @staticmethod
  def new4(arc_from:Vector3, arc_to:Vector3) -> Quaternion:pass
  @staticmethod
  def new5(x:float, y:float, z:float, w:float) -> Quaternion:pass



  @property
  def x(self)->float:pass
  def get_x(self)->float:pass

  @x.setter
  def x(self, value:float)->None:pass
  def set_x(self, value:float)->None:pass
  @property
  def y(self)->float:pass
  def get_y(self)->float:pass

  @y.setter
  def y(self, value:float)->None:pass
  def set_y(self, value:float)->None:pass
  @property
  def z(self)->float:pass
  def get_z(self)->float:pass

  @z.setter
  def z(self, value:float)->None:pass
  def set_z(self, value:float)->None:pass
  @property
  def w(self)->float:pass
  def get_w(self)->float:pass

  @w.setter
  def w(self, value:float)->None:pass
  def set_w(self, value:float)->None:pass
  def length(self)->float: pass

  def length_squared(self)->float: pass

  def normalized(self)->Quaternion: pass

  def is_normalized(self)->bool: pass

  def is_equal_approx(self, to:Quaternion)->bool: pass

  def is_finite(self)->bool: pass

  def inverse(self)->Quaternion: pass

  def log(self)->Quaternion: pass

  def exp(self)->Quaternion: pass

  def angle_to(self, to:Quaternion)->float: pass

  def dot(self, with_:Quaternion)->float: pass

  def slerp(self, to:Quaternion, weight:float)->Quaternion: pass

  def slerpni(self, to:Quaternion, weight:float)->Quaternion: pass

  def spherical_cubic_interpolate(self, b:Quaternion, pre_a:Quaternion, post_b:Quaternion, weight:float)->Quaternion: pass

  def spherical_cubic_interpolate_in_time(self, b:Quaternion, pre_a:Quaternion, post_b:Quaternion, weight:float, b_t:float, pre_a_t:float, post_b_t:float)->Quaternion: pass

  def get_euler(self, order:int=2)->Vector3: pass

  @staticmethod
  def from_euler(euler:Vector3)->Quaternion: pass

  def get_axis(self)->Vector3: pass

  def get_angle(self)->float: pass

  def __eq__(self, other:object|Quaternion) -> bool: pass
  def __ne__(self, other:object|Quaternion) -> bool: pass
  def __mul__(self, other:int|float|Vector3|Quaternion) -> Quaternion: pass
  def __div__(self, other:int|float) -> Quaternion: pass
  def __add__(self, other:Quaternion) -> Quaternion: pass
  def __sub__(self, other:Quaternion) -> Quaternion: pass


class AABB(VariantTypeWrapper4):

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->AABB:pass


  @staticmethod
  def new0() -> AABB:pass
  @staticmethod
  def new1(from_:AABB) -> AABB:pass
  @staticmethod
  def new2(position:Vector3, size:Vector3) -> AABB:pass



  @property
  def position(self)->Vector3:pass
  def get_position(self)->Vector3:pass

  @position.setter
  def position(self, value:Vector3)->None:pass
  def set_position(self, value:Vector3)->None:pass
  @property
  def size(self)->Vector3:pass
  def get_size(self)->Vector3:pass

  @size.setter
  def size(self, value:Vector3)->None:pass
  def set_size(self, value:Vector3)->None:pass
  def abs(self)->AABB: pass

  def get_center(self)->Vector3: pass

  def get_volume(self)->float: pass

  def has_volume(self)->bool: pass

  def has_surface(self)->bool: pass

  def has_point(self, point:Vector3)->bool: pass

  def is_equal_approx(self, aabb:AABB)->bool: pass

  def is_finite(self)->bool: pass

  def intersects(self, with_:AABB)->bool: pass

  def encloses(self, with_:AABB)->bool: pass

  def intersects_plane(self, plane:Plane)->bool: pass

  def intersection(self, with_:AABB)->AABB: pass

  def merge(self, with_:AABB)->AABB: pass

  def expand(self, to_point:Vector3)->AABB: pass

  def grow(self, by:float)->AABB: pass

  def get_support(self, dir:Vector3)->Vector3: pass

  def get_longest_axis(self)->Vector3: pass

  def get_longest_axis_index(self)->int: pass

  def get_longest_axis_size(self)->float: pass

  def get_shortest_axis(self)->Vector3: pass

  def get_shortest_axis_index(self)->int: pass

  def get_shortest_axis_size(self)->float: pass

  def get_endpoint(self, idx:int)->Vector3: pass

  def intersects_segment(self, from_:Vector3, to:Vector3)->object: pass

  def intersects_ray(self, from_:Vector3, dir:Vector3)->object: pass

  def __eq__(self, other:object|AABB) -> bool: pass
  def __ne__(self, other:object|AABB) -> bool: pass
  def __mul__(self, other:Transform3D) -> AABB: pass


class Basis(VariantTypeWrapper4):

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->Basis:pass


  @staticmethod
  def new0() -> Basis:pass
  @staticmethod
  def new1(from_:Basis) -> Basis:pass
  @staticmethod
  def new2(from_:Quaternion) -> Basis:pass
  @staticmethod
  def new3(axis:Vector3, angle:float) -> Basis:pass
  @staticmethod
  def new4(x_axis:Vector3, y_axis:Vector3, z_axis:Vector3) -> Basis:pass



  @property
  def x(self)->Vector3:pass
  def get_x(self)->Vector3:pass

  @x.setter
  def x(self, value:Vector3)->None:pass
  def set_x(self, value:Vector3)->None:pass
  @property
  def y(self)->Vector3:pass
  def get_y(self)->Vector3:pass

  @y.setter
  def y(self, value:Vector3)->None:pass
  def set_y(self, value:Vector3)->None:pass
  @property
  def z(self)->Vector3:pass
  def get_z(self)->Vector3:pass

  @z.setter
  def z(self, value:Vector3)->None:pass
  def set_z(self, value:Vector3)->None:pass
  def inverse(self)->Basis: pass

  def transposed(self)->Basis: pass

  def orthonormalized(self)->Basis: pass

  def determinant(self)->float: pass

  def rotated(self, axis:Vector3, angle:float)->Basis: pass

  def scaled(self, scale:Vector3)->Basis: pass

  def get_scale(self)->Vector3: pass

  def get_euler(self, order:int=2)->Vector3: pass

  def tdotx(self, with_:Vector3)->float: pass

  def tdoty(self, with_:Vector3)->float: pass

  def tdotz(self, with_:Vector3)->float: pass

  def slerp(self, to:Basis, weight:float)->Basis: pass

  def is_conformal(self)->bool: pass

  def is_equal_approx(self, b:Basis)->bool: pass

  def is_finite(self)->bool: pass

  def get_rotation_quaternion(self)->Quaternion: pass

  @staticmethod
  def looking_at(target:Vector3, up:Vector3= Vector3.new0(), use_model_front:bool=False)->Basis: pass

  @staticmethod
  def from_scale(scale:Vector3)->Basis: pass

  @staticmethod
  def from_euler(euler:Vector3, order:int=2)->Basis: pass

  def __eq__(self, other:object|Basis) -> bool: pass
  def __ne__(self, other:object|Basis) -> bool: pass
  def __mul__(self, other:int|float|Vector3|Basis) -> Basis: pass
  def __div__(self, other:int|float) -> Basis: pass


class Transform3D(VariantTypeWrapper4):

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->Transform3D:pass


  @staticmethod
  def new0() -> Transform3D:pass
  @staticmethod
  def new1(from_:Transform3D) -> Transform3D:pass
  @staticmethod
  def new2(basis:Basis, origin:Vector3) -> Transform3D:pass
  @staticmethod
  def new3(x_axis:Vector3, y_axis:Vector3, z_axis:Vector3, origin:Vector3) -> Transform3D:pass
  @staticmethod
  def new4(from_:Projection) -> Transform3D:pass



  @property
  def basis(self)->Basis:pass
  def get_basis(self)->Basis:pass

  @basis.setter
  def basis(self, value:Basis)->None:pass
  def set_basis(self, value:Basis)->None:pass
  @property
  def origin(self)->Vector3:pass
  def get_origin(self)->Vector3:pass

  @origin.setter
  def origin(self, value:Vector3)->None:pass
  def set_origin(self, value:Vector3)->None:pass
  def inverse(self)->Transform3D: pass

  def affine_inverse(self)->Transform3D: pass

  def orthonormalized(self)->Transform3D: pass

  def rotated(self, axis:Vector3, angle:float)->Transform3D: pass

  def rotated_local(self, axis:Vector3, angle:float)->Transform3D: pass

  def scaled(self, scale:Vector3)->Transform3D: pass

  def scaled_local(self, scale:Vector3)->Transform3D: pass

  def translated(self, offset:Vector3)->Transform3D: pass

  def translated_local(self, offset:Vector3)->Transform3D: pass

  def looking_at(self, target:Vector3, up:Vector3= Vector3.new0(), use_model_front:bool=False)->Transform3D: pass

  def interpolate_with(self, xform:Transform3D, weight:float)->Transform3D: pass

  def is_equal_approx(self, xform:Transform3D)->bool: pass

  def is_finite(self)->bool: pass

  def __eq__(self, other:object|Transform3D) -> bool: pass
  def __ne__(self, other:object|Transform3D) -> bool: pass
  def __mul__(self, other:int|float|Vector3|Plane|AABB|Transform3D|PackedVector3Array) -> Transform3D: pass
  def __div__(self, other:int|float) -> Transform3D: pass


class Projection(VariantTypeWrapper4):

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->Projection:pass


  @staticmethod
  def new0() -> Projection:pass
  @staticmethod
  def new1(from_:Projection) -> Projection:pass
  @staticmethod
  def new2(from_:Transform3D) -> Projection:pass
  @staticmethod
  def new3(x_axis:Vector4, y_axis:Vector4, z_axis:Vector4, w_axis:Vector4) -> Projection:pass



  @property
  def x(self)->Vector4:pass
  def get_x(self)->Vector4:pass

  @x.setter
  def x(self, value:Vector4)->None:pass
  def set_x(self, value:Vector4)->None:pass
  @property
  def y(self)->Vector4:pass
  def get_y(self)->Vector4:pass

  @y.setter
  def y(self, value:Vector4)->None:pass
  def set_y(self, value:Vector4)->None:pass
  @property
  def z(self)->Vector4:pass
  def get_z(self)->Vector4:pass

  @z.setter
  def z(self, value:Vector4)->None:pass
  def set_z(self, value:Vector4)->None:pass
  @property
  def w(self)->Vector4:pass
  def get_w(self)->Vector4:pass

  @w.setter
  def w(self, value:Vector4)->None:pass
  def set_w(self, value:Vector4)->None:pass
  @staticmethod
  def create_depth_correction(flip_y:bool)->Projection: pass

  @staticmethod
  def create_light_atlas_rect(rect:Rect2)->Projection: pass

  @staticmethod
  def create_perspective(fovy:float, aspect:float, z_near:float, z_far:float, flip_fov:bool=False)->Projection: pass

  @staticmethod
  def create_perspective_hmd(fovy:float, aspect:float, z_near:float, z_far:float, flip_fov:bool, eye:int, intraocular_dist:float, convergence_dist:float)->Projection: pass

  @staticmethod
  def create_for_hmd(eye:int, aspect:float, intraocular_dist:float, display_width:float, display_to_lens:float, oversample:float, z_near:float, z_far:float)->Projection: pass

  @staticmethod
  def create_orthogonal(left:float, right:float, bottom:float, top:float, z_near:float, z_far:float)->Projection: pass

  @staticmethod
  def create_orthogonal_aspect(size:float, aspect:float, z_near:float, z_far:float, flip_fov:bool=False)->Projection: pass

  @staticmethod
  def create_frustum(left:float, right:float, bottom:float, top:float, z_near:float, z_far:float)->Projection: pass

  @staticmethod
  def create_frustum_aspect(size:float, aspect:float, offset:Vector2, z_near:float, z_far:float, flip_fov:bool=False)->Projection: pass

  @staticmethod
  def create_fit_aabb(aabb:AABB)->Projection: pass

  def determinant(self)->float: pass

  def perspective_znear_adjusted(self, new_znear:float)->Projection: pass

  def get_projection_plane(self, plane:int)->Plane: pass

  def flipped_y(self)->Projection: pass

  def jitter_offseted(self, offset:Vector2)->Projection: pass

  @staticmethod
  def get_fovy(fovx:float, aspect:float)->float: pass

  def get_z_far(self)->float: pass

  def get_z_near(self)->float: pass

  def get_aspect(self)->float: pass

  def get_fov(self)->float: pass

  def is_orthogonal(self)->bool: pass

  def get_viewport_half_extents(self)->Vector2: pass

  def get_far_plane_half_extents(self)->Vector2: pass

  def inverse(self)->Projection: pass

  def get_pixels_per_meter(self, for_pixel_width:int)->int: pass

  def get_lod_multiplier(self)->float: pass

  def __eq__(self, other:object|Projection) -> bool: pass
  def __ne__(self, other:object|Projection) -> bool: pass
  def __mul__(self, other:Vector4|Projection) -> Vector4: pass


class Color(VariantTypeWrapper4):

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->Color:pass


  @staticmethod
  def new0() -> Color:pass
  @staticmethod
  def new1(from_:Color) -> Color:pass
  @staticmethod
  def new2(from_:Color, alpha:float) -> Color:pass
  @staticmethod
  def new3(r:float, g:float, b:float) -> Color:pass
  @staticmethod
  def new4(r:float, g:float, b:float, a:float) -> Color:pass
  @staticmethod
  def new5(code:str) -> Color:pass
  @staticmethod
  def new6(code:str, alpha:float) -> Color:pass



  @property
  def r(self)->float:pass
  def get_r(self)->float:pass

  @r.setter
  def r(self, value:float)->None:pass
  def set_r(self, value:float)->None:pass
  @property
  def g(self)->float:pass
  def get_g(self)->float:pass

  @g.setter
  def g(self, value:float)->None:pass
  def set_g(self, value:float)->None:pass
  @property
  def b(self)->float:pass
  def get_b(self)->float:pass

  @b.setter
  def b(self, value:float)->None:pass
  def set_b(self, value:float)->None:pass
  @property
  def a(self)->float:pass
  def get_a(self)->float:pass

  @a.setter
  def a(self, value:float)->None:pass
  def set_a(self, value:float)->None:pass
  def to_argb32(self)->int: pass

  def to_abgr32(self)->int: pass

  def to_rgba32(self)->int: pass

  def to_argb64(self)->int: pass

  def to_abgr64(self)->int: pass

  def to_rgba64(self)->int: pass

  def to_html(self, with_alpha:bool=True)->str: pass

  def clamp(self, min:Color= Color.new0(), max:Color= Color.new0())->Color: pass

  def inverted(self)->Color: pass

  def lerp(self, to:Color, weight:float)->Color: pass

  def lightened(self, amount:float)->Color: pass

  def darkened(self, amount:float)->Color: pass

  def blend(self, over:Color)->Color: pass

  def get_luminance(self)->float: pass

  def srgb_to_linear(self)->Color: pass

  def linear_to_srgb(self)->Color: pass

  def is_equal_approx(self, to:Color)->bool: pass

  @staticmethod
  def hex(hex:int)->Color: pass

  @staticmethod
  def hex64(hex:int)->Color: pass

  @staticmethod
  def html(rgba:str)->Color: pass

  @staticmethod
  def html_is_valid(color:str)->bool: pass

  @staticmethod
  def from_string(str:str, default:Color)->Color: pass

  @staticmethod
  def from_hsv(h:float, s:float, v:float, alpha:float=1.0)->Color: pass

  @staticmethod
  def from_ok_hsl(h:float, s:float, l:float, alpha:float=1.0)->Color: pass

  @staticmethod
  def from_rgbe9995(rgbe:int)->Color: pass

  def __eq__(self, other:object|Color) -> bool: pass
  def __ne__(self, other:object|Color) -> bool: pass
  def __mul__(self, other:int|float|Color) -> Color: pass
  def __div__(self, other:int|float|Color) -> Color: pass
  def __add__(self, other:Color) -> Color: pass
  def __sub__(self, other:Color) -> Color: pass


class StringName(VariantTypeWrapper4):

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->StringName:pass


  @staticmethod
  def new0() -> StringName:pass
  @staticmethod
  def new1(from_:StringName) -> StringName:pass
  @staticmethod
  def new2(from_:str) -> StringName:pass



  def casecmp_to(self, to:str)->int: pass

  def nocasecmp_to(self, to:str)->int: pass

  def naturalcasecmp_to(self, to:str)->int: pass

  def naturalnocasecmp_to(self, to:str)->int: pass

  def filecasecmp_to(self, to:str)->int: pass

  def filenocasecmp_to(self, to:str)->int: pass

  def length(self)->int: pass

  def substr(self, from_:int, len_:int=-1)->str: pass

  def get_slice(self, delimiter:str, slice:int)->str: pass

  def get_slicec(self, delimiter:int, slice:int)->str: pass

  def get_slice_count(self, delimiter:str)->int: pass

  def find(self, what:str, from_:int=0)->int: pass

  def findn(self, what:str, from_:int=0)->int: pass

  def count(self, what:str, from_:int=0, to:int=0)->int: pass

  def countn(self, what:str, from_:int=0, to:int=0)->int: pass

  def rfind(self, what:str, from_:int=-1)->int: pass

  def rfindn(self, what:str, from_:int=-1)->int: pass

  def match(self, expr:str)->bool: pass

  def matchn(self, expr:str)->bool: pass

  def begins_with(self, text:str)->bool: pass

  def ends_with(self, text:str)->bool: pass

  def is_subsequence_of(self, text:str)->bool: pass

  def is_subsequence_ofn(self, text:str)->bool: pass

  def bigrams(self)->PackedStringArray: pass

  def similarity(self, text:str)->float: pass

  def format(self, values:object, placeholder:str= String.new0())->str: pass

  def replace(self, what:str, forwhat:str)->str: pass

  def replacen(self, what:str, forwhat:str)->str: pass

  def repeat(self, count:int)->str: pass

  def reverse(self)->str: pass

  def insert(self, position:int, what:str)->str: pass

  def erase(self, position:int, chars:int=1)->str: pass

  def capitalize(self)->str: pass

  def to_camel_case(self)->str: pass

  def to_pascal_case(self)->str: pass

  def to_snake_case(self)->str: pass

  def split(self, delimiter:str= String.new0(), allow_empty:bool=True, maxsplit:int=0)->PackedStringArray: pass

  def rsplit(self, delimiter:str= String.new0(), allow_empty:bool=True, maxsplit:int=0)->PackedStringArray: pass

  def split_floats(self, delimiter:str, allow_empty:bool=True)->PackedFloat64Array: pass

  def join(self, parts:PackedStringArray)->str: pass

  def to_upper(self)->str: pass

  def to_lower(self)->str: pass

  def left(self, length:int)->str: pass

  def right(self, length:int)->str: pass

  def strip_edges(self, left:bool=True, right:bool=True)->str: pass

  def strip_escapes(self)->str: pass

  def lstrip(self, chars:str)->str: pass

  def rstrip(self, chars:str)->str: pass

  def get_extension(self)->str: pass

  def get_basename(self)->str: pass

  def path_join(self, file:str)->str: pass

  def unicode_at(self, at:int)->int: pass

  def indent(self, prefix:str)->str: pass

  def dedent(self)->str: pass

  def md5_text(self)->str: pass

  def sha1_text(self)->str: pass

  def sha256_text(self)->str: pass

  def md5_buffer(self)->PackedByteArray: pass

  def sha1_buffer(self)->PackedByteArray: pass

  def sha256_buffer(self)->PackedByteArray: pass

  def is_empty(self)->bool: pass

  def contains(self, what:str)->bool: pass

  def containsn(self, what:str)->bool: pass

  def is_absolute_path(self)->bool: pass

  def is_relative_path(self)->bool: pass

  def simplify_path(self)->str: pass

  def get_base_dir(self)->str: pass

  def get_file(self)->str: pass

  def xml_escape(self, escape_quotes:bool=False)->str: pass

  def xml_unescape(self)->str: pass

  def uri_encode(self)->str: pass

  def uri_decode(self)->str: pass

  def c_escape(self)->str: pass

  def c_unescape(self)->str: pass

  def json_escape(self)->str: pass

  def validate_node_name(self)->str: pass

  def validate_filename(self)->str: pass

  def is_valid_identifier(self)->bool: pass

  def is_valid_int(self)->bool: pass

  def is_valid_float(self)->bool: pass

  def is_valid_hex_number(self, with_prefix:bool=False)->bool: pass

  def is_valid_html_color(self)->bool: pass

  def is_valid_ip_address(self)->bool: pass

  def is_valid_filename(self)->bool: pass

  def to_int(self)->int: pass

  def to_float(self)->float: pass

  def hex_to_int(self)->int: pass

  def bin_to_int(self)->int: pass

  def lpad(self, min_length:int, character:str= String.new0())->str: pass

  def rpad(self, min_length:int, character:str= String.new0())->str: pass

  def pad_decimals(self, digits:int)->str: pass

  def pad_zeros(self, digits:int)->str: pass

  def trim_prefix(self, prefix:str)->str: pass

  def trim_suffix(self, suffix:str)->str: pass

  def to_ascii_buffer(self)->PackedByteArray: pass

  def to_utf8_buffer(self)->PackedByteArray: pass

  def to_utf16_buffer(self)->PackedByteArray: pass

  def to_utf32_buffer(self)->PackedByteArray: pass

  def hex_decode(self)->PackedByteArray: pass

  def to_wchar_buffer(self)->PackedByteArray: pass

  def hash(self)->int: pass

  def __eq__(self, other:object|str|StringName) -> bool: pass
  def __ne__(self, other:object|str|StringName) -> bool: pass
  def __mod__(self, other:object|bool|int|float|str|Vector2|Vector2i|Rect2|Rect2i|Vector3|Vector3i|Transform2D|Vector4|Vector4i|Plane|Quaternion|AABB|Basis|Transform3D|Projection|Color|StringName|NodePath|__object__.Object|Callable|Signal|Dictionary|Array|PackedByteArray|PackedInt32Array|PackedInt64Array|PackedFloat32Array|PackedFloat64Array|PackedStringArray|PackedVector2Array|PackedVector3Array|PackedColorArray|PackedVector4Array) -> String: pass
  def __add__(self, other:str|StringName) -> String: pass
  def __lt__(self, other:StringName) -> bool: pass
  def __le__(self, other:StringName) -> bool: pass
  def __gt__(self, other:StringName) -> bool: pass
  def __ge__(self, other:StringName) -> bool: pass


class NodePath(VariantTypeWrapper4):

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->NodePath:pass


  @staticmethod
  def new0() -> NodePath:pass
  @staticmethod
  def new1(from_:NodePath) -> NodePath:pass
  @staticmethod
  def new2(from_:str) -> NodePath:pass



  def is_absolute(self)->bool: pass

  def get_name_count(self)->int: pass

  def get_name(self, idx:int)->StringName: pass

  def get_subname_count(self)->int: pass

  def hash(self)->int: pass

  def get_subname(self, idx:int)->StringName: pass

  def get_concatenated_names(self)->StringName: pass

  def get_concatenated_subnames(self)->StringName: pass

  def slice(self, begin:int, end:int=2147483647)->NodePath: pass

  def get_as_property_path(self)->NodePath: pass

  def is_empty(self)->bool: pass

  def __eq__(self, other:object|NodePath) -> bool: pass
  def __ne__(self, other:object|NodePath) -> bool: pass


class RID(VariantTypeWrapper4):

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->RID:pass


  @staticmethod
  def new0() -> RID:pass
  @staticmethod
  def new1(from_:RID) -> RID:pass



  def is_valid(self)->bool: pass

  def get_id(self)->int: pass

  def __eq__(self, other:object|RID) -> bool: pass
  def __ne__(self, other:object|RID) -> bool: pass
  def __lt__(self, other:RID) -> bool: pass
  def __le__(self, other:RID) -> bool: pass
  def __gt__(self, other:RID) -> bool: pass
  def __ge__(self, other:RID) -> bool: pass


class Callable(VariantTypeWrapper4):

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->Callable:pass


  @staticmethod
  def new0() -> Callable:pass
  @staticmethod
  def new1(from_:Callable) -> Callable:pass
  @staticmethod
  def new2(object:__object__.Object, method:StringName) -> Callable:pass



  @staticmethod
  def create(variant:object, method:StringName)->Callable: pass

  def callv(self, arguments:Array)->object: pass

  def is_null(self)->bool: pass

  def is_custom(self)->bool: pass

  def is_standard(self)->bool: pass

  def is_valid(self)->bool: pass

  def get_object(self)->__object__.Object: pass

  def get_object_id(self)->int: pass

  def get_method(self)->StringName: pass

  def get_argument_count(self)->int: pass

  def get_bound_arguments_count(self)->int: pass

  def get_bound_arguments(self)->Array: pass

  def hash(self)->int: pass

  def bindv(self, arguments:Array)->Callable: pass

  def unbind(self, argcount:int)->Callable: pass

  def call(self)->object: pass

  def call_deferred(self)->None: pass

  def rpc(self)->None: pass

  def rpc_id(self, peer_id:int)->None: pass

  def bind(self)->Callable: pass

  def __eq__(self, other:object|Callable) -> bool: pass
  def __ne__(self, other:object|Callable) -> bool: pass


class Signal(VariantTypeWrapper4):

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->Signal:pass


  @staticmethod
  def new0() -> Signal:pass
  @staticmethod
  def new1(from_:Signal) -> Signal:pass
  @staticmethod
  def new2(object:__object__.Object, signal:StringName) -> Signal:pass



  def is_null(self)->bool: pass

  def get_object(self)->__object__.Object: pass

  def get_object_id(self)->int: pass

  def get_name(self)->StringName: pass

  def connect(self, callable:Callable, flags:int=0)->int: pass

  def disconnect(self, callable:Callable)->None: pass

  def is_connected(self, callable:Callable)->bool: pass

  def get_connections(self)->Array: pass

  def emit(self)->None: pass

  def __eq__(self, other:object|Signal) -> bool: pass
  def __ne__(self, other:object|Signal) -> bool: pass


class Dictionary(VariantTypeWrapper4):

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->Dictionary:pass


  @staticmethod
  def new0() -> Dictionary:pass
  @staticmethod
  def new1(from_:Dictionary) -> Dictionary:pass

  def __setitem__(self, value:object, key:object)->None:pass

  def __getitem__(self,  key:None)->object: pass


  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def merge(self, dictionary:Dictionary, overwrite:bool=False)->None: pass

  def merged(self, dictionary:Dictionary, overwrite:bool=False)->Dictionary: pass

  def has(self, key:object)->bool: pass

  def has_all(self, keys:Array)->bool: pass

  def find_key(self, value:object)->object: pass

  def erase(self, key:object)->bool: pass

  def hash(self)->int: pass

  def keys(self)->Array: pass

  def values(self)->Array: pass

  def duplicate(self, deep:bool=False)->Dictionary: pass

  def get(self, key:object, default:object=None)->object: pass

  def get_or_add(self, key:object, default:object=None)->object: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass

  def recursive_equal(self, dictionary:Dictionary, recursion_count:int)->bool: pass

  def __eq__(self, other:object|Dictionary) -> bool: pass
  def __ne__(self, other:object|Dictionary) -> bool: pass


class Array(VariantTypeWrapper4):

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->Array:pass


  @staticmethod
  def new0() -> Array:pass
  @staticmethod
  def new1(from_:Array) -> Array:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> Array:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> Array:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> Array:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> Array:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> Array:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> Array:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> Array:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> Array:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> Array:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> Array:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> Array:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->Array:pass
  def __next__(self)->object:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:object)->None: pass

  def push_front(self, value:object)->None: pass

  def append(self, value:object)->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:object)->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:object)->None: pass

  def erase(self, value:object)->None: pass

  def front(self)->object: pass

  def back(self)->object: pass

  def pick_random(self)->object: pass

  def find(self, what:object, from_:int=0)->int: pass

  def rfind(self, what:object, from_:int=-1)->int: pass

  def count(self, value:object)->int: pass

  def has(self, value:object)->bool: pass

  def pop_back(self)->object: pass

  def pop_front(self)->object: pass

  def pop_at(self, position:int)->object: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:object, before:bool=True)->int: pass

  def bsearch_custom(self, value:object, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:object=None)->object: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->object: pass

  def min(self)->object: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->object: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass

  def __eq__(self, other:object|Array) -> bool: pass
  def __ne__(self, other:object|Array) -> bool: pass
  def __lt__(self, other:Array) -> bool: pass
  def __le__(self, other:Array) -> bool: pass
  def __gt__(self, other:Array) -> bool: pass
  def __ge__(self, other:Array) -> bool: pass
  def __add__(self, other:Array) -> Array: pass


class PackedByteArray(VariantTypeWrapper4):

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->PackedByteArray:pass


  @staticmethod
  def new0() -> PackedByteArray:pass
  @staticmethod
  def new1(from_:PackedByteArray) -> PackedByteArray:pass
  @staticmethod
  def new2(from_:Array) -> PackedByteArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->PackedByteArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def set(self, index:int, value:int)->None: pass

  def push_back(self, value:int)->bool: pass

  def append(self, value:int)->bool: pass

  def append_array(self, array:PackedByteArray)->None: pass

  def remove_at(self, index:int)->None: pass

  def insert(self, at_index:int, value:int)->int: pass

  def fill(self, value:int)->None: pass

  def resize(self, new_size:int)->int: pass

  def clear(self)->None: pass

  def has(self, value:int)->bool: pass

  def reverse(self)->None: pass

  def slice(self, begin:int, end:int=2147483647)->PackedByteArray: pass

  def sort(self)->None: pass

  def bsearch(self, value:int, before:bool=True)->int: pass

  def duplicate(self)->PackedByteArray: pass

  def find(self, value:int, from_:int=0)->int: pass

  def rfind(self, value:int, from_:int=-1)->int: pass

  def count(self, value:int)->int: pass

  def get_string_from_ascii(self)->str: pass

  def get_string_from_utf8(self)->str: pass

  def get_string_from_utf16(self)->str: pass

  def get_string_from_utf32(self)->str: pass

  def get_string_from_wchar(self)->str: pass

  def hex_encode(self)->str: pass

  def compress(self, compression_mode:int=0)->PackedByteArray: pass

  def decompress(self, buffer_size:int, compression_mode:int=0)->PackedByteArray: pass

  def decompress_dynamic(self, max_output_size:int, compression_mode:int=0)->PackedByteArray: pass

  def decode_u8(self, byte_offset:int)->int: pass

  def decode_s8(self, byte_offset:int)->int: pass

  def decode_u16(self, byte_offset:int)->int: pass

  def decode_s16(self, byte_offset:int)->int: pass

  def decode_u32(self, byte_offset:int)->int: pass

  def decode_s32(self, byte_offset:int)->int: pass

  def decode_u64(self, byte_offset:int)->int: pass

  def decode_s64(self, byte_offset:int)->int: pass

  def decode_half(self, byte_offset:int)->float: pass

  def decode_float(self, byte_offset:int)->float: pass

  def decode_double(self, byte_offset:int)->float: pass

  def has_encoded_var(self, byte_offset:int, allow_objects:bool=False)->bool: pass

  def decode_var(self, byte_offset:int, allow_objects:bool=False)->object: pass

  def decode_var_size(self, byte_offset:int, allow_objects:bool=False)->int: pass

  def to_int32_array(self)->PackedInt32Array: pass

  def to_int64_array(self)->PackedInt64Array: pass

  def to_float32_array(self)->PackedFloat32Array: pass

  def to_float64_array(self)->PackedFloat64Array: pass

  def encode_u8(self, byte_offset:int, value:int)->None: pass

  def encode_s8(self, byte_offset:int, value:int)->None: pass

  def encode_u16(self, byte_offset:int, value:int)->None: pass

  def encode_s16(self, byte_offset:int, value:int)->None: pass

  def encode_u32(self, byte_offset:int, value:int)->None: pass

  def encode_s32(self, byte_offset:int, value:int)->None: pass

  def encode_u64(self, byte_offset:int, value:int)->None: pass

  def encode_s64(self, byte_offset:int, value:int)->None: pass

  def encode_half(self, byte_offset:int, value:float)->None: pass

  def encode_float(self, byte_offset:int, value:float)->None: pass

  def encode_double(self, byte_offset:int, value:float)->None: pass

  def encode_var(self, byte_offset:int, value:object, allow_objects:bool=False)->int: pass

  def __eq__(self, other:object|PackedByteArray) -> bool: pass
  def __ne__(self, other:object|PackedByteArray) -> bool: pass
  def __add__(self, other:PackedByteArray) -> PackedByteArray: pass


class PackedInt32Array(VariantTypeWrapper4):

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->PackedInt32Array:pass


  @staticmethod
  def new0() -> PackedInt32Array:pass
  @staticmethod
  def new1(from_:PackedInt32Array) -> PackedInt32Array:pass
  @staticmethod
  def new2(from_:Array) -> PackedInt32Array:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->PackedInt32Array:pass
  def __next__(self)->int:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def set(self, index:int, value:int)->None: pass

  def push_back(self, value:int)->bool: pass

  def append(self, value:int)->bool: pass

  def append_array(self, array:PackedInt32Array)->None: pass

  def remove_at(self, index:int)->None: pass

  def insert(self, at_index:int, value:int)->int: pass

  def fill(self, value:int)->None: pass

  def resize(self, new_size:int)->int: pass

  def clear(self)->None: pass

  def has(self, value:int)->bool: pass

  def reverse(self)->None: pass

  def slice(self, begin:int, end:int=2147483647)->PackedInt32Array: pass

  def to_byte_array(self)->PackedByteArray: pass

  def sort(self)->None: pass

  def bsearch(self, value:int, before:bool=True)->int: pass

  def duplicate(self)->PackedInt32Array: pass

  def find(self, value:int, from_:int=0)->int: pass

  def rfind(self, value:int, from_:int=-1)->int: pass

  def count(self, value:int)->int: pass

  def __eq__(self, other:object|PackedInt32Array) -> bool: pass
  def __ne__(self, other:object|PackedInt32Array) -> bool: pass
  def __add__(self, other:PackedInt32Array) -> PackedInt32Array: pass


class PackedInt64Array(VariantTypeWrapper4):

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->PackedInt64Array:pass


  @staticmethod
  def new0() -> PackedInt64Array:pass
  @staticmethod
  def new1(from_:PackedInt64Array) -> PackedInt64Array:pass
  @staticmethod
  def new2(from_:Array) -> PackedInt64Array:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->PackedInt64Array:pass
  def __next__(self)->int:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def set(self, index:int, value:int)->None: pass

  def push_back(self, value:int)->bool: pass

  def append(self, value:int)->bool: pass

  def append_array(self, array:PackedInt64Array)->None: pass

  def remove_at(self, index:int)->None: pass

  def insert(self, at_index:int, value:int)->int: pass

  def fill(self, value:int)->None: pass

  def resize(self, new_size:int)->int: pass

  def clear(self)->None: pass

  def has(self, value:int)->bool: pass

  def reverse(self)->None: pass

  def slice(self, begin:int, end:int=2147483647)->PackedInt64Array: pass

  def to_byte_array(self)->PackedByteArray: pass

  def sort(self)->None: pass

  def bsearch(self, value:int, before:bool=True)->int: pass

  def duplicate(self)->PackedInt64Array: pass

  def find(self, value:int, from_:int=0)->int: pass

  def rfind(self, value:int, from_:int=-1)->int: pass

  def count(self, value:int)->int: pass

  def __eq__(self, other:object|PackedInt64Array) -> bool: pass
  def __ne__(self, other:object|PackedInt64Array) -> bool: pass
  def __add__(self, other:PackedInt64Array) -> PackedInt64Array: pass


class PackedFloat32Array(VariantTypeWrapper4):

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->PackedFloat32Array:pass


  @staticmethod
  def new0() -> PackedFloat32Array:pass
  @staticmethod
  def new1(from_:PackedFloat32Array) -> PackedFloat32Array:pass
  @staticmethod
  def new2(from_:Array) -> PackedFloat32Array:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->PackedFloat32Array:pass
  def __next__(self)->float:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def set(self, index:int, value:float)->None: pass

  def push_back(self, value:float)->bool: pass

  def append(self, value:float)->bool: pass

  def append_array(self, array:PackedFloat32Array)->None: pass

  def remove_at(self, index:int)->None: pass

  def insert(self, at_index:int, value:float)->int: pass

  def fill(self, value:float)->None: pass

  def resize(self, new_size:int)->int: pass

  def clear(self)->None: pass

  def has(self, value:float)->bool: pass

  def reverse(self)->None: pass

  def slice(self, begin:int, end:int=2147483647)->PackedFloat32Array: pass

  def to_byte_array(self)->PackedByteArray: pass

  def sort(self)->None: pass

  def bsearch(self, value:float, before:bool=True)->int: pass

  def duplicate(self)->PackedFloat32Array: pass

  def find(self, value:float, from_:int=0)->int: pass

  def rfind(self, value:float, from_:int=-1)->int: pass

  def count(self, value:float)->int: pass

  def __eq__(self, other:object|PackedFloat32Array) -> bool: pass
  def __ne__(self, other:object|PackedFloat32Array) -> bool: pass
  def __add__(self, other:PackedFloat32Array) -> PackedFloat32Array: pass


class PackedFloat64Array(VariantTypeWrapper4):

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->PackedFloat64Array:pass


  @staticmethod
  def new0() -> PackedFloat64Array:pass
  @staticmethod
  def new1(from_:PackedFloat64Array) -> PackedFloat64Array:pass
  @staticmethod
  def new2(from_:Array) -> PackedFloat64Array:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->PackedFloat64Array:pass
  def __next__(self)->float:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def set(self, index:int, value:float)->None: pass

  def push_back(self, value:float)->bool: pass

  def append(self, value:float)->bool: pass

  def append_array(self, array:PackedFloat64Array)->None: pass

  def remove_at(self, index:int)->None: pass

  def insert(self, at_index:int, value:float)->int: pass

  def fill(self, value:float)->None: pass

  def resize(self, new_size:int)->int: pass

  def clear(self)->None: pass

  def has(self, value:float)->bool: pass

  def reverse(self)->None: pass

  def slice(self, begin:int, end:int=2147483647)->PackedFloat64Array: pass

  def to_byte_array(self)->PackedByteArray: pass

  def sort(self)->None: pass

  def bsearch(self, value:float, before:bool=True)->int: pass

  def duplicate(self)->PackedFloat64Array: pass

  def find(self, value:float, from_:int=0)->int: pass

  def rfind(self, value:float, from_:int=-1)->int: pass

  def count(self, value:float)->int: pass

  def __eq__(self, other:object|PackedFloat64Array) -> bool: pass
  def __ne__(self, other:object|PackedFloat64Array) -> bool: pass
  def __add__(self, other:PackedFloat64Array) -> PackedFloat64Array: pass


class PackedStringArray(VariantTypeWrapper4):

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->PackedStringArray:pass


  @staticmethod
  def new0() -> PackedStringArray:pass
  @staticmethod
  def new1(from_:PackedStringArray) -> PackedStringArray:pass
  @staticmethod
  def new2(from_:Array) -> PackedStringArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->PackedStringArray:pass
  def __next__(self)->String:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def set(self, index:int, value:str)->None: pass

  def push_back(self, value:str)->bool: pass

  def append(self, value:str)->bool: pass

  def append_array(self, array:PackedStringArray)->None: pass

  def remove_at(self, index:int)->None: pass

  def insert(self, at_index:int, value:str)->int: pass

  def fill(self, value:str)->None: pass

  def resize(self, new_size:int)->int: pass

  def clear(self)->None: pass

  def has(self, value:str)->bool: pass

  def reverse(self)->None: pass

  def slice(self, begin:int, end:int=2147483647)->PackedStringArray: pass

  def to_byte_array(self)->PackedByteArray: pass

  def sort(self)->None: pass

  def bsearch(self, value:str, before:bool=True)->int: pass

  def duplicate(self)->PackedStringArray: pass

  def find(self, value:str, from_:int=0)->int: pass

  def rfind(self, value:str, from_:int=-1)->int: pass

  def count(self, value:str)->int: pass

  def __eq__(self, other:object|PackedStringArray) -> bool: pass
  def __ne__(self, other:object|PackedStringArray) -> bool: pass
  def __add__(self, other:PackedStringArray) -> PackedStringArray: pass


class PackedVector2Array(VariantTypeWrapper4):

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->PackedVector2Array:pass


  @staticmethod
  def new0() -> PackedVector2Array:pass
  @staticmethod
  def new1(from_:PackedVector2Array) -> PackedVector2Array:pass
  @staticmethod
  def new2(from_:Array) -> PackedVector2Array:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->PackedVector2Array:pass
  def __next__(self)->Vector2:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def set(self, index:int, value:Vector2)->None: pass

  def push_back(self, value:Vector2)->bool: pass

  def append(self, value:Vector2)->bool: pass

  def append_array(self, array:PackedVector2Array)->None: pass

  def remove_at(self, index:int)->None: pass

  def insert(self, at_index:int, value:Vector2)->int: pass

  def fill(self, value:Vector2)->None: pass

  def resize(self, new_size:int)->int: pass

  def clear(self)->None: pass

  def has(self, value:Vector2)->bool: pass

  def reverse(self)->None: pass

  def slice(self, begin:int, end:int=2147483647)->PackedVector2Array: pass

  def to_byte_array(self)->PackedByteArray: pass

  def sort(self)->None: pass

  def bsearch(self, value:Vector2, before:bool=True)->int: pass

  def duplicate(self)->PackedVector2Array: pass

  def find(self, value:Vector2, from_:int=0)->int: pass

  def rfind(self, value:Vector2, from_:int=-1)->int: pass

  def count(self, value:Vector2)->int: pass

  def __eq__(self, other:object|PackedVector2Array) -> bool: pass
  def __ne__(self, other:object|PackedVector2Array) -> bool: pass
  def __mul__(self, other:Transform2D) -> PackedVector2Array: pass
  def __add__(self, other:PackedVector2Array) -> PackedVector2Array: pass


class PackedVector3Array(VariantTypeWrapper4):

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->PackedVector3Array:pass


  @staticmethod
  def new0() -> PackedVector3Array:pass
  @staticmethod
  def new1(from_:PackedVector3Array) -> PackedVector3Array:pass
  @staticmethod
  def new2(from_:Array) -> PackedVector3Array:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->PackedVector3Array:pass
  def __next__(self)->Vector3:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def set(self, index:int, value:Vector3)->None: pass

  def push_back(self, value:Vector3)->bool: pass

  def append(self, value:Vector3)->bool: pass

  def append_array(self, array:PackedVector3Array)->None: pass

  def remove_at(self, index:int)->None: pass

  def insert(self, at_index:int, value:Vector3)->int: pass

  def fill(self, value:Vector3)->None: pass

  def resize(self, new_size:int)->int: pass

  def clear(self)->None: pass

  def has(self, value:Vector3)->bool: pass

  def reverse(self)->None: pass

  def slice(self, begin:int, end:int=2147483647)->PackedVector3Array: pass

  def to_byte_array(self)->PackedByteArray: pass

  def sort(self)->None: pass

  def bsearch(self, value:Vector3, before:bool=True)->int: pass

  def duplicate(self)->PackedVector3Array: pass

  def find(self, value:Vector3, from_:int=0)->int: pass

  def rfind(self, value:Vector3, from_:int=-1)->int: pass

  def count(self, value:Vector3)->int: pass

  def __eq__(self, other:object|PackedVector3Array) -> bool: pass
  def __ne__(self, other:object|PackedVector3Array) -> bool: pass
  def __mul__(self, other:Transform3D) -> PackedVector3Array: pass
  def __add__(self, other:PackedVector3Array) -> PackedVector3Array: pass


class PackedColorArray(VariantTypeWrapper4):

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->PackedColorArray:pass


  @staticmethod
  def new0() -> PackedColorArray:pass
  @staticmethod
  def new1(from_:PackedColorArray) -> PackedColorArray:pass
  @staticmethod
  def new2(from_:Array) -> PackedColorArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->PackedColorArray:pass
  def __next__(self)->Color:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def set(self, index:int, value:Color)->None: pass

  def push_back(self, value:Color)->bool: pass

  def append(self, value:Color)->bool: pass

  def append_array(self, array:PackedColorArray)->None: pass

  def remove_at(self, index:int)->None: pass

  def insert(self, at_index:int, value:Color)->int: pass

  def fill(self, value:Color)->None: pass

  def resize(self, new_size:int)->int: pass

  def clear(self)->None: pass

  def has(self, value:Color)->bool: pass

  def reverse(self)->None: pass

  def slice(self, begin:int, end:int=2147483647)->PackedColorArray: pass

  def to_byte_array(self)->PackedByteArray: pass

  def sort(self)->None: pass

  def bsearch(self, value:Color, before:bool=True)->int: pass

  def duplicate(self)->PackedColorArray: pass

  def find(self, value:Color, from_:int=0)->int: pass

  def rfind(self, value:Color, from_:int=-1)->int: pass

  def count(self, value:Color)->int: pass

  def __eq__(self, other:object|PackedColorArray) -> bool: pass
  def __ne__(self, other:object|PackedColorArray) -> bool: pass
  def __add__(self, other:PackedColorArray) -> PackedColorArray: pass


class PackedVector4Array(VariantTypeWrapper4):

  def __init__(self)->None:pass
  @staticmethod
  def constructor()->PackedVector4Array:pass


  @staticmethod
  def new0() -> PackedVector4Array:pass
  @staticmethod
  def new1(from_:PackedVector4Array) -> PackedVector4Array:pass
  @staticmethod
  def new2(from_:Array) -> PackedVector4Array:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->PackedVector4Array:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def set(self, index:int, value:Vector4)->None: pass

  def push_back(self, value:Vector4)->bool: pass

  def append(self, value:Vector4)->bool: pass

  def append_array(self, array:PackedVector4Array)->None: pass

  def remove_at(self, index:int)->None: pass

  def insert(self, at_index:int, value:Vector4)->int: pass

  def fill(self, value:Vector4)->None: pass

  def resize(self, new_size:int)->int: pass

  def clear(self)->None: pass

  def has(self, value:Vector4)->bool: pass

  def reverse(self)->None: pass

  def slice(self, begin:int, end:int=2147483647)->PackedVector4Array: pass

  def to_byte_array(self)->PackedByteArray: pass

  def sort(self)->None: pass

  def bsearch(self, value:Vector4, before:bool=True)->int: pass

  def duplicate(self)->PackedVector4Array: pass

  def find(self, value:Vector4, from_:int=0)->int: pass

  def rfind(self, value:Vector4, from_:int=-1)->int: pass

  def count(self, value:Vector4)->int: pass

  def __eq__(self, other:object|PackedVector4Array) -> bool: pass
  def __ne__(self, other:object|PackedVector4Array) -> bool: pass
  def __add__(self, other:PackedVector4Array) -> PackedVector4Array: pass

