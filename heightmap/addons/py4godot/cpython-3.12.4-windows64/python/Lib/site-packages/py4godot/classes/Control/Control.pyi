from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Node.Node as __node__
import py4godot.classes.Theme.Theme as __theme__
import py4godot.classes.Object.Object as __object__
import py4godot.classes.Font.Font as __font__
import py4godot.classes.Control.Control as __control__
import py4godot.classes.StyleBox.StyleBox as __stylebox__
import py4godot.classes.Texture2D.Texture2D as __texture2d__
import py4godot.classes.CanvasItem.CanvasItem as __canvasitem__
import py4godot.classes.InputEvent.InputEvent as __inputevent__


class Control(__canvasitem__.CanvasItem):
  resized: BuiltinSignal
  gui_input: BuiltinSignal
  mouse_entered: BuiltinSignal
  mouse_exited: BuiltinSignal
  focus_entered: BuiltinSignal
  focus_exited: BuiltinSignal
  size_flags_changed: BuiltinSignal
  minimum_size_changed: BuiltinSignal
  theme_changed: BuiltinSignal

  @staticmethod
  def constructor()->Control:pass



  @staticmethod
  def cast(other:__object__.Object)->Control:pass


  @property
  def clip_contents(self)->bool: pass
  @clip_contents.setter
  def clip_contents(self,  value:bool)->None: pass
  @property
  def custom_minimum_size(self)->__core__.Vector2: pass
  @custom_minimum_size.setter
  def custom_minimum_size(self,  value:__core__.Vector2)->None: pass
  @property
  def layout_direction(self)->int: pass
  @layout_direction.setter
  def layout_direction(self,  value:int)->None: pass
  @property
  def layout_mode(self)->int: pass
  @layout_mode.setter
  def layout_mode(self,  value:int)->None: pass
  @property
  def anchors_preset(self)->int: pass
  @anchors_preset.setter
  def anchors_preset(self,  value:int)->None: pass
  @property
  def anchor_left(self)->float: pass
  @anchor_left.setter
  def anchor_left(self,  value:float)->None: pass
  @property
  def anchor_top(self)->float: pass
  @anchor_top.setter
  def anchor_top(self,  value:float)->None: pass
  @property
  def anchor_right(self)->float: pass
  @anchor_right.setter
  def anchor_right(self,  value:float)->None: pass
  @property
  def anchor_bottom(self)->float: pass
  @anchor_bottom.setter
  def anchor_bottom(self,  value:float)->None: pass
  @property
  def offset_left(self)->int: pass
  @offset_left.setter
  def offset_left(self,  value:int)->None: pass
  @property
  def offset_top(self)->int: pass
  @offset_top.setter
  def offset_top(self,  value:int)->None: pass
  @property
  def offset_right(self)->int: pass
  @offset_right.setter
  def offset_right(self,  value:int)->None: pass
  @property
  def offset_bottom(self)->int: pass
  @offset_bottom.setter
  def offset_bottom(self,  value:int)->None: pass
  @property
  def grow_horizontal(self)->int: pass
  @grow_horizontal.setter
  def grow_horizontal(self,  value:int)->None: pass
  @property
  def grow_vertical(self)->int: pass
  @grow_vertical.setter
  def grow_vertical(self,  value:int)->None: pass
  @property
  def size(self)->__core__.Vector2: pass
  @size.setter
  def size(self,  value:__core__.Vector2)->None: pass
  @property
  def position(self)->__core__.Vector2: pass
  @position.setter
  def position(self,  value:__core__.Vector2)->None: pass
  @property
  def global_position(self)->__core__.Vector2: pass
  @global_position.setter
  def global_position(self,  value:__core__.Vector2)->None: pass
  @property
  def rotation(self)->float: pass
  @rotation.setter
  def rotation(self,  value:float)->None: pass
  @property
  def rotation_degrees(self)->float: pass
  @rotation_degrees.setter
  def rotation_degrees(self,  value:float)->None: pass
  @property
  def scale(self)->__core__.Vector2: pass
  @scale.setter
  def scale(self,  value:__core__.Vector2)->None: pass
  @property
  def pivot_offset(self)->__core__.Vector2: pass
  @pivot_offset.setter
  def pivot_offset(self,  value:__core__.Vector2)->None: pass
  @property
  def size_flags_horizontal(self)->int: pass
  @size_flags_horizontal.setter
  def size_flags_horizontal(self,  value:int)->None: pass
  @property
  def size_flags_vertical(self)->int: pass
  @size_flags_vertical.setter
  def size_flags_vertical(self,  value:int)->None: pass
  @property
  def size_flags_stretch_ratio(self)->float: pass
  @size_flags_stretch_ratio.setter
  def size_flags_stretch_ratio(self,  value:float)->None: pass
  @property
  def localize_numeral_system(self)->bool: pass
  @localize_numeral_system.setter
  def localize_numeral_system(self,  value:bool)->None: pass
  @property
  def auto_translate(self)->bool: pass
  @auto_translate.setter
  def auto_translate(self,  value:bool)->None: pass
  @property
  def tooltip_text(self)->str: pass
  @tooltip_text.setter
  def tooltip_text(self,  value:str)->None: pass
  @property
  def focus_neighbor_left(self)->__core__.NodePath: pass
  @focus_neighbor_left.setter
  def focus_neighbor_left(self,  value:__core__.NodePath)->None: pass
  @property
  def focus_neighbor_top(self)->__core__.NodePath: pass
  @focus_neighbor_top.setter
  def focus_neighbor_top(self,  value:__core__.NodePath)->None: pass
  @property
  def focus_neighbor_right(self)->__core__.NodePath: pass
  @focus_neighbor_right.setter
  def focus_neighbor_right(self,  value:__core__.NodePath)->None: pass
  @property
  def focus_neighbor_bottom(self)->__core__.NodePath: pass
  @focus_neighbor_bottom.setter
  def focus_neighbor_bottom(self,  value:__core__.NodePath)->None: pass
  @property
  def focus_next(self)->__core__.NodePath: pass
  @focus_next.setter
  def focus_next(self,  value:__core__.NodePath)->None: pass
  @property
  def focus_previous(self)->__core__.NodePath: pass
  @focus_previous.setter
  def focus_previous(self,  value:__core__.NodePath)->None: pass
  @property
  def focus_mode(self)->int: pass
  @focus_mode.setter
  def focus_mode(self,  value:int)->None: pass
  @property
  def mouse_filter(self)->int: pass
  @mouse_filter.setter
  def mouse_filter(self,  value:int)->None: pass
  @property
  def mouse_force_pass_scroll_events(self)->bool: pass
  @mouse_force_pass_scroll_events.setter
  def mouse_force_pass_scroll_events(self,  value:bool)->None: pass
  @property
  def mouse_default_cursor_shape(self)->int: pass
  @mouse_default_cursor_shape.setter
  def mouse_default_cursor_shape(self,  value:int)->None: pass
  @property
  def shortcut_context(self)->__object__.Object: pass
  @shortcut_context.setter
  def shortcut_context(self,  value:__object__.Object)->None: pass
  @property
  def theme(self)->__theme__.Theme: pass
  @theme.setter
  def theme(self,  value:__theme__.Theme)->None: pass
  @property
  def theme_type_variation(self)->str: pass
  @theme_type_variation.setter
  def theme_type_variation(self,  value:str)->None: pass
  def _has_point(self, point:__core__.Vector2)->bool: pass

  def _structured_text_parser(self, args:__core__.Array, text:str)->__core__.Array: pass

  def _get_minimum_size(self)->__core__.Vector2: pass

  def _get_tooltip(self, at_position:__core__.Vector2)->str: pass

  def _get_drag_data(self, at_position:__core__.Vector2)->object: pass

  def _can_drop_data(self, at_position:__core__.Vector2, data:object)->bool: pass

  def _drop_data(self, at_position:__core__.Vector2, data:object)->None: pass

  def _make_custom_tooltip(self, for_text:str)->__object__.Object: pass

  def _gui_input(self, event:__inputevent__.InputEvent)->None: pass

  def accept_event(self)->None: pass

  def get_minimum_size(self)->__core__.Vector2: pass

  def get_combined_minimum_size(self)->__core__.Vector2: pass

  def set_anchors_preset(self, preset:int , keep_offsets:bool=False)->None: pass

  def set_offsets_preset(self, preset:int , resize_mode:int =0, margin:int=0)->None: pass

  def set_anchors_and_offsets_preset(self, preset:int , resize_mode:int =0, margin:int=0)->None: pass

  def set_anchor(self, side:int , anchor:float, keep_offset:bool=False, push_opposite_anchor:bool=True)->None: pass

  def get_anchor(self, side:int )->float: pass

  def set_offset(self, side:int , offset:float)->None: pass

  def get_offset(self, offset:int )->float: pass

  def set_anchor_and_offset(self, side:int , anchor:float, offset:float, push_opposite_anchor:bool=False)->None: pass

  def set_begin(self, position:__core__.Vector2)->None: pass

  def set_end(self, position:__core__.Vector2)->None: pass

  def set_position(self, position:__core__.Vector2, keep_offsets:bool=False)->None: pass

  def set_size(self, size:__core__.Vector2, keep_offsets:bool=False)->None: pass

  def reset_size(self)->None: pass

  def set_custom_minimum_size(self, size:__core__.Vector2)->None: pass

  def set_global_position(self, position:__core__.Vector2, keep_offsets:bool=False)->None: pass

  def set_rotation(self, radians:float)->None: pass

  def set_rotation_degrees(self, degrees:float)->None: pass

  def set_scale(self, scale:__core__.Vector2)->None: pass

  def set_pivot_offset(self, pivot_offset:__core__.Vector2)->None: pass

  def get_begin(self)->__core__.Vector2: pass

  def get_end(self)->__core__.Vector2: pass

  def get_position(self)->__core__.Vector2: pass

  def get_size(self)->__core__.Vector2: pass

  def get_rotation(self)->float: pass

  def get_rotation_degrees(self)->float: pass

  def get_scale(self)->__core__.Vector2: pass

  def get_pivot_offset(self)->__core__.Vector2: pass

  def get_custom_minimum_size(self)->__core__.Vector2: pass

  def get_parent_area_size(self)->__core__.Vector2: pass

  def get_global_position(self)->__core__.Vector2: pass

  def get_screen_position(self)->__core__.Vector2: pass

  def get_rect(self)->__core__.Rect2: pass

  def get_global_rect(self)->__core__.Rect2: pass

  def set_focus_mode(self, mode:int )->None: pass

  def get_focus_mode(self)->int: pass

  def has_focus(self)->bool: pass

  def grab_focus(self)->None: pass

  def release_focus(self)->None: pass

  def find_prev_valid_focus(self)->__control__.Control: pass

  def find_next_valid_focus(self)->__control__.Control: pass

  def find_valid_focus_neighbor(self, side:int )->__control__.Control: pass

  def set_h_size_flags(self, flags:int)->None: pass

  def get_h_size_flags(self)->int: pass

  def set_stretch_ratio(self, ratio:float)->None: pass

  def get_stretch_ratio(self)->float: pass

  def set_v_size_flags(self, flags:int)->None: pass

  def get_v_size_flags(self)->int: pass

  def set_theme(self, theme:__theme__.Theme)->None: pass

  def get_theme(self)->__theme__.Theme: pass

  def set_theme_type_variation(self, theme_type:__core__.StringName)->None: pass

  def get_theme_type_variation(self)->__core__.StringName: pass

  def begin_bulk_theme_override(self)->None: pass

  def end_bulk_theme_override(self)->None: pass

  def add_theme_icon_override(self, name:__core__.StringName, texture:__texture2d__.Texture2D)->None: pass

  def add_theme_stylebox_override(self, name:__core__.StringName, stylebox:__stylebox__.StyleBox)->None: pass

  def add_theme_font_override(self, name:__core__.StringName, font:__font__.Font)->None: pass

  def add_theme_font_size_override(self, name:__core__.StringName, font_size:int)->None: pass

  def add_theme_color_override(self, name:__core__.StringName, color:__core__.Color)->None: pass

  def add_theme_constant_override(self, name:__core__.StringName, constant:int)->None: pass

  def remove_theme_icon_override(self, name:__core__.StringName)->None: pass

  def remove_theme_stylebox_override(self, name:__core__.StringName)->None: pass

  def remove_theme_font_override(self, name:__core__.StringName)->None: pass

  def remove_theme_font_size_override(self, name:__core__.StringName)->None: pass

  def remove_theme_color_override(self, name:__core__.StringName)->None: pass

  def remove_theme_constant_override(self, name:__core__.StringName)->None: pass

  def get_theme_icon(self, name:__core__.StringName, theme_type:__core__.StringName= __core__.StringName.new0())->__texture2d__.Texture2D: pass

  def get_theme_stylebox(self, name:__core__.StringName, theme_type:__core__.StringName= __core__.StringName.new0())->__stylebox__.StyleBox: pass

  def get_theme_font(self, name:__core__.StringName, theme_type:__core__.StringName= __core__.StringName.new0())->__font__.Font: pass

  def get_theme_font_size(self, name:__core__.StringName, theme_type:__core__.StringName= __core__.StringName.new0())->int: pass

  def get_theme_color(self, name:__core__.StringName, theme_type:__core__.StringName= __core__.StringName.new0())->__core__.Color: pass

  def get_theme_constant(self, name:__core__.StringName, theme_type:__core__.StringName= __core__.StringName.new0())->int: pass

  def has_theme_icon_override(self, name:__core__.StringName)->bool: pass

  def has_theme_stylebox_override(self, name:__core__.StringName)->bool: pass

  def has_theme_font_override(self, name:__core__.StringName)->bool: pass

  def has_theme_font_size_override(self, name:__core__.StringName)->bool: pass

  def has_theme_color_override(self, name:__core__.StringName)->bool: pass

  def has_theme_constant_override(self, name:__core__.StringName)->bool: pass

  def has_theme_icon(self, name:__core__.StringName, theme_type:__core__.StringName= __core__.StringName.new0())->bool: pass

  def has_theme_stylebox(self, name:__core__.StringName, theme_type:__core__.StringName= __core__.StringName.new0())->bool: pass

  def has_theme_font(self, name:__core__.StringName, theme_type:__core__.StringName= __core__.StringName.new0())->bool: pass

  def has_theme_font_size(self, name:__core__.StringName, theme_type:__core__.StringName= __core__.StringName.new0())->bool: pass

  def has_theme_color(self, name:__core__.StringName, theme_type:__core__.StringName= __core__.StringName.new0())->bool: pass

  def has_theme_constant(self, name:__core__.StringName, theme_type:__core__.StringName= __core__.StringName.new0())->bool: pass

  def get_theme_default_base_scale(self)->float: pass

  def get_theme_default_font(self)->__font__.Font: pass

  def get_theme_default_font_size(self)->int: pass

  def get_parent_control(self)->__control__.Control: pass

  def set_h_grow_direction(self, direction:int )->None: pass

  def get_h_grow_direction(self)->int: pass

  def set_v_grow_direction(self, direction:int )->None: pass

  def get_v_grow_direction(self)->int: pass

  def set_tooltip_text(self, hint:str)->None: pass

  def get_tooltip_text(self)->str: pass

  def get_tooltip(self, at_position:__core__.Vector2= __core__.Vector2.new0())->str: pass

  def set_default_cursor_shape(self, shape:int )->None: pass

  def get_default_cursor_shape(self)->int: pass

  def get_cursor_shape(self, position:__core__.Vector2= __core__.Vector2.new0())->int: pass

  def set_focus_neighbor(self, side:int , neighbor:__core__.NodePath)->None: pass

  def get_focus_neighbor(self, side:int )->__core__.NodePath: pass

  def set_focus_next(self, next:__core__.NodePath)->None: pass

  def get_focus_next(self)->__core__.NodePath: pass

  def set_focus_previous(self, previous:__core__.NodePath)->None: pass

  def get_focus_previous(self)->__core__.NodePath: pass

  def force_drag(self, data:object, preview:__control__.Control)->None: pass

  def set_mouse_filter(self, filter:int )->None: pass

  def get_mouse_filter(self)->int: pass

  def set_force_pass_scroll_events(self, force_pass_scroll_events:bool)->None: pass

  def is_force_pass_scroll_events(self)->bool: pass

  def set_clip_contents(self, enable:bool)->None: pass

  def is_clipping_contents(self)->bool: pass

  def grab_click_focus(self)->None: pass

  def set_drag_forwarding(self, drag_func:__core__.Callable, can_drop_func:__core__.Callable, drop_func:__core__.Callable)->None: pass

  def set_drag_preview(self, control:__control__.Control)->None: pass

  def is_drag_successful(self)->bool: pass

  def warp_mouse(self, position:__core__.Vector2)->None: pass

  def set_shortcut_context(self, node:__node__.Node)->None: pass

  def get_shortcut_context(self)->__node__.Node: pass

  def update_minimum_size(self)->None: pass

  def set_layout_direction(self, direction:int )->None: pass

  def get_layout_direction(self)->int: pass

  def is_layout_rtl(self)->bool: pass

  def set_auto_translate(self, enable:bool)->None: pass

  def is_auto_translating(self)->bool: pass

  def set_localize_numeral_system(self, enable:bool)->None: pass

  def is_localizing_numeral_system(self)->bool: pass


