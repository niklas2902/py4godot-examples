from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Object.Object as __object__
import py4godot.classes.MainLoop.MainLoop as __mainloop__
import py4godot.classes.ScriptLanguage.ScriptLanguage as __scriptlanguage__


class Engine(__object__.Object):



  @staticmethod
  def cast(other:__object__.Object)->Engine:pass

  @staticmethod
  def get_instance()->Engine:pass

  @property
  def print_error_messages(self)->bool: pass
  @print_error_messages.setter
  def print_error_messages(self,  value:bool)->None: pass
  @property
  def physics_ticks_per_second(self)->int: pass
  @physics_ticks_per_second.setter
  def physics_ticks_per_second(self,  value:int)->None: pass
  @property
  def max_physics_steps_per_frame(self)->int: pass
  @max_physics_steps_per_frame.setter
  def max_physics_steps_per_frame(self,  value:int)->None: pass
  @property
  def max_fps(self)->int: pass
  @max_fps.setter
  def max_fps(self,  value:int)->None: pass
  @property
  def time_scale(self)->float: pass
  @time_scale.setter
  def time_scale(self,  value:float)->None: pass
  @property
  def physics_jitter_fix(self)->float: pass
  @physics_jitter_fix.setter
  def physics_jitter_fix(self,  value:float)->None: pass
  def set_physics_ticks_per_second(self, physics_ticks_per_second:int)->None: pass

  def get_physics_ticks_per_second(self)->int: pass

  def set_max_physics_steps_per_frame(self, max_physics_steps:int)->None: pass

  def get_max_physics_steps_per_frame(self)->int: pass

  def set_physics_jitter_fix(self, physics_jitter_fix:float)->None: pass

  def get_physics_jitter_fix(self)->float: pass

  def get_physics_interpolation_fraction(self)->float: pass

  def set_max_fps(self, max_fps:int)->None: pass

  def get_max_fps(self)->int: pass

  def set_time_scale(self, time_scale:float)->None: pass

  def get_time_scale(self)->float: pass

  def get_frames_drawn(self)->int: pass

  def get_frames_per_second(self)->float: pass

  def get_physics_frames(self)->int: pass

  def get_process_frames(self)->int: pass

  def get_main_loop(self)->__mainloop__.MainLoop: pass

  def get_version_info(self)->__core__.Dictionary: pass

  def get_author_info(self)->__core__.Dictionary: pass

  def get_copyright_info(self)->__core__.Array: pass

  def get_donor_info(self)->__core__.Dictionary: pass

  def get_license_info(self)->__core__.Dictionary: pass

  def get_license_text(self)->str: pass

  def get_architecture_name(self)->str: pass

  def is_in_physics_frame(self)->bool: pass

  def has_singleton(self, name:__core__.StringName)->bool: pass

  def get_singleton(self, name:__core__.StringName)->__object__.Object: pass

  def register_singleton(self, name:__core__.StringName, instance:__object__.Object)->None: pass

  def unregister_singleton(self, name:__core__.StringName)->None: pass

  def get_singleton_list(self)->__core__.PackedStringArray: pass

  def register_script_language(self, language:__scriptlanguage__.ScriptLanguage)->int: pass

  def unregister_script_language(self, language:__scriptlanguage__.ScriptLanguage)->int: pass

  def get_script_language_count(self)->int: pass

  def get_script_language(self, index:int)->__scriptlanguage__.ScriptLanguage: pass

  def is_editor_hint(self)->bool: pass

  def get_write_movie_path(self)->str: pass

  def set_print_error_messages(self, enabled:bool)->None: pass

  def is_printing_error_messages(self)->bool: pass


