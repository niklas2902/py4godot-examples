from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Range.Range as __range__
import py4godot.classes.LineEdit.LineEdit as __lineedit__


class SpinBox(__range__.Range):

  @staticmethod
  def constructor()->SpinBox:pass



  @staticmethod
  def cast(other:__object__.Object)->SpinBox:pass


  @property
  def alignment(self)->int: pass
  @alignment.setter
  def alignment(self,  value:int)->None: pass
  @property
  def editable(self)->bool: pass
  @editable.setter
  def editable(self,  value:bool)->None: pass
  @property
  def update_on_text_changed(self)->bool: pass
  @update_on_text_changed.setter
  def update_on_text_changed(self,  value:bool)->None: pass
  @property
  def prefix(self)->str: pass
  @prefix.setter
  def prefix(self,  value:str)->None: pass
  @property
  def suffix(self)->str: pass
  @suffix.setter
  def suffix(self,  value:str)->None: pass
  @property
  def custom_arrow_step(self)->float: pass
  @custom_arrow_step.setter
  def custom_arrow_step(self,  value:float)->None: pass
  @property
  def select_all_on_focus(self)->bool: pass
  @select_all_on_focus.setter
  def select_all_on_focus(self,  value:bool)->None: pass
  def set_horizontal_alignment(self, alignment:int )->None: pass

  def get_horizontal_alignment(self)->int: pass

  def set_suffix(self, suffix:str)->None: pass

  def get_suffix(self)->str: pass

  def set_prefix(self, prefix:str)->None: pass

  def get_prefix(self)->str: pass

  def set_editable(self, enabled:bool)->None: pass

  def set_custom_arrow_step(self, arrow_step:float)->None: pass

  def get_custom_arrow_step(self)->float: pass

  def is_editable(self)->bool: pass

  def set_update_on_text_changed(self, enabled:bool)->None: pass

  def get_update_on_text_changed(self)->bool: pass

  def set_select_all_on_focus(self, enabled:bool)->None: pass

  def is_select_all_on_focus(self)->bool: pass

  def apply(self)->None: pass

  def get_line_edit(self)->__lineedit__.LineEdit: pass


