from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Object.Object as __object__
import py4godot.classes.Resource.Resource as __resource__
import py4godot.classes.Image.Image as __image__


class GLTFSpecGloss(__resource__.Resource):

  @staticmethod
  def constructor()->GLTFSpecGloss:pass



  @staticmethod
  def cast(other:__object__.Object)->GLTFSpecGloss:pass


  @property
  def diffuse_img(self)->__object__.Object: pass
  @diffuse_img.setter
  def diffuse_img(self,  value:__object__.Object)->None: pass
  @property
  def diffuse_factor(self)->__core__.Color: pass
  @diffuse_factor.setter
  def diffuse_factor(self,  value:__core__.Color)->None: pass
  @property
  def gloss_factor(self)->float: pass
  @gloss_factor.setter
  def gloss_factor(self,  value:float)->None: pass
  @property
  def specular_factor(self)->__core__.Color: pass
  @specular_factor.setter
  def specular_factor(self,  value:__core__.Color)->None: pass
  @property
  def spec_gloss_img(self)->__object__.Object: pass
  @spec_gloss_img.setter
  def spec_gloss_img(self,  value:__object__.Object)->None: pass
  def get_diffuse_img(self)->__image__.Image: pass

  def set_diffuse_img(self, diffuse_img:__image__.Image)->None: pass

  def get_diffuse_factor(self)->__core__.Color: pass

  def set_diffuse_factor(self, diffuse_factor:__core__.Color)->None: pass

  def get_gloss_factor(self)->float: pass

  def set_gloss_factor(self, gloss_factor:float)->None: pass

  def get_specular_factor(self)->__core__.Color: pass

  def set_specular_factor(self, specular_factor:__core__.Color)->None: pass

  def get_spec_gloss_img(self)->__image__.Image: pass

  def set_spec_gloss_img(self, spec_gloss_img:__image__.Image)->None: pass


