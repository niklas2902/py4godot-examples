from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Object.Object as __object__
import py4godot.classes.Script.Script as __script__
import py4godot.classes.Resource.Resource as __resource__


class Script(__resource__.Resource):

  @staticmethod
  def constructor()->Script:pass



  @staticmethod
  def cast(other:__object__.Object)->Script:pass


  @property
  def source_code(self)->str: pass
  @source_code.setter
  def source_code(self,  value:str)->None: pass
  def can_instantiate(self)->bool: pass

  def instance_has(self, base_object:__object__.Object)->bool: pass

  def has_source_code(self)->bool: pass

  def get_source_code(self)->str: pass

  def set_source_code(self, source:str)->None: pass

  def reload(self, keep_state:bool=False)->int: pass

  def get_base_script(self)->__script__.Script: pass

  def get_instance_base_type(self)->__core__.StringName: pass

  def get_global_name(self)->__core__.StringName: pass

  def has_script_signal(self, signal_name:__core__.StringName)->bool: pass

  def get_script_property_list(self)->__core__.Array: pass

  def get_script_method_list(self)->__core__.Array: pass

  def get_script_signal_list(self)->__core__.Array: pass

  def get_script_constant_map(self)->__core__.Dictionary: pass

  def get_property_default_value(self, property:__core__.StringName)->object: pass

  def is_tool(self)->bool: pass

  def is_abstract(self)->bool: pass


