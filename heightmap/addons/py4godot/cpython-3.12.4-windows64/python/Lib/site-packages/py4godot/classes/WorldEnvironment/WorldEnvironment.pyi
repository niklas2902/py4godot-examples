from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Node.Node as __node__
import py4godot.classes.CameraAttributes.CameraAttributes as __cameraattributes__
import py4godot.classes.Compositor.Compositor as __compositor__
import py4godot.classes.CameraAttributesPhysical.CameraAttributesPhysical as __cameraattributesphysical__
import py4godot.classes.Environment.Environment as __environment__


class WorldEnvironment(__node__.Node):

  @staticmethod
  def constructor()->WorldEnvironment:pass



  @staticmethod
  def cast(other:__object__.Object)->WorldEnvironment:pass


  @property
  def environment(self)->__environment__.Environment: pass
  @environment.setter
  def environment(self,  value:__environment__.Environment)->None: pass
  @property
  def camera_attributes(self)->CameraAttributesPractical,CameraAttributesPhysical: pass
  @camera_attributes.setter
  def camera_attributes(self,  value:__cameraattributesphysical__.CameraAttributesPhysical)->None: pass
  @property
  def compositor(self)->__compositor__.Compositor: pass
  @compositor.setter
  def compositor(self,  value:__compositor__.Compositor)->None: pass
  def set_environment(self, env:__environment__.Environment)->None: pass

  def get_environment(self)->__environment__.Environment: pass

  def set_camera_attributes(self, camera_attributes:__cameraattributes__.CameraAttributes)->None: pass

  def get_camera_attributes(self)->__cameraattributes__.CameraAttributes: pass

  def set_compositor(self, compositor:__compositor__.Compositor)->None: pass

  def get_compositor(self)->__compositor__.Compositor: pass


