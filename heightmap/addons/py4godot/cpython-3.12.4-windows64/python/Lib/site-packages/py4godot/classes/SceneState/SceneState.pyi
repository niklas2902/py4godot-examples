from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.PackedScene.PackedScene as __packedscene__
import py4godot.classes.RefCounted.RefCounted as __refcounted__


class SceneState(__refcounted__.RefCounted):

  @staticmethod
  def constructor()->SceneState:pass



  @staticmethod
  def cast(other:__object__.Object)->SceneState:pass


  def get_node_count(self)->int: pass

  def get_node_type(self, idx:int)->__core__.StringName: pass

  def get_node_name(self, idx:int)->__core__.StringName: pass

  def get_node_path(self, idx:int, for_parent:bool=False)->__core__.NodePath: pass

  def get_node_owner_path(self, idx:int)->__core__.NodePath: pass

  def is_node_instance_placeholder(self, idx:int)->bool: pass

  def get_node_instance_placeholder(self, idx:int)->str: pass

  def get_node_instance(self, idx:int)->__packedscene__.PackedScene: pass

  def get_node_groups(self, idx:int)->__core__.PackedStringArray: pass

  def get_node_index(self, idx:int)->int: pass

  def get_node_property_count(self, idx:int)->int: pass

  def get_node_property_name(self, idx:int, prop_idx:int)->__core__.StringName: pass

  def get_node_property_value(self, idx:int, prop_idx:int)->object: pass

  def get_connection_count(self)->int: pass

  def get_connection_source(self, idx:int)->__core__.NodePath: pass

  def get_connection_signal(self, idx:int)->__core__.StringName: pass

  def get_connection_target(self, idx:int)->__core__.NodePath: pass

  def get_connection_method(self, idx:int)->__core__.StringName: pass

  def get_connection_flags(self, idx:int)->int: pass

  def get_connection_binds(self, idx:int)->__core__.Array: pass

  def get_connection_unbinds(self, idx:int)->int: pass


