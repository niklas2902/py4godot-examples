from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Shape3D.Shape3D as __shape3d__
import py4godot.classes.Node3D.Node3D as __node3d__


class SpringArm3D(__node3d__.Node3D):

  @staticmethod
  def constructor()->SpringArm3D:pass



  @staticmethod
  def cast(other:__object__.Object)->SpringArm3D:pass


  @property
  def collision_mask(self)->int: pass
  @collision_mask.setter
  def collision_mask(self,  value:int)->None: pass
  @property
  def shape(self)->__shape3d__.Shape3D: pass
  @shape.setter
  def shape(self,  value:__shape3d__.Shape3D)->None: pass
  @property
  def spring_length(self)->float: pass
  @spring_length.setter
  def spring_length(self,  value:float)->None: pass
  @property
  def margin(self)->float: pass
  @margin.setter
  def margin(self,  value:float)->None: pass
  def get_hit_length(self)->float: pass

  def set_length(self, length:float)->None: pass

  def get_length(self)->float: pass

  def set_shape(self, shape:__shape3d__.Shape3D)->None: pass

  def get_shape(self)->__shape3d__.Shape3D: pass

  def add_excluded_object(self, RID:__core__.RID)->None: pass

  def remove_excluded_object(self, RID:__core__.RID)->bool: pass

  def clear_excluded_objects(self)->None: pass

  def set_collision_mask(self, mask:int)->None: pass

  def get_collision_mask(self)->int: pass

  def set_margin(self, margin:float)->None: pass

  def get_margin(self)->float: pass


