from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.PhysicsServer2D.PhysicsServer2D as __physicsserver2d__
import py4godot.classes.PhysicsDirectSpaceState2D.PhysicsDirectSpaceState2D as __physicsdirectspacestate2d__
import py4godot.classes.PhysicsDirectBodyState2D.PhysicsDirectBodyState2D as __physicsdirectbodystate2d__


class PhysicsServer2DExtension(__physicsserver2d__.PhysicsServer2D):

  @staticmethod
  def constructor()->PhysicsServer2DExtension:pass



  @staticmethod
  def cast(other:__object__.Object)->PhysicsServer2DExtension:pass


  def _world_boundary_shape_create(self)->__core__.RID: pass

  def _separation_ray_shape_create(self)->__core__.RID: pass

  def _segment_shape_create(self)->__core__.RID: pass

  def _circle_shape_create(self)->__core__.RID: pass

  def _rectangle_shape_create(self)->__core__.RID: pass

  def _capsule_shape_create(self)->__core__.RID: pass

  def _convex_polygon_shape_create(self)->__core__.RID: pass

  def _concave_polygon_shape_create(self)->__core__.RID: pass

  def _shape_set_data(self, shape:__core__.RID, data:object)->None: pass

  def _shape_set_custom_solver_bias(self, shape:__core__.RID, bias:float)->None: pass

  def _shape_get_type(self, shape:__core__.RID)->int: pass

  def _shape_get_data(self, shape:__core__.RID)->object: pass

  def _shape_get_custom_solver_bias(self, shape:__core__.RID)->float: pass

  def _space_create(self)->__core__.RID: pass

  def _space_set_active(self, space:__core__.RID, active:bool)->None: pass

  def _space_is_active(self, space:__core__.RID)->bool: pass

  def _space_set_param(self, space:__core__.RID, param:int , value:float)->None: pass

  def _space_get_param(self, space:__core__.RID, param:int )->float: pass

  def _space_get_direct_state(self, space:__core__.RID)->__physicsdirectspacestate2d__.PhysicsDirectSpaceState2D: pass

  def _space_set_debug_contacts(self, space:__core__.RID, max_contacts:int)->None: pass

  def _space_get_contacts(self, space:__core__.RID)->__core__.PackedVector2Array: pass

  def _space_get_contact_count(self, space:__core__.RID)->int: pass

  def _area_create(self)->__core__.RID: pass

  def _area_set_space(self, area:__core__.RID, space:__core__.RID)->None: pass

  def _area_get_space(self, area:__core__.RID)->__core__.RID: pass

  def _area_add_shape(self, area:__core__.RID, shape:__core__.RID, transform:__core__.Transform2D, disabled:bool)->None: pass

  def _area_set_shape(self, area:__core__.RID, shape_idx:int, shape:__core__.RID)->None: pass

  def _area_set_shape_transform(self, area:__core__.RID, shape_idx:int, transform:__core__.Transform2D)->None: pass

  def _area_set_shape_disabled(self, area:__core__.RID, shape_idx:int, disabled:bool)->None: pass

  def _area_get_shape_count(self, area:__core__.RID)->int: pass

  def _area_get_shape(self, area:__core__.RID, shape_idx:int)->__core__.RID: pass

  def _area_get_shape_transform(self, area:__core__.RID, shape_idx:int)->__core__.Transform2D: pass

  def _area_remove_shape(self, area:__core__.RID, shape_idx:int)->None: pass

  def _area_clear_shapes(self, area:__core__.RID)->None: pass

  def _area_attach_object_instance_id(self, area:__core__.RID, id:int)->None: pass

  def _area_get_object_instance_id(self, area:__core__.RID)->int: pass

  def _area_attach_canvas_instance_id(self, area:__core__.RID, id:int)->None: pass

  def _area_get_canvas_instance_id(self, area:__core__.RID)->int: pass

  def _area_set_param(self, area:__core__.RID, param:int , value:object)->None: pass

  def _area_set_transform(self, area:__core__.RID, transform:__core__.Transform2D)->None: pass

  def _area_get_param(self, area:__core__.RID, param:int )->object: pass

  def _area_get_transform(self, area:__core__.RID)->__core__.Transform2D: pass

  def _area_set_collision_layer(self, area:__core__.RID, layer:int)->None: pass

  def _area_get_collision_layer(self, area:__core__.RID)->int: pass

  def _area_set_collision_mask(self, area:__core__.RID, mask:int)->None: pass

  def _area_get_collision_mask(self, area:__core__.RID)->int: pass

  def _area_set_monitorable(self, area:__core__.RID, monitorable:bool)->None: pass

  def _area_set_pickable(self, area:__core__.RID, pickable:bool)->None: pass

  def _area_set_monitor_callback(self, area:__core__.RID, callback:__core__.Callable)->None: pass

  def _area_set_area_monitor_callback(self, area:__core__.RID, callback:__core__.Callable)->None: pass

  def _body_create(self)->__core__.RID: pass

  def _body_set_space(self, body:__core__.RID, space:__core__.RID)->None: pass

  def _body_get_space(self, body:__core__.RID)->__core__.RID: pass

  def _body_set_mode(self, body:__core__.RID, mode:int )->None: pass

  def _body_get_mode(self, body:__core__.RID)->int: pass

  def _body_add_shape(self, body:__core__.RID, shape:__core__.RID, transform:__core__.Transform2D, disabled:bool)->None: pass

  def _body_set_shape(self, body:__core__.RID, shape_idx:int, shape:__core__.RID)->None: pass

  def _body_set_shape_transform(self, body:__core__.RID, shape_idx:int, transform:__core__.Transform2D)->None: pass

  def _body_get_shape_count(self, body:__core__.RID)->int: pass

  def _body_get_shape(self, body:__core__.RID, shape_idx:int)->__core__.RID: pass

  def _body_get_shape_transform(self, body:__core__.RID, shape_idx:int)->__core__.Transform2D: pass

  def _body_set_shape_disabled(self, body:__core__.RID, shape_idx:int, disabled:bool)->None: pass

  def _body_set_shape_as_one_way_collision(self, body:__core__.RID, shape_idx:int, enable:bool, margin:float)->None: pass

  def _body_remove_shape(self, body:__core__.RID, shape_idx:int)->None: pass

  def _body_clear_shapes(self, body:__core__.RID)->None: pass

  def _body_attach_object_instance_id(self, body:__core__.RID, id:int)->None: pass

  def _body_get_object_instance_id(self, body:__core__.RID)->int: pass

  def _body_attach_canvas_instance_id(self, body:__core__.RID, id:int)->None: pass

  def _body_get_canvas_instance_id(self, body:__core__.RID)->int: pass

  def _body_set_continuous_collision_detection_mode(self, body:__core__.RID, mode:int )->None: pass

  def _body_get_continuous_collision_detection_mode(self, body:__core__.RID)->int: pass

  def _body_set_collision_layer(self, body:__core__.RID, layer:int)->None: pass

  def _body_get_collision_layer(self, body:__core__.RID)->int: pass

  def _body_set_collision_mask(self, body:__core__.RID, mask:int)->None: pass

  def _body_get_collision_mask(self, body:__core__.RID)->int: pass

  def _body_set_collision_priority(self, body:__core__.RID, priority:float)->None: pass

  def _body_get_collision_priority(self, body:__core__.RID)->float: pass

  def _body_set_param(self, body:__core__.RID, param:int , value:object)->None: pass

  def _body_get_param(self, body:__core__.RID, param:int )->object: pass

  def _body_reset_mass_properties(self, body:__core__.RID)->None: pass

  def _body_set_state(self, body:__core__.RID, state:int , value:object)->None: pass

  def _body_get_state(self, body:__core__.RID, state:int )->object: pass

  def _body_apply_central_impulse(self, body:__core__.RID, impulse:__core__.Vector2)->None: pass

  def _body_apply_torque_impulse(self, body:__core__.RID, impulse:float)->None: pass

  def _body_apply_impulse(self, body:__core__.RID, impulse:__core__.Vector2, position:__core__.Vector2)->None: pass

  def _body_apply_central_force(self, body:__core__.RID, force:__core__.Vector2)->None: pass

  def _body_apply_force(self, body:__core__.RID, force:__core__.Vector2, position:__core__.Vector2)->None: pass

  def _body_apply_torque(self, body:__core__.RID, torque:float)->None: pass

  def _body_add_constant_central_force(self, body:__core__.RID, force:__core__.Vector2)->None: pass

  def _body_add_constant_force(self, body:__core__.RID, force:__core__.Vector2, position:__core__.Vector2)->None: pass

  def _body_add_constant_torque(self, body:__core__.RID, torque:float)->None: pass

  def _body_set_constant_force(self, body:__core__.RID, force:__core__.Vector2)->None: pass

  def _body_get_constant_force(self, body:__core__.RID)->__core__.Vector2: pass

  def _body_set_constant_torque(self, body:__core__.RID, torque:float)->None: pass

  def _body_get_constant_torque(self, body:__core__.RID)->float: pass

  def _body_set_axis_velocity(self, body:__core__.RID, axis_velocity:__core__.Vector2)->None: pass

  def _body_add_collision_exception(self, body:__core__.RID, excepted_body:__core__.RID)->None: pass

  def _body_remove_collision_exception(self, body:__core__.RID, excepted_body:__core__.RID)->None: pass

  def _body_get_collision_exceptions(self, body:__core__.RID)->__core__.Array: pass

  def _body_set_max_contacts_reported(self, body:__core__.RID, amount:int)->None: pass

  def _body_get_max_contacts_reported(self, body:__core__.RID)->int: pass

  def _body_set_contacts_reported_depth_threshold(self, body:__core__.RID, threshold:float)->None: pass

  def _body_get_contacts_reported_depth_threshold(self, body:__core__.RID)->float: pass

  def _body_set_omit_force_integration(self, body:__core__.RID, enable:bool)->None: pass

  def _body_is_omitting_force_integration(self, body:__core__.RID)->bool: pass

  def _body_set_state_sync_callback(self, body:__core__.RID, callable:__core__.Callable)->None: pass

  def _body_set_force_integration_callback(self, body:__core__.RID, callable:__core__.Callable, userdata:object)->None: pass

  def _body_set_pickable(self, body:__core__.RID, pickable:bool)->None: pass

  def _body_get_direct_state(self, body:__core__.RID)->__physicsdirectbodystate2d__.PhysicsDirectBodyState2D: pass

  def _joint_create(self)->__core__.RID: pass

  def _joint_clear(self, joint:__core__.RID)->None: pass

  def _joint_set_param(self, joint:__core__.RID, param:int , value:float)->None: pass

  def _joint_get_param(self, joint:__core__.RID, param:int )->float: pass

  def _joint_disable_collisions_between_bodies(self, joint:__core__.RID, disable:bool)->None: pass

  def _joint_is_disabled_collisions_between_bodies(self, joint:__core__.RID)->bool: pass

  def _joint_make_pin(self, joint:__core__.RID, anchor:__core__.Vector2, body_a:__core__.RID, body_b:__core__.RID)->None: pass

  def _joint_make_groove(self, joint:__core__.RID, a_groove1:__core__.Vector2, a_groove2:__core__.Vector2, b_anchor:__core__.Vector2, body_a:__core__.RID, body_b:__core__.RID)->None: pass

  def _joint_make_damped_spring(self, joint:__core__.RID, anchor_a:__core__.Vector2, anchor_b:__core__.Vector2, body_a:__core__.RID, body_b:__core__.RID)->None: pass

  def _pin_joint_set_flag(self, joint:__core__.RID, flag:int , enabled:bool)->None: pass

  def _pin_joint_get_flag(self, joint:__core__.RID, flag:int )->bool: pass

  def _pin_joint_set_param(self, joint:__core__.RID, param:int , value:float)->None: pass

  def _pin_joint_get_param(self, joint:__core__.RID, param:int )->float: pass

  def _damped_spring_joint_set_param(self, joint:__core__.RID, param:int , value:float)->None: pass

  def _damped_spring_joint_get_param(self, joint:__core__.RID, param:int )->float: pass

  def _joint_get_type(self, joint:__core__.RID)->int: pass

  def _free_rid(self, rid:__core__.RID)->None: pass

  def _set_active(self, active:bool)->None: pass

  def _init(self)->None: pass

  def _step(self, step:float)->None: pass

  def _sync(self)->None: pass

  def _flush_queries(self)->None: pass

  def _end_sync(self)->None: pass

  def _finish(self)->None: pass

  def _is_flushing_queries(self)->bool: pass

  def _get_process_info(self, process_info:int )->int: pass

  def body_test_motion_is_excluding_body(self, body:__core__.RID)->bool: pass

  def body_test_motion_is_excluding_object(self, object:int)->bool: pass


