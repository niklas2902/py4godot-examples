from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Resource.Resource as __resource__
import py4godot.classes.SceneReplicationConfig.SceneReplicationConfig as __scenereplicationconfig__


class SceneReplicationConfig(__resource__.Resource):

  @staticmethod
  def constructor()->SceneReplicationConfig:pass



  @staticmethod
  def cast(other:__object__.Object)->SceneReplicationConfig:pass


  def get_properties(self)->__core__.Array: pass

  def add_property(self, path:__core__.NodePath, index:int=-1)->None: pass

  def has_property(self, path:__core__.NodePath)->bool: pass

  def remove_property(self, path:__core__.NodePath)->None: pass

  def property_get_index(self, path:__core__.NodePath)->int: pass

  def property_get_spawn(self, path:__core__.NodePath)->bool: pass

  def property_set_spawn(self, path:__core__.NodePath, enabled:bool)->None: pass

  def property_get_replication_mode(self, path:__core__.NodePath)->int: pass

  def property_set_replication_mode(self, path:__core__.NodePath, mode:int )->None: pass

  def property_get_sync(self, path:__core__.NodePath)->bool: pass

  def property_set_sync(self, path:__core__.NodePath, enabled:bool)->None: pass

  def property_get_watch(self, path:__core__.NodePath)->bool: pass

  def property_set_watch(self, path:__core__.NodePath, enabled:bool)->None: pass


