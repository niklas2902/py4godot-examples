from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Texture2D.Texture2D as __texture2d__
import py4godot.classes.BaseMaterial3D.BaseMaterial3D as __basematerial3d__
import py4godot.classes.Material.Material as __material__


class BaseMaterial3D(__material__.Material):

  @staticmethod
  def constructor()->BaseMaterial3D:pass



  @staticmethod
  def cast(other:__object__.Object)->BaseMaterial3D:pass


  @property
  def transparency(self)->int: pass
  @transparency.setter
  def transparency(self,  value:int)->None: pass
  @property
  def alpha_scissor_threshold(self)->float: pass
  @alpha_scissor_threshold.setter
  def alpha_scissor_threshold(self,  value:float)->None: pass
  @property
  def alpha_hash_scale(self)->float: pass
  @alpha_hash_scale.setter
  def alpha_hash_scale(self,  value:float)->None: pass
  @property
  def alpha_antialiasing_mode(self)->int: pass
  @alpha_antialiasing_mode.setter
  def alpha_antialiasing_mode(self,  value:int)->None: pass
  @property
  def alpha_antialiasing_edge(self)->float: pass
  @alpha_antialiasing_edge.setter
  def alpha_antialiasing_edge(self,  value:float)->None: pass
  @property
  def blend_mode(self)->int: pass
  @blend_mode.setter
  def blend_mode(self,  value:int)->None: pass
  @property
  def cull_mode(self)->int: pass
  @cull_mode.setter
  def cull_mode(self,  value:int)->None: pass
  @property
  def depth_draw_mode(self)->int: pass
  @depth_draw_mode.setter
  def depth_draw_mode(self,  value:int)->None: pass
  @property
  def no_depth_test(self)->bool: pass
  @no_depth_test.setter
  def no_depth_test(self,  value:bool)->None: pass
  @property
  def shading_mode(self)->int: pass
  @shading_mode.setter
  def shading_mode(self,  value:int)->None: pass
  @property
  def diffuse_mode(self)->int: pass
  @diffuse_mode.setter
  def diffuse_mode(self,  value:int)->None: pass
  @property
  def specular_mode(self)->int: pass
  @specular_mode.setter
  def specular_mode(self,  value:int)->None: pass
  @property
  def disable_ambient_light(self)->bool: pass
  @disable_ambient_light.setter
  def disable_ambient_light(self,  value:bool)->None: pass
  @property
  def disable_fog(self)->bool: pass
  @disable_fog.setter
  def disable_fog(self,  value:bool)->None: pass
  @property
  def vertex_color_use_as_albedo(self)->bool: pass
  @vertex_color_use_as_albedo.setter
  def vertex_color_use_as_albedo(self,  value:bool)->None: pass
  @property
  def vertex_color_is_srgb(self)->bool: pass
  @vertex_color_is_srgb.setter
  def vertex_color_is_srgb(self,  value:bool)->None: pass
  @property
  def albedo_color(self)->__core__.Color: pass
  @albedo_color.setter
  def albedo_color(self,  value:__core__.Color)->None: pass
  @property
  def albedo_texture(self)->__texture2d__.Texture2D: pass
  @albedo_texture.setter
  def albedo_texture(self,  value:__texture2d__.Texture2D)->None: pass
  @property
  def albedo_texture_force_srgb(self)->bool: pass
  @albedo_texture_force_srgb.setter
  def albedo_texture_force_srgb(self,  value:bool)->None: pass
  @property
  def albedo_texture_msdf(self)->bool: pass
  @albedo_texture_msdf.setter
  def albedo_texture_msdf(self,  value:bool)->None: pass
  @property
  def orm_texture(self)->__texture2d__.Texture2D: pass
  @orm_texture.setter
  def orm_texture(self,  value:__texture2d__.Texture2D)->None: pass
  @property
  def metallic(self)->float: pass
  @metallic.setter
  def metallic(self,  value:float)->None: pass
  @property
  def metallic_specular(self)->float: pass
  @metallic_specular.setter
  def metallic_specular(self,  value:float)->None: pass
  @property
  def metallic_texture(self)->__texture2d__.Texture2D: pass
  @metallic_texture.setter
  def metallic_texture(self,  value:__texture2d__.Texture2D)->None: pass
  @property
  def metallic_texture_channel(self)->int: pass
  @metallic_texture_channel.setter
  def metallic_texture_channel(self,  value:int)->None: pass
  @property
  def roughness(self)->float: pass
  @roughness.setter
  def roughness(self,  value:float)->None: pass
  @property
  def roughness_texture(self)->__texture2d__.Texture2D: pass
  @roughness_texture.setter
  def roughness_texture(self,  value:__texture2d__.Texture2D)->None: pass
  @property
  def roughness_texture_channel(self)->int: pass
  @roughness_texture_channel.setter
  def roughness_texture_channel(self,  value:int)->None: pass
  @property
  def emission_enabled(self)->bool: pass
  @emission_enabled.setter
  def emission_enabled(self,  value:bool)->None: pass
  @property
  def emission(self)->__core__.Color: pass
  @emission.setter
  def emission(self,  value:__core__.Color)->None: pass
  @property
  def emission_energy_multiplier(self)->float: pass
  @emission_energy_multiplier.setter
  def emission_energy_multiplier(self,  value:float)->None: pass
  @property
  def emission_intensity(self)->float: pass
  @emission_intensity.setter
  def emission_intensity(self,  value:float)->None: pass
  @property
  def emission_operator(self)->int: pass
  @emission_operator.setter
  def emission_operator(self,  value:int)->None: pass
  @property
  def emission_on_uv2(self)->bool: pass
  @emission_on_uv2.setter
  def emission_on_uv2(self,  value:bool)->None: pass
  @property
  def emission_texture(self)->__texture2d__.Texture2D: pass
  @emission_texture.setter
  def emission_texture(self,  value:__texture2d__.Texture2D)->None: pass
  @property
  def normal_enabled(self)->bool: pass
  @normal_enabled.setter
  def normal_enabled(self,  value:bool)->None: pass
  @property
  def normal_scale(self)->float: pass
  @normal_scale.setter
  def normal_scale(self,  value:float)->None: pass
  @property
  def normal_texture(self)->__texture2d__.Texture2D: pass
  @normal_texture.setter
  def normal_texture(self,  value:__texture2d__.Texture2D)->None: pass
  @property
  def rim_enabled(self)->bool: pass
  @rim_enabled.setter
  def rim_enabled(self,  value:bool)->None: pass
  @property
  def rim(self)->float: pass
  @rim.setter
  def rim(self,  value:float)->None: pass
  @property
  def rim_tint(self)->float: pass
  @rim_tint.setter
  def rim_tint(self,  value:float)->None: pass
  @property
  def rim_texture(self)->__texture2d__.Texture2D: pass
  @rim_texture.setter
  def rim_texture(self,  value:__texture2d__.Texture2D)->None: pass
  @property
  def clearcoat_enabled(self)->bool: pass
  @clearcoat_enabled.setter
  def clearcoat_enabled(self,  value:bool)->None: pass
  @property
  def clearcoat(self)->float: pass
  @clearcoat.setter
  def clearcoat(self,  value:float)->None: pass
  @property
  def clearcoat_roughness(self)->float: pass
  @clearcoat_roughness.setter
  def clearcoat_roughness(self,  value:float)->None: pass
  @property
  def clearcoat_texture(self)->__texture2d__.Texture2D: pass
  @clearcoat_texture.setter
  def clearcoat_texture(self,  value:__texture2d__.Texture2D)->None: pass
  @property
  def anisotropy_enabled(self)->bool: pass
  @anisotropy_enabled.setter
  def anisotropy_enabled(self,  value:bool)->None: pass
  @property
  def anisotropy(self)->float: pass
  @anisotropy.setter
  def anisotropy(self,  value:float)->None: pass
  @property
  def anisotropy_flowmap(self)->__texture2d__.Texture2D: pass
  @anisotropy_flowmap.setter
  def anisotropy_flowmap(self,  value:__texture2d__.Texture2D)->None: pass
  @property
  def ao_enabled(self)->bool: pass
  @ao_enabled.setter
  def ao_enabled(self,  value:bool)->None: pass
  @property
  def ao_light_affect(self)->float: pass
  @ao_light_affect.setter
  def ao_light_affect(self,  value:float)->None: pass
  @property
  def ao_texture(self)->__texture2d__.Texture2D: pass
  @ao_texture.setter
  def ao_texture(self,  value:__texture2d__.Texture2D)->None: pass
  @property
  def ao_on_uv2(self)->bool: pass
  @ao_on_uv2.setter
  def ao_on_uv2(self,  value:bool)->None: pass
  @property
  def ao_texture_channel(self)->int: pass
  @ao_texture_channel.setter
  def ao_texture_channel(self,  value:int)->None: pass
  @property
  def heightmap_enabled(self)->bool: pass
  @heightmap_enabled.setter
  def heightmap_enabled(self,  value:bool)->None: pass
  @property
  def heightmap_scale(self)->float: pass
  @heightmap_scale.setter
  def heightmap_scale(self,  value:float)->None: pass
  @property
  def heightmap_deep_parallax(self)->bool: pass
  @heightmap_deep_parallax.setter
  def heightmap_deep_parallax(self,  value:bool)->None: pass
  @property
  def heightmap_min_layers(self)->int: pass
  @heightmap_min_layers.setter
  def heightmap_min_layers(self,  value:int)->None: pass
  @property
  def heightmap_max_layers(self)->int: pass
  @heightmap_max_layers.setter
  def heightmap_max_layers(self,  value:int)->None: pass
  @property
  def heightmap_flip_tangent(self)->bool: pass
  @heightmap_flip_tangent.setter
  def heightmap_flip_tangent(self,  value:bool)->None: pass
  @property
  def heightmap_flip_binormal(self)->bool: pass
  @heightmap_flip_binormal.setter
  def heightmap_flip_binormal(self,  value:bool)->None: pass
  @property
  def heightmap_texture(self)->__texture2d__.Texture2D: pass
  @heightmap_texture.setter
  def heightmap_texture(self,  value:__texture2d__.Texture2D)->None: pass
  @property
  def heightmap_flip_texture(self)->bool: pass
  @heightmap_flip_texture.setter
  def heightmap_flip_texture(self,  value:bool)->None: pass
  @property
  def subsurf_scatter_enabled(self)->bool: pass
  @subsurf_scatter_enabled.setter
  def subsurf_scatter_enabled(self,  value:bool)->None: pass
  @property
  def subsurf_scatter_strength(self)->float: pass
  @subsurf_scatter_strength.setter
  def subsurf_scatter_strength(self,  value:float)->None: pass
  @property
  def subsurf_scatter_skin_mode(self)->bool: pass
  @subsurf_scatter_skin_mode.setter
  def subsurf_scatter_skin_mode(self,  value:bool)->None: pass
  @property
  def subsurf_scatter_texture(self)->__texture2d__.Texture2D: pass
  @subsurf_scatter_texture.setter
  def subsurf_scatter_texture(self,  value:__texture2d__.Texture2D)->None: pass
  @property
  def subsurf_scatter_transmittance_enabled(self)->bool: pass
  @subsurf_scatter_transmittance_enabled.setter
  def subsurf_scatter_transmittance_enabled(self,  value:bool)->None: pass
  @property
  def subsurf_scatter_transmittance_color(self)->__core__.Color: pass
  @subsurf_scatter_transmittance_color.setter
  def subsurf_scatter_transmittance_color(self,  value:__core__.Color)->None: pass
  @property
  def subsurf_scatter_transmittance_texture(self)->__texture2d__.Texture2D: pass
  @subsurf_scatter_transmittance_texture.setter
  def subsurf_scatter_transmittance_texture(self,  value:__texture2d__.Texture2D)->None: pass
  @property
  def subsurf_scatter_transmittance_depth(self)->float: pass
  @subsurf_scatter_transmittance_depth.setter
  def subsurf_scatter_transmittance_depth(self,  value:float)->None: pass
  @property
  def subsurf_scatter_transmittance_boost(self)->float: pass
  @subsurf_scatter_transmittance_boost.setter
  def subsurf_scatter_transmittance_boost(self,  value:float)->None: pass
  @property
  def backlight_enabled(self)->bool: pass
  @backlight_enabled.setter
  def backlight_enabled(self,  value:bool)->None: pass
  @property
  def backlight(self)->__core__.Color: pass
  @backlight.setter
  def backlight(self,  value:__core__.Color)->None: pass
  @property
  def backlight_texture(self)->__texture2d__.Texture2D: pass
  @backlight_texture.setter
  def backlight_texture(self,  value:__texture2d__.Texture2D)->None: pass
  @property
  def refraction_enabled(self)->bool: pass
  @refraction_enabled.setter
  def refraction_enabled(self,  value:bool)->None: pass
  @property
  def refraction_scale(self)->float: pass
  @refraction_scale.setter
  def refraction_scale(self,  value:float)->None: pass
  @property
  def refraction_texture(self)->__texture2d__.Texture2D: pass
  @refraction_texture.setter
  def refraction_texture(self,  value:__texture2d__.Texture2D)->None: pass
  @property
  def refraction_texture_channel(self)->int: pass
  @refraction_texture_channel.setter
  def refraction_texture_channel(self,  value:int)->None: pass
  @property
  def detail_enabled(self)->bool: pass
  @detail_enabled.setter
  def detail_enabled(self,  value:bool)->None: pass
  @property
  def detail_mask(self)->__texture2d__.Texture2D: pass
  @detail_mask.setter
  def detail_mask(self,  value:__texture2d__.Texture2D)->None: pass
  @property
  def detail_blend_mode(self)->int: pass
  @detail_blend_mode.setter
  def detail_blend_mode(self,  value:int)->None: pass
  @property
  def detail_uv_layer(self)->int: pass
  @detail_uv_layer.setter
  def detail_uv_layer(self,  value:int)->None: pass
  @property
  def detail_albedo(self)->__texture2d__.Texture2D: pass
  @detail_albedo.setter
  def detail_albedo(self,  value:__texture2d__.Texture2D)->None: pass
  @property
  def detail_normal(self)->__texture2d__.Texture2D: pass
  @detail_normal.setter
  def detail_normal(self,  value:__texture2d__.Texture2D)->None: pass
  @property
  def uv1_scale(self)->__core__.Vector3: pass
  @uv1_scale.setter
  def uv1_scale(self,  value:__core__.Vector3)->None: pass
  @property
  def uv1_offset(self)->__core__.Vector3: pass
  @uv1_offset.setter
  def uv1_offset(self,  value:__core__.Vector3)->None: pass
  @property
  def uv1_triplanar(self)->bool: pass
  @uv1_triplanar.setter
  def uv1_triplanar(self,  value:bool)->None: pass
  @property
  def uv1_triplanar_sharpness(self)->float: pass
  @uv1_triplanar_sharpness.setter
  def uv1_triplanar_sharpness(self,  value:float)->None: pass
  @property
  def uv1_world_triplanar(self)->bool: pass
  @uv1_world_triplanar.setter
  def uv1_world_triplanar(self,  value:bool)->None: pass
  @property
  def uv2_scale(self)->__core__.Vector3: pass
  @uv2_scale.setter
  def uv2_scale(self,  value:__core__.Vector3)->None: pass
  @property
  def uv2_offset(self)->__core__.Vector3: pass
  @uv2_offset.setter
  def uv2_offset(self,  value:__core__.Vector3)->None: pass
  @property
  def uv2_triplanar(self)->bool: pass
  @uv2_triplanar.setter
  def uv2_triplanar(self,  value:bool)->None: pass
  @property
  def uv2_triplanar_sharpness(self)->float: pass
  @uv2_triplanar_sharpness.setter
  def uv2_triplanar_sharpness(self,  value:float)->None: pass
  @property
  def uv2_world_triplanar(self)->bool: pass
  @uv2_world_triplanar.setter
  def uv2_world_triplanar(self,  value:bool)->None: pass
  @property
  def texture_filter(self)->int: pass
  @texture_filter.setter
  def texture_filter(self,  value:int)->None: pass
  @property
  def texture_repeat(self)->bool: pass
  @texture_repeat.setter
  def texture_repeat(self,  value:bool)->None: pass
  @property
  def disable_receive_shadows(self)->bool: pass
  @disable_receive_shadows.setter
  def disable_receive_shadows(self,  value:bool)->None: pass
  @property
  def shadow_to_opacity(self)->bool: pass
  @shadow_to_opacity.setter
  def shadow_to_opacity(self,  value:bool)->None: pass
  @property
  def billboard_mode(self)->int: pass
  @billboard_mode.setter
  def billboard_mode(self,  value:int)->None: pass
  @property
  def billboard_keep_scale(self)->bool: pass
  @billboard_keep_scale.setter
  def billboard_keep_scale(self,  value:bool)->None: pass
  @property
  def particles_anim_h_frames(self)->int: pass
  @particles_anim_h_frames.setter
  def particles_anim_h_frames(self,  value:int)->None: pass
  @property
  def particles_anim_v_frames(self)->int: pass
  @particles_anim_v_frames.setter
  def particles_anim_v_frames(self,  value:int)->None: pass
  @property
  def particles_anim_loop(self)->bool: pass
  @particles_anim_loop.setter
  def particles_anim_loop(self,  value:bool)->None: pass
  @property
  def grow(self)->bool: pass
  @grow.setter
  def grow(self,  value:bool)->None: pass
  @property
  def grow_amount(self)->float: pass
  @grow_amount.setter
  def grow_amount(self,  value:float)->None: pass
  @property
  def fixed_size(self)->bool: pass
  @fixed_size.setter
  def fixed_size(self,  value:bool)->None: pass
  @property
  def use_point_size(self)->bool: pass
  @use_point_size.setter
  def use_point_size(self,  value:bool)->None: pass
  @property
  def point_size(self)->float: pass
  @point_size.setter
  def point_size(self,  value:float)->None: pass
  @property
  def use_particle_trails(self)->bool: pass
  @use_particle_trails.setter
  def use_particle_trails(self,  value:bool)->None: pass
  @property
  def proximity_fade_enabled(self)->bool: pass
  @proximity_fade_enabled.setter
  def proximity_fade_enabled(self,  value:bool)->None: pass
  @property
  def proximity_fade_distance(self)->float: pass
  @proximity_fade_distance.setter
  def proximity_fade_distance(self,  value:float)->None: pass
  @property
  def msdf_pixel_range(self)->float: pass
  @msdf_pixel_range.setter
  def msdf_pixel_range(self,  value:float)->None: pass
  @property
  def msdf_outline_size(self)->float: pass
  @msdf_outline_size.setter
  def msdf_outline_size(self,  value:float)->None: pass
  @property
  def distance_fade_mode(self)->int: pass
  @distance_fade_mode.setter
  def distance_fade_mode(self,  value:int)->None: pass
  @property
  def distance_fade_min_distance(self)->float: pass
  @distance_fade_min_distance.setter
  def distance_fade_min_distance(self,  value:float)->None: pass
  @property
  def distance_fade_max_distance(self)->float: pass
  @distance_fade_max_distance.setter
  def distance_fade_max_distance(self,  value:float)->None: pass
  def set_albedo(self, albedo:__core__.Color)->None: pass

  def get_albedo(self)->__core__.Color: pass

  def set_transparency(self, transparency:int )->None: pass

  def get_transparency(self)->int: pass

  def set_alpha_antialiasing(self, alpha_aa:int )->None: pass

  def get_alpha_antialiasing(self)->int: pass

  def set_alpha_antialiasing_edge(self, edge:float)->None: pass

  def get_alpha_antialiasing_edge(self)->float: pass

  def set_shading_mode(self, shading_mode:int )->None: pass

  def get_shading_mode(self)->int: pass

  def set_specular(self, specular:float)->None: pass

  def get_specular(self)->float: pass

  def set_metallic(self, metallic:float)->None: pass

  def get_metallic(self)->float: pass

  def set_roughness(self, roughness:float)->None: pass

  def get_roughness(self)->float: pass

  def set_emission(self, emission:__core__.Color)->None: pass

  def get_emission(self)->__core__.Color: pass

  def set_emission_energy_multiplier(self, emission_energy_multiplier:float)->None: pass

  def get_emission_energy_multiplier(self)->float: pass

  def set_emission_intensity(self, emission_energy_multiplier:float)->None: pass

  def get_emission_intensity(self)->float: pass

  def set_normal_scale(self, normal_scale:float)->None: pass

  def get_normal_scale(self)->float: pass

  def set_rim(self, rim:float)->None: pass

  def get_rim(self)->float: pass

  def set_rim_tint(self, rim_tint:float)->None: pass

  def get_rim_tint(self)->float: pass

  def set_clearcoat(self, clearcoat:float)->None: pass

  def get_clearcoat(self)->float: pass

  def set_clearcoat_roughness(self, clearcoat_roughness:float)->None: pass

  def get_clearcoat_roughness(self)->float: pass

  def set_anisotropy(self, anisotropy:float)->None: pass

  def get_anisotropy(self)->float: pass

  def set_heightmap_scale(self, heightmap_scale:float)->None: pass

  def get_heightmap_scale(self)->float: pass

  def set_subsurface_scattering_strength(self, strength:float)->None: pass

  def get_subsurface_scattering_strength(self)->float: pass

  def set_transmittance_color(self, color:__core__.Color)->None: pass

  def get_transmittance_color(self)->__core__.Color: pass

  def set_transmittance_depth(self, depth:float)->None: pass

  def get_transmittance_depth(self)->float: pass

  def set_transmittance_boost(self, boost:float)->None: pass

  def get_transmittance_boost(self)->float: pass

  def set_backlight(self, backlight:__core__.Color)->None: pass

  def get_backlight(self)->__core__.Color: pass

  def set_refraction(self, refraction:float)->None: pass

  def get_refraction(self)->float: pass

  def set_point_size(self, point_size:float)->None: pass

  def get_point_size(self)->float: pass

  def set_detail_uv(self, detail_uv:int )->None: pass

  def get_detail_uv(self)->int: pass

  def set_blend_mode(self, blend_mode:int )->None: pass

  def get_blend_mode(self)->int: pass

  def set_depth_draw_mode(self, depth_draw_mode:int )->None: pass

  def get_depth_draw_mode(self)->int: pass

  def set_cull_mode(self, cull_mode:int )->None: pass

  def get_cull_mode(self)->int: pass

  def set_diffuse_mode(self, diffuse_mode:int )->None: pass

  def get_diffuse_mode(self)->int: pass

  def set_specular_mode(self, specular_mode:int )->None: pass

  def get_specular_mode(self)->int: pass

  def set_flag(self, flag:int , enable:bool)->None: pass

  def get_flag(self, flag:int )->bool: pass

  def set_texture_filter(self, mode:int )->None: pass

  def get_texture_filter(self)->int: pass

  def set_feature(self, feature:int , enable:bool)->None: pass

  def get_feature(self, feature:int )->bool: pass

  def set_texture(self, param:int , texture:__texture2d__.Texture2D)->None: pass

  def get_texture(self, param:int )->__texture2d__.Texture2D: pass

  def set_detail_blend_mode(self, detail_blend_mode:int )->None: pass

  def get_detail_blend_mode(self)->int: pass

  def set_uv1_scale(self, scale:__core__.Vector3)->None: pass

  def get_uv1_scale(self)->__core__.Vector3: pass

  def set_uv1_offset(self, offset:__core__.Vector3)->None: pass

  def get_uv1_offset(self)->__core__.Vector3: pass

  def set_uv1_triplanar_blend_sharpness(self, sharpness:float)->None: pass

  def get_uv1_triplanar_blend_sharpness(self)->float: pass

  def set_uv2_scale(self, scale:__core__.Vector3)->None: pass

  def get_uv2_scale(self)->__core__.Vector3: pass

  def set_uv2_offset(self, offset:__core__.Vector3)->None: pass

  def get_uv2_offset(self)->__core__.Vector3: pass

  def set_uv2_triplanar_blend_sharpness(self, sharpness:float)->None: pass

  def get_uv2_triplanar_blend_sharpness(self)->float: pass

  def set_billboard_mode(self, mode:int )->None: pass

  def get_billboard_mode(self)->int: pass

  def set_particles_anim_h_frames(self, frames:int)->None: pass

  def get_particles_anim_h_frames(self)->int: pass

  def set_particles_anim_v_frames(self, frames:int)->None: pass

  def get_particles_anim_v_frames(self)->int: pass

  def set_particles_anim_loop(self, loop:bool)->None: pass

  def get_particles_anim_loop(self)->bool: pass

  def set_heightmap_deep_parallax(self, enable:bool)->None: pass

  def is_heightmap_deep_parallax_enabled(self)->bool: pass

  def set_heightmap_deep_parallax_min_layers(self, layer:int)->None: pass

  def get_heightmap_deep_parallax_min_layers(self)->int: pass

  def set_heightmap_deep_parallax_max_layers(self, layer:int)->None: pass

  def get_heightmap_deep_parallax_max_layers(self)->int: pass

  def set_heightmap_deep_parallax_flip_tangent(self, flip:bool)->None: pass

  def get_heightmap_deep_parallax_flip_tangent(self)->bool: pass

  def set_heightmap_deep_parallax_flip_binormal(self, flip:bool)->None: pass

  def get_heightmap_deep_parallax_flip_binormal(self)->bool: pass

  def set_grow(self, amount:float)->None: pass

  def get_grow(self)->float: pass

  def set_emission_operator(self, operator:int )->None: pass

  def get_emission_operator(self)->int: pass

  def set_ao_light_affect(self, amount:float)->None: pass

  def get_ao_light_affect(self)->float: pass

  def set_alpha_scissor_threshold(self, threshold:float)->None: pass

  def get_alpha_scissor_threshold(self)->float: pass

  def set_alpha_hash_scale(self, threshold:float)->None: pass

  def get_alpha_hash_scale(self)->float: pass

  def set_grow_enabled(self, enable:bool)->None: pass

  def is_grow_enabled(self)->bool: pass

  def set_metallic_texture_channel(self, channel:int )->None: pass

  def get_metallic_texture_channel(self)->int: pass

  def set_roughness_texture_channel(self, channel:int )->None: pass

  def get_roughness_texture_channel(self)->int: pass

  def set_ao_texture_channel(self, channel:int )->None: pass

  def get_ao_texture_channel(self)->int: pass

  def set_refraction_texture_channel(self, channel:int )->None: pass

  def get_refraction_texture_channel(self)->int: pass

  def set_proximity_fade_enabled(self, enabled:bool)->None: pass

  def is_proximity_fade_enabled(self)->bool: pass

  def set_proximity_fade_distance(self, distance:float)->None: pass

  def get_proximity_fade_distance(self)->float: pass

  def set_msdf_pixel_range(self, range:float)->None: pass

  def get_msdf_pixel_range(self)->float: pass

  def set_msdf_outline_size(self, size:float)->None: pass

  def get_msdf_outline_size(self)->float: pass

  def set_distance_fade(self, mode:int )->None: pass

  def get_distance_fade(self)->int: pass

  def set_distance_fade_max_distance(self, distance:float)->None: pass

  def get_distance_fade_max_distance(self)->float: pass

  def set_distance_fade_min_distance(self, distance:float)->None: pass

  def get_distance_fade_min_distance(self)->float: pass


