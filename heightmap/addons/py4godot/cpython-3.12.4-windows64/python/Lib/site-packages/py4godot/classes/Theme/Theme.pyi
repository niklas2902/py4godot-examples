from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Theme.Theme as __theme__
import py4godot.classes.Resource.Resource as __resource__
import py4godot.classes.Font.Font as __font__
import py4godot.classes.StyleBox.StyleBox as __stylebox__
import py4godot.classes.Texture2D.Texture2D as __texture2d__


class Theme(__resource__.Resource):

  @staticmethod
  def constructor()->Theme:pass



  @staticmethod
  def cast(other:__object__.Object)->Theme:pass


  @property
  def default_base_scale(self)->float: pass
  @default_base_scale.setter
  def default_base_scale(self,  value:float)->None: pass
  @property
  def default_font(self)->__font__.Font: pass
  @default_font.setter
  def default_font(self,  value:__font__.Font)->None: pass
  @property
  def default_font_size(self)->int: pass
  @default_font_size.setter
  def default_font_size(self,  value:int)->None: pass
  def set_icon(self, name:__core__.StringName, theme_type:__core__.StringName, texture:__texture2d__.Texture2D)->None: pass

  def get_icon(self, name:__core__.StringName, theme_type:__core__.StringName)->__texture2d__.Texture2D: pass

  def has_icon(self, name:__core__.StringName, theme_type:__core__.StringName)->bool: pass

  def rename_icon(self, old_name:__core__.StringName, name:__core__.StringName, theme_type:__core__.StringName)->None: pass

  def clear_icon(self, name:__core__.StringName, theme_type:__core__.StringName)->None: pass

  def get_icon_list(self, theme_type:str)->__core__.PackedStringArray: pass

  def get_icon_type_list(self)->__core__.PackedStringArray: pass

  def set_stylebox(self, name:__core__.StringName, theme_type:__core__.StringName, texture:__stylebox__.StyleBox)->None: pass

  def get_stylebox(self, name:__core__.StringName, theme_type:__core__.StringName)->__stylebox__.StyleBox: pass

  def has_stylebox(self, name:__core__.StringName, theme_type:__core__.StringName)->bool: pass

  def rename_stylebox(self, old_name:__core__.StringName, name:__core__.StringName, theme_type:__core__.StringName)->None: pass

  def clear_stylebox(self, name:__core__.StringName, theme_type:__core__.StringName)->None: pass

  def get_stylebox_list(self, theme_type:str)->__core__.PackedStringArray: pass

  def get_stylebox_type_list(self)->__core__.PackedStringArray: pass

  def set_font(self, name:__core__.StringName, theme_type:__core__.StringName, font:__font__.Font)->None: pass

  def get_font(self, name:__core__.StringName, theme_type:__core__.StringName)->__font__.Font: pass

  def has_font(self, name:__core__.StringName, theme_type:__core__.StringName)->bool: pass

  def rename_font(self, old_name:__core__.StringName, name:__core__.StringName, theme_type:__core__.StringName)->None: pass

  def clear_font(self, name:__core__.StringName, theme_type:__core__.StringName)->None: pass

  def get_font_list(self, theme_type:str)->__core__.PackedStringArray: pass

  def get_font_type_list(self)->__core__.PackedStringArray: pass

  def set_font_size(self, name:__core__.StringName, theme_type:__core__.StringName, font_size:int)->None: pass

  def get_font_size(self, name:__core__.StringName, theme_type:__core__.StringName)->int: pass

  def has_font_size(self, name:__core__.StringName, theme_type:__core__.StringName)->bool: pass

  def rename_font_size(self, old_name:__core__.StringName, name:__core__.StringName, theme_type:__core__.StringName)->None: pass

  def clear_font_size(self, name:__core__.StringName, theme_type:__core__.StringName)->None: pass

  def get_font_size_list(self, theme_type:str)->__core__.PackedStringArray: pass

  def get_font_size_type_list(self)->__core__.PackedStringArray: pass

  def set_color(self, name:__core__.StringName, theme_type:__core__.StringName, color:__core__.Color)->None: pass

  def get_color(self, name:__core__.StringName, theme_type:__core__.StringName)->__core__.Color: pass

  def has_color(self, name:__core__.StringName, theme_type:__core__.StringName)->bool: pass

  def rename_color(self, old_name:__core__.StringName, name:__core__.StringName, theme_type:__core__.StringName)->None: pass

  def clear_color(self, name:__core__.StringName, theme_type:__core__.StringName)->None: pass

  def get_color_list(self, theme_type:str)->__core__.PackedStringArray: pass

  def get_color_type_list(self)->__core__.PackedStringArray: pass

  def set_constant(self, name:__core__.StringName, theme_type:__core__.StringName, constant:int)->None: pass

  def get_constant(self, name:__core__.StringName, theme_type:__core__.StringName)->int: pass

  def has_constant(self, name:__core__.StringName, theme_type:__core__.StringName)->bool: pass

  def rename_constant(self, old_name:__core__.StringName, name:__core__.StringName, theme_type:__core__.StringName)->None: pass

  def clear_constant(self, name:__core__.StringName, theme_type:__core__.StringName)->None: pass

  def get_constant_list(self, theme_type:str)->__core__.PackedStringArray: pass

  def get_constant_type_list(self)->__core__.PackedStringArray: pass

  def set_default_base_scale(self, base_scale:float)->None: pass

  def get_default_base_scale(self)->float: pass

  def has_default_base_scale(self)->bool: pass

  def set_default_font(self, font:__font__.Font)->None: pass

  def get_default_font(self)->__font__.Font: pass

  def has_default_font(self)->bool: pass

  def set_default_font_size(self, font_size:int)->None: pass

  def get_default_font_size(self)->int: pass

  def has_default_font_size(self)->bool: pass

  def set_theme_item(self, data_type:int , name:__core__.StringName, theme_type:__core__.StringName, value:object)->None: pass

  def get_theme_item(self, data_type:int , name:__core__.StringName, theme_type:__core__.StringName)->object: pass

  def has_theme_item(self, data_type:int , name:__core__.StringName, theme_type:__core__.StringName)->bool: pass

  def rename_theme_item(self, data_type:int , old_name:__core__.StringName, name:__core__.StringName, theme_type:__core__.StringName)->None: pass

  def clear_theme_item(self, data_type:int , name:__core__.StringName, theme_type:__core__.StringName)->None: pass

  def get_theme_item_list(self, data_type:int , theme_type:str)->__core__.PackedStringArray: pass

  def get_theme_item_type_list(self, data_type:int )->__core__.PackedStringArray: pass

  def set_type_variation(self, theme_type:__core__.StringName, base_type:__core__.StringName)->None: pass

  def is_type_variation(self, theme_type:__core__.StringName, base_type:__core__.StringName)->bool: pass

  def clear_type_variation(self, theme_type:__core__.StringName)->None: pass

  def get_type_variation_base(self, theme_type:__core__.StringName)->__core__.StringName: pass

  def get_type_variation_list(self, base_type:__core__.StringName)->__core__.PackedStringArray: pass

  def add_type(self, theme_type:__core__.StringName)->None: pass

  def remove_type(self, theme_type:__core__.StringName)->None: pass

  def get_type_list(self)->__core__.PackedStringArray: pass

  def merge_with(self, other:__theme__.Theme)->None: pass

  def clear(self)->None: pass


