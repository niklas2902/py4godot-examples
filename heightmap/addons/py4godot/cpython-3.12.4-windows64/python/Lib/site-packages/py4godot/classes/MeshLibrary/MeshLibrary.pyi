from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Texture2D.Texture2D as __texture2d__
import py4godot.classes.Mesh.Mesh as __mesh__
import py4godot.classes.Resource.Resource as __resource__
import py4godot.classes.NavigationMesh.NavigationMesh as __navigationmesh__


class MeshLibrary(__resource__.Resource):

  @staticmethod
  def constructor()->MeshLibrary:pass



  @staticmethod
  def cast(other:__object__.Object)->MeshLibrary:pass


  def create_item(self, id:int)->None: pass

  def set_item_name(self, id:int, name:str)->None: pass

  def set_item_mesh(self, id:int, mesh:__mesh__.Mesh)->None: pass

  def set_item_mesh_transform(self, id:int, mesh_transform:__core__.Transform3D)->None: pass

  def set_item_navigation_mesh(self, id:int, navigation_mesh:__navigationmesh__.NavigationMesh)->None: pass

  def set_item_navigation_mesh_transform(self, id:int, navigation_mesh:__core__.Transform3D)->None: pass

  def set_item_navigation_layers(self, id:int, navigation_layers:int)->None: pass

  def set_item_shapes(self, id:int, shapes:__core__.Array)->None: pass

  def set_item_preview(self, id:int, texture:__texture2d__.Texture2D)->None: pass

  def get_item_name(self, id:int)->str: pass

  def get_item_mesh(self, id:int)->__mesh__.Mesh: pass

  def get_item_mesh_transform(self, id:int)->__core__.Transform3D: pass

  def get_item_navigation_mesh(self, id:int)->__navigationmesh__.NavigationMesh: pass

  def get_item_navigation_mesh_transform(self, id:int)->__core__.Transform3D: pass

  def get_item_navigation_layers(self, id:int)->int: pass

  def get_item_shapes(self, id:int)->__core__.Array: pass

  def get_item_preview(self, id:int)->__texture2d__.Texture2D: pass

  def remove_item(self, id:int)->None: pass

  def find_item_by_name(self, name:str)->int: pass

  def clear(self)->None: pass

  def get_item_list(self)->__core__.PackedInt32Array: pass

  def get_last_unused_item_id(self)->int: pass


