from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Viewport.Viewport as __viewport__
import py4godot.classes.Node.Node as __node__
import py4godot.classes.Theme.Theme as __theme__
import py4godot.classes.Font.Font as __font__
import py4godot.classes.Window.Window as __window__
import py4godot.classes.StyleBox.StyleBox as __stylebox__
import py4godot.classes.Texture2D.Texture2D as __texture2d__


class Window(__viewport__.Viewport):
  window_input: BuiltinSignal
  files_dropped: BuiltinSignal
  mouse_entered: BuiltinSignal
  mouse_exited: BuiltinSignal
  focus_entered: BuiltinSignal
  focus_exited: BuiltinSignal
  close_requested: BuiltinSignal
  go_back_requested: BuiltinSignal
  visibility_changed: BuiltinSignal
  about_to_popup: BuiltinSignal
  theme_changed: BuiltinSignal
  dpi_changed: BuiltinSignal
  titlebar_changed: BuiltinSignal

  @staticmethod
  def constructor()->Window:pass



  @staticmethod
  def cast(other:__object__.Object)->Window:pass


  @property
  def mode(self)->int: pass
  @mode.setter
  def mode(self,  value:int)->None: pass
  @property
  def title(self)->str: pass
  @title.setter
  def title(self,  value:str)->None: pass
  @property
  def initial_position(self)->int: pass
  @initial_position.setter
  def initial_position(self,  value:int)->None: pass
  @property
  def position(self)->__core__.Vector2i: pass
  @position.setter
  def position(self,  value:__core__.Vector2i)->None: pass
  @property
  def size(self)->__core__.Vector2i: pass
  @size.setter
  def size(self,  value:__core__.Vector2i)->None: pass
  @property
  def current_screen(self)->int: pass
  @current_screen.setter
  def current_screen(self,  value:int)->None: pass
  @property
  def mouse_passthrough_polygon(self)->__core__.PackedVector2Array: pass
  @mouse_passthrough_polygon.setter
  def mouse_passthrough_polygon(self,  value:__core__.PackedVector2Array)->None: pass
  @property
  def visible(self)->bool: pass
  @visible.setter
  def visible(self,  value:bool)->None: pass
  @property
  def wrap_controls(self)->bool: pass
  @wrap_controls.setter
  def wrap_controls(self,  value:bool)->None: pass
  @property
  def transient(self)->bool: pass
  @transient.setter
  def transient(self,  value:bool)->None: pass
  @property
  def transient_to_focused(self)->bool: pass
  @transient_to_focused.setter
  def transient_to_focused(self,  value:bool)->None: pass
  @property
  def exclusive(self)->bool: pass
  @exclusive.setter
  def exclusive(self,  value:bool)->None: pass
  @property
  def unresizable(self)->bool: pass
  @unresizable.setter
  def unresizable(self,  value:bool)->None: pass
  @property
  def borderless(self)->bool: pass
  @borderless.setter
  def borderless(self,  value:bool)->None: pass
  @property
  def always_on_top(self)->bool: pass
  @always_on_top.setter
  def always_on_top(self,  value:bool)->None: pass
  @property
  def transparent(self)->bool: pass
  @transparent.setter
  def transparent(self,  value:bool)->None: pass
  @property
  def unfocusable(self)->bool: pass
  @unfocusable.setter
  def unfocusable(self,  value:bool)->None: pass
  @property
  def popup_window(self)->bool: pass
  @popup_window.setter
  def popup_window(self,  value:bool)->None: pass
  @property
  def extend_to_title(self)->bool: pass
  @extend_to_title.setter
  def extend_to_title(self,  value:bool)->None: pass
  @property
  def mouse_passthrough(self)->bool: pass
  @mouse_passthrough.setter
  def mouse_passthrough(self,  value:bool)->None: pass
  @property
  def force_native(self)->bool: pass
  @force_native.setter
  def force_native(self,  value:bool)->None: pass
  @property
  def min_size(self)->__core__.Vector2i: pass
  @min_size.setter
  def min_size(self,  value:__core__.Vector2i)->None: pass
  @property
  def max_size(self)->__core__.Vector2i: pass
  @max_size.setter
  def max_size(self,  value:__core__.Vector2i)->None: pass
  @property
  def keep_title_visible(self)->bool: pass
  @keep_title_visible.setter
  def keep_title_visible(self,  value:bool)->None: pass
  @property
  def content_scale_size(self)->__core__.Vector2i: pass
  @content_scale_size.setter
  def content_scale_size(self,  value:__core__.Vector2i)->None: pass
  @property
  def content_scale_mode(self)->int: pass
  @content_scale_mode.setter
  def content_scale_mode(self,  value:int)->None: pass
  @property
  def content_scale_aspect(self)->int: pass
  @content_scale_aspect.setter
  def content_scale_aspect(self,  value:int)->None: pass
  @property
  def content_scale_stretch(self)->int: pass
  @content_scale_stretch.setter
  def content_scale_stretch(self,  value:int)->None: pass
  @property
  def content_scale_factor(self)->float: pass
  @content_scale_factor.setter
  def content_scale_factor(self,  value:float)->None: pass
  @property
  def auto_translate(self)->bool: pass
  @auto_translate.setter
  def auto_translate(self,  value:bool)->None: pass
  @property
  def theme(self)->__theme__.Theme: pass
  @theme.setter
  def theme(self,  value:__theme__.Theme)->None: pass
  @property
  def theme_type_variation(self)->str: pass
  @theme_type_variation.setter
  def theme_type_variation(self,  value:str)->None: pass
  def _get_contents_minimum_size(self)->__core__.Vector2: pass

  def set_title(self, title:str)->None: pass

  def get_title(self)->str: pass

  def get_window_id(self)->int: pass

  def set_initial_position(self, initial_position:int )->None: pass

  def get_initial_position(self)->int: pass

  def set_current_screen(self, index:int)->None: pass

  def get_current_screen(self)->int: pass

  def set_position(self, position:__core__.Vector2i)->None: pass

  def get_position(self)->__core__.Vector2i: pass

  def move_to_center(self)->None: pass

  def set_size(self, size:__core__.Vector2i)->None: pass

  def get_size(self)->__core__.Vector2i: pass

  def reset_size(self)->None: pass

  def get_position_with_decorations(self)->__core__.Vector2i: pass

  def get_size_with_decorations(self)->__core__.Vector2i: pass

  def set_max_size(self, max_size:__core__.Vector2i)->None: pass

  def get_max_size(self)->__core__.Vector2i: pass

  def set_min_size(self, min_size:__core__.Vector2i)->None: pass

  def get_min_size(self)->__core__.Vector2i: pass

  def set_mode(self, mode:int )->None: pass

  def get_mode(self)->int: pass

  def set_flag(self, flag:int , enabled:bool)->None: pass

  def get_flag(self, flag:int )->bool: pass

  def is_maximize_allowed(self)->bool: pass

  def request_attention(self)->None: pass

  def move_to_foreground(self)->None: pass

  def set_visible(self, visible:bool)->None: pass

  def is_visible(self)->bool: pass

  def hide(self)->None: pass

  def show(self)->None: pass

  def set_transient(self, transient:bool)->None: pass

  def is_transient(self)->bool: pass

  def set_transient_to_focused(self, enable:bool)->None: pass

  def is_transient_to_focused(self)->bool: pass

  def set_exclusive(self, exclusive:bool)->None: pass

  def is_exclusive(self)->bool: pass

  def set_unparent_when_invisible(self, unparent:bool)->None: pass

  def can_draw(self)->bool: pass

  def has_focus(self)->bool: pass

  def grab_focus(self)->None: pass

  def set_ime_active(self, active:bool)->None: pass

  def set_ime_position(self, position:__core__.Vector2i)->None: pass

  def is_embedded(self)->bool: pass

  def get_contents_minimum_size(self)->__core__.Vector2: pass

  def set_force_native(self, force_native:bool)->None: pass

  def get_force_native(self)->bool: pass

  def set_content_scale_size(self, size:__core__.Vector2i)->None: pass

  def get_content_scale_size(self)->__core__.Vector2i: pass

  def set_content_scale_mode(self, mode:int )->None: pass

  def get_content_scale_mode(self)->int: pass

  def set_content_scale_aspect(self, aspect:int )->None: pass

  def get_content_scale_aspect(self)->int: pass

  def set_content_scale_stretch(self, stretch:int )->None: pass

  def get_content_scale_stretch(self)->int: pass

  def set_keep_title_visible(self, title_visible:bool)->None: pass

  def get_keep_title_visible(self)->bool: pass

  def set_content_scale_factor(self, factor:float)->None: pass

  def get_content_scale_factor(self)->float: pass

  def set_use_font_oversampling(self, enable:bool)->None: pass

  def is_using_font_oversampling(self)->bool: pass

  def set_mouse_passthrough_polygon(self, polygon:__core__.PackedVector2Array)->None: pass

  def get_mouse_passthrough_polygon(self)->__core__.PackedVector2Array: pass

  def set_wrap_controls(self, enable:bool)->None: pass

  def is_wrapping_controls(self)->bool: pass

  def child_controls_changed(self)->None: pass

  def set_theme(self, theme:__theme__.Theme)->None: pass

  def get_theme(self)->__theme__.Theme: pass

  def set_theme_type_variation(self, theme_type:__core__.StringName)->None: pass

  def get_theme_type_variation(self)->__core__.StringName: pass

  def begin_bulk_theme_override(self)->None: pass

  def end_bulk_theme_override(self)->None: pass

  def add_theme_icon_override(self, name:__core__.StringName, texture:__texture2d__.Texture2D)->None: pass

  def add_theme_stylebox_override(self, name:__core__.StringName, stylebox:__stylebox__.StyleBox)->None: pass

  def add_theme_font_override(self, name:__core__.StringName, font:__font__.Font)->None: pass

  def add_theme_font_size_override(self, name:__core__.StringName, font_size:int)->None: pass

  def add_theme_color_override(self, name:__core__.StringName, color:__core__.Color)->None: pass

  def add_theme_constant_override(self, name:__core__.StringName, constant:int)->None: pass

  def remove_theme_icon_override(self, name:__core__.StringName)->None: pass

  def remove_theme_stylebox_override(self, name:__core__.StringName)->None: pass

  def remove_theme_font_override(self, name:__core__.StringName)->None: pass

  def remove_theme_font_size_override(self, name:__core__.StringName)->None: pass

  def remove_theme_color_override(self, name:__core__.StringName)->None: pass

  def remove_theme_constant_override(self, name:__core__.StringName)->None: pass

  def get_theme_icon(self, name:__core__.StringName, theme_type:__core__.StringName= __core__.StringName.new0())->__texture2d__.Texture2D: pass

  def get_theme_stylebox(self, name:__core__.StringName, theme_type:__core__.StringName= __core__.StringName.new0())->__stylebox__.StyleBox: pass

  def get_theme_font(self, name:__core__.StringName, theme_type:__core__.StringName= __core__.StringName.new0())->__font__.Font: pass

  def get_theme_font_size(self, name:__core__.StringName, theme_type:__core__.StringName= __core__.StringName.new0())->int: pass

  def get_theme_color(self, name:__core__.StringName, theme_type:__core__.StringName= __core__.StringName.new0())->__core__.Color: pass

  def get_theme_constant(self, name:__core__.StringName, theme_type:__core__.StringName= __core__.StringName.new0())->int: pass

  def has_theme_icon_override(self, name:__core__.StringName)->bool: pass

  def has_theme_stylebox_override(self, name:__core__.StringName)->bool: pass

  def has_theme_font_override(self, name:__core__.StringName)->bool: pass

  def has_theme_font_size_override(self, name:__core__.StringName)->bool: pass

  def has_theme_color_override(self, name:__core__.StringName)->bool: pass

  def has_theme_constant_override(self, name:__core__.StringName)->bool: pass

  def has_theme_icon(self, name:__core__.StringName, theme_type:__core__.StringName= __core__.StringName.new0())->bool: pass

  def has_theme_stylebox(self, name:__core__.StringName, theme_type:__core__.StringName= __core__.StringName.new0())->bool: pass

  def has_theme_font(self, name:__core__.StringName, theme_type:__core__.StringName= __core__.StringName.new0())->bool: pass

  def has_theme_font_size(self, name:__core__.StringName, theme_type:__core__.StringName= __core__.StringName.new0())->bool: pass

  def has_theme_color(self, name:__core__.StringName, theme_type:__core__.StringName= __core__.StringName.new0())->bool: pass

  def has_theme_constant(self, name:__core__.StringName, theme_type:__core__.StringName= __core__.StringName.new0())->bool: pass

  def get_theme_default_base_scale(self)->float: pass

  def get_theme_default_font(self)->__font__.Font: pass

  def get_theme_default_font_size(self)->int: pass

  def set_layout_direction(self, direction:int )->None: pass

  def get_layout_direction(self)->int: pass

  def is_layout_rtl(self)->bool: pass

  def set_auto_translate(self, enable:bool)->None: pass

  def is_auto_translating(self)->bool: pass

  def popup(self, rect:__core__.Rect2i= __core__.Rect2i.new0())->None: pass

  def popup_on_parent(self, parent_rect:__core__.Rect2i)->None: pass

  def popup_centered(self, minsize:__core__.Vector2i= __core__.Vector2i.new0())->None: pass

  def popup_centered_ratio(self, ratio:float=0.8)->None: pass

  def popup_centered_clamped(self, minsize:__core__.Vector2i= __core__.Vector2i.new0(), fallback_ratio:float=0.75)->None: pass

  def popup_exclusive(self, from_node:__node__.Node, rect:__core__.Rect2i= __core__.Rect2i.new0())->None: pass

  def popup_exclusive_on_parent(self, from_node:__node__.Node, parent_rect:__core__.Rect2i)->None: pass

  def popup_exclusive_centered(self, from_node:__node__.Node, minsize:__core__.Vector2i= __core__.Vector2i.new0())->None: pass

  def popup_exclusive_centered_ratio(self, from_node:__node__.Node, ratio:float=0.8)->None: pass

  def popup_exclusive_centered_clamped(self, from_node:__node__.Node, minsize:__core__.Vector2i= __core__.Vector2i.new0(), fallback_ratio:float=0.75)->None: pass


