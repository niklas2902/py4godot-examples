from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.GPUParticlesCollision3D.GPUParticlesCollision3D as __gpuparticlescollision3d__
import py4godot.classes.GPUParticlesCollisionHeightField3D.GPUParticlesCollisionHeightField3D as __gpuparticlescollisionheightfield3d__


class GPUParticlesCollisionHeightField3D(__gpuparticlescollision3d__.GPUParticlesCollision3D):

  @staticmethod
  def constructor()->GPUParticlesCollisionHeightField3D:pass



  @staticmethod
  def cast(other:__object__.Object)->GPUParticlesCollisionHeightField3D:pass


  @property
  def size(self)->__core__.Vector3: pass
  @size.setter
  def size(self,  value:__core__.Vector3)->None: pass
  @property
  def resolution(self)->int: pass
  @resolution.setter
  def resolution(self,  value:int)->None: pass
  @property
  def update_mode(self)->int: pass
  @update_mode.setter
  def update_mode(self,  value:int)->None: pass
  @property
  def follow_camera_enabled(self)->bool: pass
  @follow_camera_enabled.setter
  def follow_camera_enabled(self,  value:bool)->None: pass
  def set_size(self, size:__core__.Vector3)->None: pass

  def get_size(self)->__core__.Vector3: pass

  def set_resolution(self, resolution:int )->None: pass

  def get_resolution(self)->int: pass

  def set_update_mode(self, update_mode:int )->None: pass

  def get_update_mode(self)->int: pass

  def set_follow_camera_enabled(self, enabled:bool)->None: pass

  def is_follow_camera_enabled(self)->bool: pass


