from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.StyleBox.StyleBox as __stylebox__
import py4godot.classes.StyleBoxTexture.StyleBoxTexture as __styleboxtexture__
import py4godot.classes.Texture2D.Texture2D as __texture2d__


class StyleBoxTexture(__stylebox__.StyleBox):

  @staticmethod
  def constructor()->StyleBoxTexture:pass



  @staticmethod
  def cast(other:__object__.Object)->StyleBoxTexture:pass


  @property
  def texture(self)->__texture2d__.Texture2D: pass
  @texture.setter
  def texture(self,  value:__texture2d__.Texture2D)->None: pass
  @property
  def texture_margin_left(self)->float: pass
  @texture_margin_left.setter
  def texture_margin_left(self,  value:float)->None: pass
  @property
  def texture_margin_top(self)->float: pass
  @texture_margin_top.setter
  def texture_margin_top(self,  value:float)->None: pass
  @property
  def texture_margin_right(self)->float: pass
  @texture_margin_right.setter
  def texture_margin_right(self,  value:float)->None: pass
  @property
  def texture_margin_bottom(self)->float: pass
  @texture_margin_bottom.setter
  def texture_margin_bottom(self,  value:float)->None: pass
  @property
  def expand_margin_left(self)->float: pass
  @expand_margin_left.setter
  def expand_margin_left(self,  value:float)->None: pass
  @property
  def expand_margin_top(self)->float: pass
  @expand_margin_top.setter
  def expand_margin_top(self,  value:float)->None: pass
  @property
  def expand_margin_right(self)->float: pass
  @expand_margin_right.setter
  def expand_margin_right(self,  value:float)->None: pass
  @property
  def expand_margin_bottom(self)->float: pass
  @expand_margin_bottom.setter
  def expand_margin_bottom(self,  value:float)->None: pass
  @property
  def axis_stretch_horizontal(self)->int: pass
  @axis_stretch_horizontal.setter
  def axis_stretch_horizontal(self,  value:int)->None: pass
  @property
  def axis_stretch_vertical(self)->int: pass
  @axis_stretch_vertical.setter
  def axis_stretch_vertical(self,  value:int)->None: pass
  @property
  def region_rect(self)->__core__.Rect2: pass
  @region_rect.setter
  def region_rect(self,  value:__core__.Rect2)->None: pass
  @property
  def modulate_color(self)->__core__.Color: pass
  @modulate_color.setter
  def modulate_color(self,  value:__core__.Color)->None: pass
  @property
  def draw_center(self)->bool: pass
  @draw_center.setter
  def draw_center(self,  value:bool)->None: pass
  def set_texture(self, texture:__texture2d__.Texture2D)->None: pass

  def get_texture(self)->__texture2d__.Texture2D: pass

  def set_texture_margin(self, margin:int , size:float)->None: pass

  def set_texture_margin_all(self, size:float)->None: pass

  def get_texture_margin(self, margin:int )->float: pass

  def set_expand_margin(self, margin:int , size:float)->None: pass

  def set_expand_margin_all(self, size:float)->None: pass

  def get_expand_margin(self, margin:int )->float: pass

  def set_region_rect(self, region:__core__.Rect2)->None: pass

  def get_region_rect(self)->__core__.Rect2: pass

  def set_draw_center(self, enable:bool)->None: pass

  def is_draw_center_enabled(self)->bool: pass

  def set_modulate(self, color:__core__.Color)->None: pass

  def get_modulate(self)->__core__.Color: pass

  def set_h_axis_stretch_mode(self, mode:int )->None: pass

  def get_h_axis_stretch_mode(self)->int: pass

  def set_v_axis_stretch_mode(self, mode:int )->None: pass

  def get_v_axis_stretch_mode(self)->int: pass


