from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.AudioEffect.AudioEffect as __audioeffect__


class AudioEffectCompressor(__audioeffect__.AudioEffect):

  @staticmethod
  def constructor()->AudioEffectCompressor:pass



  @staticmethod
  def cast(other:__object__.Object)->AudioEffectCompressor:pass


  @property
  def threshold(self)->float: pass
  @threshold.setter
  def threshold(self,  value:float)->None: pass
  @property
  def ratio(self)->float: pass
  @ratio.setter
  def ratio(self,  value:float)->None: pass
  @property
  def gain(self)->float: pass
  @gain.setter
  def gain(self,  value:float)->None: pass
  @property
  def attack_us(self)->float: pass
  @attack_us.setter
  def attack_us(self,  value:float)->None: pass
  @property
  def release_ms(self)->float: pass
  @release_ms.setter
  def release_ms(self,  value:float)->None: pass
  @property
  def mix(self)->float: pass
  @mix.setter
  def mix(self,  value:float)->None: pass
  @property
  def sidechain(self)->__core__.StringName: pass
  @sidechain.setter
  def sidechain(self,  value:__core__.StringName)->None: pass
  def set_threshold(self, threshold:float)->None: pass

  def get_threshold(self)->float: pass

  def set_ratio(self, ratio:float)->None: pass

  def get_ratio(self)->float: pass

  def set_gain(self, gain:float)->None: pass

  def get_gain(self)->float: pass

  def set_attack_us(self, attack_us:float)->None: pass

  def get_attack_us(self)->float: pass

  def set_release_ms(self, release_ms:float)->None: pass

  def get_release_ms(self)->float: pass

  def set_mix(self, mix:float)->None: pass

  def get_mix(self)->float: pass

  def set_sidechain(self, sidechain:__core__.StringName)->None: pass

  def get_sidechain(self)->__core__.StringName: pass


