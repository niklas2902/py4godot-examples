from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.ArrayMesh.ArrayMesh as __arraymesh__
import py4godot.classes.RefCounted.RefCounted as __refcounted__
import py4godot.classes.Material.Material as __material__
import py4godot.classes.SurfaceTool.SurfaceTool as __surfacetool__
import py4godot.classes.Mesh.Mesh as __mesh__


class SurfaceTool(__refcounted__.RefCounted):

  @staticmethod
  def constructor()->SurfaceTool:pass



  @staticmethod
  def cast(other:__object__.Object)->SurfaceTool:pass


  def set_skin_weight_count(self, count:int )->None: pass

  def get_skin_weight_count(self)->int: pass

  def set_custom_format(self, channel_index:int, format:int )->None: pass

  def get_custom_format(self, channel_index:int)->int: pass

  def begin(self, primitive:int )->None: pass

  def add_vertex(self, vertex:__core__.Vector3)->None: pass

  def set_color(self, color:__core__.Color)->None: pass

  def set_normal(self, normal:__core__.Vector3)->None: pass

  def set_tangent(self, tangent:__core__.Plane)->None: pass

  def set_uv(self, uv:__core__.Vector2)->None: pass

  def set_uv2(self, uv2:__core__.Vector2)->None: pass

  def set_bones(self, bones:__core__.PackedInt32Array)->None: pass

  def set_weights(self, weights:__core__.PackedFloat32Array)->None: pass

  def set_custom(self, channel_index:int, custom_color:__core__.Color)->None: pass

  def set_smooth_group(self, index:int)->None: pass

  def add_triangle_fan(self, vertices:__core__.PackedVector3Array, uvs:__core__.PackedVector2Array= __core__.PackedVector2Array.new0(), colors:__core__.PackedColorArray= __core__.PackedColorArray.new0(), uv2s:__core__.PackedVector2Array= __core__.PackedVector2Array.new0(), normals:__core__.PackedVector3Array= __core__.PackedVector3Array.new0(), tangents:__core__.Array=Array[Plane]([]))->None: pass

  def add_index(self, index:int)->None: pass

  def index(self)->None: pass

  def deindex(self)->None: pass

  def generate_normals(self, flip:bool=False)->None: pass

  def generate_tangents(self)->None: pass

  def optimize_indices_for_cache(self)->None: pass

  def get_aabb(self)->__core__.AABB: pass

  def generate_lod(self, nd_threshold:float, target_index_count:int=3)->__core__.PackedInt32Array: pass

  def set_material(self, material:__material__.Material)->None: pass

  def get_primitive_type(self)->int: pass

  def clear(self)->None: pass

  def create_from(self, existing:__mesh__.Mesh, surface:int)->None: pass

  def create_from_arrays(self, arrays:__core__.Array, primitive_type:int =3)->None: pass

  def create_from_blend_shape(self, existing:__mesh__.Mesh, surface:int, blend_shape:str)->None: pass

  def append_from(self, existing:__mesh__.Mesh, surface:int, transform:__core__.Transform3D)->None: pass

  def commit(self, existing:__arraymesh__.ArrayMesh= __arraymesh__.ArrayMesh.constructor(), flags:int=0)->__arraymesh__.ArrayMesh: pass

  def commit_to_arrays(self)->__core__.Array: pass


