from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.RefCounted.RefCounted as __refcounted__
import py4godot.classes.RenderingDevice.RenderingDevice as __renderingdevice__


class RDPipelineColorBlendStateAttachment(__refcounted__.RefCounted):

  @staticmethod
  def constructor()->RDPipelineColorBlendStateAttachment:pass



  @staticmethod
  def cast(other:__object__.Object)->RDPipelineColorBlendStateAttachment:pass


  @property
  def enable_blend(self)->bool: pass
  @enable_blend.setter
  def enable_blend(self,  value:bool)->None: pass
  @property
  def src_color_blend_factor(self)->int: pass
  @src_color_blend_factor.setter
  def src_color_blend_factor(self,  value:int)->None: pass
  @property
  def dst_color_blend_factor(self)->int: pass
  @dst_color_blend_factor.setter
  def dst_color_blend_factor(self,  value:int)->None: pass
  @property
  def color_blend_op(self)->int: pass
  @color_blend_op.setter
  def color_blend_op(self,  value:int)->None: pass
  @property
  def src_alpha_blend_factor(self)->int: pass
  @src_alpha_blend_factor.setter
  def src_alpha_blend_factor(self,  value:int)->None: pass
  @property
  def dst_alpha_blend_factor(self)->int: pass
  @dst_alpha_blend_factor.setter
  def dst_alpha_blend_factor(self,  value:int)->None: pass
  @property
  def alpha_blend_op(self)->int: pass
  @alpha_blend_op.setter
  def alpha_blend_op(self,  value:int)->None: pass
  @property
  def write_r(self)->bool: pass
  @write_r.setter
  def write_r(self,  value:bool)->None: pass
  @property
  def write_g(self)->bool: pass
  @write_g.setter
  def write_g(self,  value:bool)->None: pass
  @property
  def write_b(self)->bool: pass
  @write_b.setter
  def write_b(self,  value:bool)->None: pass
  @property
  def write_a(self)->bool: pass
  @write_a.setter
  def write_a(self,  value:bool)->None: pass
  def set_as_mix(self)->None: pass

  def set_enable_blend(self, p_member:bool)->None: pass

  def get_enable_blend(self)->bool: pass

  def set_src_color_blend_factor(self, p_member:int )->None: pass

  def get_src_color_blend_factor(self)->int: pass

  def set_dst_color_blend_factor(self, p_member:int )->None: pass

  def get_dst_color_blend_factor(self)->int: pass

  def set_color_blend_op(self, p_member:int )->None: pass

  def get_color_blend_op(self)->int: pass

  def set_src_alpha_blend_factor(self, p_member:int )->None: pass

  def get_src_alpha_blend_factor(self)->int: pass

  def set_dst_alpha_blend_factor(self, p_member:int )->None: pass

  def get_dst_alpha_blend_factor(self)->int: pass

  def set_alpha_blend_op(self, p_member:int )->None: pass

  def get_alpha_blend_op(self)->int: pass

  def set_write_r(self, p_member:bool)->None: pass

  def get_write_r(self)->bool: pass

  def set_write_g(self, p_member:bool)->None: pass

  def get_write_g(self)->bool: pass

  def set_write_b(self, p_member:bool)->None: pass

  def get_write_b(self)->bool: pass

  def set_write_a(self, p_member:bool)->None: pass

  def get_write_a(self)->bool: pass


