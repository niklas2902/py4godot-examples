from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.AudioStreamInteractive.AudioStreamInteractive as __audiostreaminteractive__
import py4godot.classes.AudioStream.AudioStream as __audiostream__


class AudioStreamInteractive(__audiostream__.AudioStream):

  @staticmethod
  def constructor()->AudioStreamInteractive:pass



  @staticmethod
  def cast(other:__object__.Object)->AudioStreamInteractive:pass


  @property
  def initial_clip(self)->int: pass
  @initial_clip.setter
  def initial_clip(self,  value:int)->None: pass
  @property
  def clip_count(self)->int: pass
  @clip_count.setter
  def clip_count(self,  value:int)->None: pass
  def set_clip_count(self, clip_count:int)->None: pass

  def get_clip_count(self)->int: pass

  def set_initial_clip(self, clip_index:int)->None: pass

  def get_initial_clip(self)->int: pass

  def set_clip_name(self, clip_index:int, name:__core__.StringName)->None: pass

  def get_clip_name(self, clip_index:int)->__core__.StringName: pass

  def set_clip_stream(self, clip_index:int, stream:__audiostream__.AudioStream)->None: pass

  def get_clip_stream(self, clip_index:int)->__audiostream__.AudioStream: pass

  def set_clip_auto_advance(self, clip_index:int, mode:int )->None: pass

  def get_clip_auto_advance(self, clip_index:int)->int: pass

  def set_clip_auto_advance_next_clip(self, clip_index:int, auto_advance_next_clip:int)->None: pass

  def get_clip_auto_advance_next_clip(self, clip_index:int)->int: pass

  def add_transition(self, from_clip:int, to_clip:int, from_time:int , to_time:int , fade_mode:int , fade_beats:float, use_filler_clip:bool=False, filler_clip:int=-1, hold_previous:bool=False)->None: pass

  def has_transition(self, from_clip:int, to_clip:int)->bool: pass

  def erase_transition(self, from_clip:int, to_clip:int)->None: pass

  def get_transition_list(self)->__core__.PackedInt32Array: pass

  def get_transition_from_time(self, from_clip:int, to_clip:int)->int: pass

  def get_transition_to_time(self, from_clip:int, to_clip:int)->int: pass

  def get_transition_fade_mode(self, from_clip:int, to_clip:int)->int: pass

  def get_transition_fade_beats(self, from_clip:int, to_clip:int)->float: pass

  def is_transition_using_filler_clip(self, from_clip:int, to_clip:int)->bool: pass

  def get_transition_filler_clip(self, from_clip:int, to_clip:int)->int: pass

  def is_transition_holding_previous(self, from_clip:int, to_clip:int)->bool: pass


