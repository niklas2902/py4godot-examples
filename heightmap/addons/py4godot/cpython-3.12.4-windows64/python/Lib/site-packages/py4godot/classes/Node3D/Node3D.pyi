from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.World3D.World3D as __world3d__
import py4godot.classes.Node3DGizmo.Node3DGizmo as __node3dgizmo__
import py4godot.classes.Node.Node as __node__
import py4godot.classes.Node3D.Node3D as __node3d__


class Node3D(__node__.Node):
  visibility_changed: BuiltinSignal

  @staticmethod
  def constructor()->Node3D:pass



  @staticmethod
  def cast(other:__object__.Object)->Node3D:pass


  @property
  def transform(self)->__core__.Transform3D: pass
  @transform.setter
  def transform(self,  value:__core__.Transform3D)->None: pass
  @property
  def global_transform(self)->__core__.Transform3D: pass
  @global_transform.setter
  def global_transform(self,  value:__core__.Transform3D)->None: pass
  @property
  def position(self)->__core__.Vector3: pass
  @position.setter
  def position(self,  value:__core__.Vector3)->None: pass
  @property
  def rotation(self)->__core__.Vector3: pass
  @rotation.setter
  def rotation(self,  value:__core__.Vector3)->None: pass
  @property
  def rotation_degrees(self)->__core__.Vector3: pass
  @rotation_degrees.setter
  def rotation_degrees(self,  value:__core__.Vector3)->None: pass
  @property
  def quaternion(self)->__core__.Quaternion: pass
  @quaternion.setter
  def quaternion(self,  value:__core__.Quaternion)->None: pass
  @property
  def basis(self)->__core__.Basis: pass
  @basis.setter
  def basis(self,  value:__core__.Basis)->None: pass
  @property
  def scale(self)->__core__.Vector3: pass
  @scale.setter
  def scale(self,  value:__core__.Vector3)->None: pass
  @property
  def rotation_edit_mode(self)->int: pass
  @rotation_edit_mode.setter
  def rotation_edit_mode(self,  value:int)->None: pass
  @property
  def rotation_order(self)->int: pass
  @rotation_order.setter
  def rotation_order(self,  value:int)->None: pass
  @property
  def top_level(self)->bool: pass
  @top_level.setter
  def top_level(self,  value:bool)->None: pass
  @property
  def global_position(self)->__core__.Vector3: pass
  @global_position.setter
  def global_position(self,  value:__core__.Vector3)->None: pass
  @property
  def global_basis(self)->__core__.Basis: pass
  @global_basis.setter
  def global_basis(self,  value:__core__.Basis)->None: pass
  @property
  def global_rotation(self)->__core__.Vector3: pass
  @global_rotation.setter
  def global_rotation(self,  value:__core__.Vector3)->None: pass
  @property
  def global_rotation_degrees(self)->__core__.Vector3: pass
  @global_rotation_degrees.setter
  def global_rotation_degrees(self,  value:__core__.Vector3)->None: pass
  @property
  def visible(self)->bool: pass
  @visible.setter
  def visible(self,  value:bool)->None: pass
  @property
  def visibility_parent(self)->__core__.NodePath: pass
  @visibility_parent.setter
  def visibility_parent(self,  value:__core__.NodePath)->None: pass
  def set_transform(self, local:__core__.Transform3D)->None: pass

  def get_transform(self)->__core__.Transform3D: pass

  def set_position(self, position:__core__.Vector3)->None: pass

  def get_position(self)->__core__.Vector3: pass

  def set_rotation(self, euler_radians:__core__.Vector3)->None: pass

  def get_rotation(self)->__core__.Vector3: pass

  def set_rotation_degrees(self, euler_degrees:__core__.Vector3)->None: pass

  def get_rotation_degrees(self)->__core__.Vector3: pass

  def set_rotation_order(self, order:int )->None: pass

  def get_rotation_order(self)->int: pass

  def set_rotation_edit_mode(self, edit_mode:int )->None: pass

  def get_rotation_edit_mode(self)->int: pass

  def set_scale(self, scale:__core__.Vector3)->None: pass

  def get_scale(self)->__core__.Vector3: pass

  def set_quaternion(self, quaternion:__core__.Quaternion)->None: pass

  def get_quaternion(self)->__core__.Quaternion: pass

  def set_basis(self, basis:__core__.Basis)->None: pass

  def get_basis(self)->__core__.Basis: pass

  def set_global_transform(self, global_:__core__.Transform3D)->None: pass

  def get_global_transform(self)->__core__.Transform3D: pass

  def set_global_position(self, position:__core__.Vector3)->None: pass

  def get_global_position(self)->__core__.Vector3: pass

  def set_global_basis(self, basis:__core__.Basis)->None: pass

  def get_global_basis(self)->__core__.Basis: pass

  def set_global_rotation(self, euler_radians:__core__.Vector3)->None: pass

  def get_global_rotation(self)->__core__.Vector3: pass

  def set_global_rotation_degrees(self, euler_degrees:__core__.Vector3)->None: pass

  def get_global_rotation_degrees(self)->__core__.Vector3: pass

  def get_parent_node_3d(self)->__node3d__.Node3D: pass

  def set_ignore_transform_notification(self, enabled:bool)->None: pass

  def set_as_top_level(self, enable:bool)->None: pass

  def is_set_as_top_level(self)->bool: pass

  def set_disable_scale(self, disable:bool)->None: pass

  def is_scale_disabled(self)->bool: pass

  def get_world_3d(self)->__world3d__.World3D: pass

  def force_update_transform(self)->None: pass

  def set_visibility_parent(self, path:__core__.NodePath)->None: pass

  def get_visibility_parent(self)->__core__.NodePath: pass

  def update_gizmos(self)->None: pass

  def add_gizmo(self, gizmo:__node3dgizmo__.Node3DGizmo)->None: pass

  def get_gizmos(self)->__core__.Array: pass

  def clear_gizmos(self)->None: pass

  def set_subgizmo_selection(self, gizmo:__node3dgizmo__.Node3DGizmo, id:int, transform:__core__.Transform3D)->None: pass

  def clear_subgizmo_selection(self)->None: pass

  def set_visible(self, visible:bool)->None: pass

  def is_visible(self)->bool: pass

  def is_visible_in_tree(self)->bool: pass

  def show(self)->None: pass

  def hide(self)->None: pass

  def set_notify_local_transform(self, enable:bool)->None: pass

  def is_local_transform_notification_enabled(self)->bool: pass

  def set_notify_transform(self, enable:bool)->None: pass

  def is_transform_notification_enabled(self)->bool: pass

  def rotate(self, axis:__core__.Vector3, angle:float)->None: pass

  def global_rotate(self, axis:__core__.Vector3, angle:float)->None: pass

  def global_scale(self, scale:__core__.Vector3)->None: pass

  def global_translate(self, offset:__core__.Vector3)->None: pass

  def rotate_object_local(self, axis:__core__.Vector3, angle:float)->None: pass

  def scale_object_local(self, scale:__core__.Vector3)->None: pass

  def translate_object_local(self, offset:__core__.Vector3)->None: pass

  def rotate_x(self, angle:float)->None: pass

  def rotate_y(self, angle:float)->None: pass

  def rotate_z(self, angle:float)->None: pass

  def translate(self, offset:__core__.Vector3)->None: pass

  def orthonormalize(self)->None: pass

  def set_identity(self)->None: pass

  def look_at(self, target:__core__.Vector3, up:__core__.Vector3= __core__.Vector3.new0(), use_model_front:bool=False)->None: pass

  def look_at_from_position(self, position:__core__.Vector3, target:__core__.Vector3, up:__core__.Vector3= __core__.Vector3.new0(), use_model_front:bool=False)->None: pass

  def to_local(self, global_point:__core__.Vector3)->__core__.Vector3: pass

  def to_global(self, local_point:__core__.Vector3)->__core__.Vector3: pass


