from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Node.Node as __node__
import py4godot.classes.Timer.Timer as __timer__


class Timer(__node__.Node):
  timeout: BuiltinSignal

  @staticmethod
  def constructor()->Timer:pass



  @staticmethod
  def cast(other:__object__.Object)->Timer:pass


  @property
  def process_callback(self)->int: pass
  @process_callback.setter
  def process_callback(self,  value:int)->None: pass
  @property
  def wait_time(self)->float: pass
  @wait_time.setter
  def wait_time(self,  value:float)->None: pass
  @property
  def one_shot(self)->bool: pass
  @one_shot.setter
  def one_shot(self,  value:bool)->None: pass
  @property
  def autostart(self)->bool: pass
  @autostart.setter
  def autostart(self,  value:bool)->None: pass
  @property
  def paused(self)->bool: pass
  @paused.setter
  def paused(self,  value:bool)->None: pass
  @property
  def time_left(self)->float: pass
  def set_wait_time(self, time_sec:float)->None: pass

  def get_wait_time(self)->float: pass

  def set_one_shot(self, enable:bool)->None: pass

  def is_one_shot(self)->bool: pass

  def set_autostart(self, enable:bool)->None: pass

  def has_autostart(self)->bool: pass

  def start(self, time_sec:float=-1)->None: pass

  def stop(self)->None: pass

  def set_paused(self, paused:bool)->None: pass

  def is_paused(self)->bool: pass

  def is_stopped(self)->bool: pass

  def get_time_left(self)->float: pass

  def set_timer_process_callback(self, callback:int )->None: pass

  def get_timer_process_callback(self)->int: pass


