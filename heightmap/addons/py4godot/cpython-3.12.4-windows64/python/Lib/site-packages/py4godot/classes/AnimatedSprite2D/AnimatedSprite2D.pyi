from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Node2D.Node2D as __node2d__
import py4godot.classes.SpriteFrames.SpriteFrames as __spriteframes__


class AnimatedSprite2D(__node2d__.Node2D):
  sprite_frames_changed: BuiltinSignal
  animation_changed: BuiltinSignal
  frame_changed: BuiltinSignal
  animation_looped: BuiltinSignal
  animation_finished: BuiltinSignal

  @staticmethod
  def constructor()->AnimatedSprite2D:pass



  @staticmethod
  def cast(other:__object__.Object)->AnimatedSprite2D:pass


  @property
  def sprite_frames(self)->__spriteframes__.SpriteFrames: pass
  @sprite_frames.setter
  def sprite_frames(self,  value:__spriteframes__.SpriteFrames)->None: pass
  @property
  def animation(self)->__core__.StringName: pass
  @animation.setter
  def animation(self,  value:__core__.StringName)->None: pass
  @property
  def autoplay(self)->__core__.StringName: pass
  @autoplay.setter
  def autoplay(self,  value:__core__.StringName)->None: pass
  @property
  def frame(self)->int: pass
  @frame.setter
  def frame(self,  value:int)->None: pass
  @property
  def frame_progress(self)->float: pass
  @frame_progress.setter
  def frame_progress(self,  value:float)->None: pass
  @property
  def speed_scale(self)->float: pass
  @speed_scale.setter
  def speed_scale(self,  value:float)->None: pass
  @property
  def centered(self)->bool: pass
  @centered.setter
  def centered(self,  value:bool)->None: pass
  @property
  def offset(self)->__core__.Vector2: pass
  @offset.setter
  def offset(self,  value:__core__.Vector2)->None: pass
  @property
  def flip_h(self)->bool: pass
  @flip_h.setter
  def flip_h(self,  value:bool)->None: pass
  @property
  def flip_v(self)->bool: pass
  @flip_v.setter
  def flip_v(self,  value:bool)->None: pass
  def set_sprite_frames(self, sprite_frames:__spriteframes__.SpriteFrames)->None: pass

  def get_sprite_frames(self)->__spriteframes__.SpriteFrames: pass

  def set_animation(self, name:__core__.StringName)->None: pass

  def get_animation(self)->__core__.StringName: pass

  def set_autoplay(self, name:str)->None: pass

  def get_autoplay(self)->str: pass

  def is_playing(self)->bool: pass

  def play(self, name:__core__.StringName= __core__.StringName.new0(), custom_speed:float=1.0, from_end:bool=False)->None: pass

  def play_backwards(self, name:__core__.StringName= __core__.StringName.new0())->None: pass

  def pause(self)->None: pass

  def stop(self)->None: pass

  def set_centered(self, centered:bool)->None: pass

  def is_centered(self)->bool: pass

  def set_offset(self, offset:__core__.Vector2)->None: pass

  def get_offset(self)->__core__.Vector2: pass

  def set_flip_h(self, flip_h:bool)->None: pass

  def is_flipped_h(self)->bool: pass

  def set_flip_v(self, flip_v:bool)->None: pass

  def is_flipped_v(self)->bool: pass

  def set_frame(self, frame:int)->None: pass

  def get_frame(self)->int: pass

  def set_frame_progress(self, progress:float)->None: pass

  def get_frame_progress(self)->float: pass

  def set_frame_and_progress(self, frame:int, progress:float)->None: pass

  def set_speed_scale(self, speed_scale:float)->None: pass

  def get_speed_scale(self)->float: pass

  def get_playing_speed(self)->float: pass


