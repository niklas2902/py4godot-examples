from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.ArrayMesh.ArrayMesh as __arraymesh__
import py4godot.classes.Mesh.Mesh as __mesh__


class ArrayMesh(__mesh__.Mesh):

  @staticmethod
  def constructor()->ArrayMesh:pass



  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->ArrayMesh:pass

  @staticmethod
  def cast(other:__object__.Object)->ArrayMesh:pass


  @property
  def blend_shape_mode(self)->int: pass
  @blend_shape_mode.setter
  def blend_shape_mode(self,  value:int)->None: pass
  @property
  def custom_aabb(self)->__core__.AABB: pass
  @custom_aabb.setter
  def custom_aabb(self,  value:__core__.AABB)->None: pass
  @property
  def shadow_mesh(self)->__arraymesh__.ArrayMesh: pass
  @shadow_mesh.setter
  def shadow_mesh(self,  value:__arraymesh__.ArrayMesh)->None: pass
  def add_blend_shape(self, name:__core__.StringName)->None: pass

  def get_blend_shape_count(self)->int: pass

  def get_blend_shape_name(self, index:int)->__core__.StringName: pass

  def set_blend_shape_name(self, index:int, name:__core__.StringName)->None: pass

  def clear_blend_shapes(self)->None: pass

  def set_blend_shape_mode(self, mode:int )->None: pass

  def get_blend_shape_mode(self)->int: pass

  def add_surface_from_arrays(self, primitive:int , arrays:__core__.Array, blend_shapes:__core__.Array=[], lods:__core__.Dictionary= __core__.Dictionary.new0(), flags:int=0)->None: pass

  def clear_surfaces(self)->None: pass

  def surface_update_vertex_region(self, surf_idx:int, offset:int, data:__core__.PackedByteArray)->None: pass

  def surface_update_attribute_region(self, surf_idx:int, offset:int, data:__core__.PackedByteArray)->None: pass

  def surface_update_skin_region(self, surf_idx:int, offset:int, data:__core__.PackedByteArray)->None: pass

  def surface_get_array_len(self, surf_idx:int)->int: pass

  def surface_get_array_index_len(self, surf_idx:int)->int: pass

  def surface_get_format(self, surf_idx:int)->int: pass

  def surface_get_primitive_type(self, surf_idx:int)->int: pass

  def surface_find_by_name(self, name:str)->int: pass

  def surface_set_name(self, surf_idx:int, name:str)->None: pass

  def surface_get_name(self, surf_idx:int)->str: pass

  def regen_normal_maps(self)->None: pass

  def lightmap_unwrap(self, transform:__core__.Transform3D, texel_size:float)->int: pass

  def set_custom_aabb(self, aabb:__core__.AABB)->None: pass

  def get_custom_aabb(self)->__core__.AABB: pass

  def set_shadow_mesh(self, mesh:__arraymesh__.ArrayMesh)->None: pass

  def get_shadow_mesh(self)->__arraymesh__.ArrayMesh: pass


