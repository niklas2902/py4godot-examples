from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.AnimationRootNode.AnimationRootNode as __animationrootnode__
import py4godot.classes.AnimationTree.AnimationTree as __animationtree__
import py4godot.classes.AnimationMixer.AnimationMixer as __animationmixer__


class AnimationTree(__animationmixer__.AnimationMixer):
  animation_player_changed: BuiltinSignal

  @staticmethod
  def constructor()->AnimationTree:pass



  @staticmethod
  def cast(other:__object__.Object)->AnimationTree:pass


  @property
  def tree_root(self)->__animationrootnode__.AnimationRootNode: pass
  @tree_root.setter
  def tree_root(self,  value:__animationrootnode__.AnimationRootNode)->None: pass
  @property
  def advance_expression_base_node(self)->__core__.NodePath: pass
  @advance_expression_base_node.setter
  def advance_expression_base_node(self,  value:__core__.NodePath)->None: pass
  @property
  def anim_player(self)->__core__.NodePath: pass
  @anim_player.setter
  def anim_player(self,  value:__core__.NodePath)->None: pass
  def set_tree_root(self, animation_node:__animationrootnode__.AnimationRootNode)->None: pass

  def get_tree_root(self)->__animationrootnode__.AnimationRootNode: pass

  def set_advance_expression_base_node(self, path:__core__.NodePath)->None: pass

  def get_advance_expression_base_node(self)->__core__.NodePath: pass

  def set_animation_player(self, path:__core__.NodePath)->None: pass

  def get_animation_player(self)->__core__.NodePath: pass

  def set_process_callback(self, mode:int )->None: pass

  def get_process_callback(self)->int: pass


