from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Noise.Noise as __noise__
import py4godot.classes.FastNoiseLite.FastNoiseLite as __fastnoiselite__


class FastNoiseLite(__noise__.Noise):

  @staticmethod
  def constructor()->FastNoiseLite:pass



  @staticmethod
  def cast(other:__object__.Object)->FastNoiseLite:pass


  @property
  def noise_type(self)->int: pass
  @noise_type.setter
  def noise_type(self,  value:int)->None: pass
  @property
  def seed(self)->int: pass
  @seed.setter
  def seed(self,  value:int)->None: pass
  @property
  def frequency(self)->float: pass
  @frequency.setter
  def frequency(self,  value:float)->None: pass
  @property
  def offset(self)->__core__.Vector3: pass
  @offset.setter
  def offset(self,  value:__core__.Vector3)->None: pass
  @property
  def fractal_type(self)->int: pass
  @fractal_type.setter
  def fractal_type(self,  value:int)->None: pass
  @property
  def fractal_octaves(self)->int: pass
  @fractal_octaves.setter
  def fractal_octaves(self,  value:int)->None: pass
  @property
  def fractal_lacunarity(self)->float: pass
  @fractal_lacunarity.setter
  def fractal_lacunarity(self,  value:float)->None: pass
  @property
  def fractal_gain(self)->float: pass
  @fractal_gain.setter
  def fractal_gain(self,  value:float)->None: pass
  @property
  def fractal_weighted_strength(self)->float: pass
  @fractal_weighted_strength.setter
  def fractal_weighted_strength(self,  value:float)->None: pass
  @property
  def fractal_ping_pong_strength(self)->float: pass
  @fractal_ping_pong_strength.setter
  def fractal_ping_pong_strength(self,  value:float)->None: pass
  @property
  def cellular_distance_function(self)->int: pass
  @cellular_distance_function.setter
  def cellular_distance_function(self,  value:int)->None: pass
  @property
  def cellular_jitter(self)->float: pass
  @cellular_jitter.setter
  def cellular_jitter(self,  value:float)->None: pass
  @property
  def cellular_return_type(self)->int: pass
  @cellular_return_type.setter
  def cellular_return_type(self,  value:int)->None: pass
  @property
  def domain_warp_enabled(self)->bool: pass
  @domain_warp_enabled.setter
  def domain_warp_enabled(self,  value:bool)->None: pass
  @property
  def domain_warp_type(self)->int: pass
  @domain_warp_type.setter
  def domain_warp_type(self,  value:int)->None: pass
  @property
  def domain_warp_amplitude(self)->float: pass
  @domain_warp_amplitude.setter
  def domain_warp_amplitude(self,  value:float)->None: pass
  @property
  def domain_warp_frequency(self)->float: pass
  @domain_warp_frequency.setter
  def domain_warp_frequency(self,  value:float)->None: pass
  @property
  def domain_warp_fractal_type(self)->int: pass
  @domain_warp_fractal_type.setter
  def domain_warp_fractal_type(self,  value:int)->None: pass
  @property
  def domain_warp_fractal_octaves(self)->int: pass
  @domain_warp_fractal_octaves.setter
  def domain_warp_fractal_octaves(self,  value:int)->None: pass
  @property
  def domain_warp_fractal_lacunarity(self)->float: pass
  @domain_warp_fractal_lacunarity.setter
  def domain_warp_fractal_lacunarity(self,  value:float)->None: pass
  @property
  def domain_warp_fractal_gain(self)->float: pass
  @domain_warp_fractal_gain.setter
  def domain_warp_fractal_gain(self,  value:float)->None: pass
  def set_noise_type(self, type:int )->None: pass

  def get_noise_type(self)->int: pass

  def set_seed(self, seed:int)->None: pass

  def get_seed(self)->int: pass

  def set_frequency(self, freq:float)->None: pass

  def get_frequency(self)->float: pass

  def set_offset(self, offset:__core__.Vector3)->None: pass

  def get_offset(self)->__core__.Vector3: pass

  def set_fractal_type(self, type:int )->None: pass

  def get_fractal_type(self)->int: pass

  def set_fractal_octaves(self, octave_count:int)->None: pass

  def get_fractal_octaves(self)->int: pass

  def set_fractal_lacunarity(self, lacunarity:float)->None: pass

  def get_fractal_lacunarity(self)->float: pass

  def set_fractal_gain(self, gain:float)->None: pass

  def get_fractal_gain(self)->float: pass

  def set_fractal_weighted_strength(self, weighted_strength:float)->None: pass

  def get_fractal_weighted_strength(self)->float: pass

  def set_fractal_ping_pong_strength(self, ping_pong_strength:float)->None: pass

  def get_fractal_ping_pong_strength(self)->float: pass

  def set_cellular_distance_function(self, func:int )->None: pass

  def get_cellular_distance_function(self)->int: pass

  def set_cellular_jitter(self, jitter:float)->None: pass

  def get_cellular_jitter(self)->float: pass

  def set_cellular_return_type(self, ret:int )->None: pass

  def get_cellular_return_type(self)->int: pass

  def set_domain_warp_enabled(self, domain_warp_enabled:bool)->None: pass

  def is_domain_warp_enabled(self)->bool: pass

  def set_domain_warp_type(self, domain_warp_type:int )->None: pass

  def get_domain_warp_type(self)->int: pass

  def set_domain_warp_amplitude(self, domain_warp_amplitude:float)->None: pass

  def get_domain_warp_amplitude(self)->float: pass

  def set_domain_warp_frequency(self, domain_warp_frequency:float)->None: pass

  def get_domain_warp_frequency(self)->float: pass

  def set_domain_warp_fractal_type(self, domain_warp_fractal_type:int )->None: pass

  def get_domain_warp_fractal_type(self)->int: pass

  def set_domain_warp_fractal_octaves(self, domain_warp_octave_count:int)->None: pass

  def get_domain_warp_fractal_octaves(self)->int: pass

  def set_domain_warp_fractal_lacunarity(self, domain_warp_lacunarity:float)->None: pass

  def get_domain_warp_fractal_lacunarity(self)->float: pass

  def set_domain_warp_fractal_gain(self, domain_warp_gain:float)->None: pass

  def get_domain_warp_fractal_gain(self)->float: pass


