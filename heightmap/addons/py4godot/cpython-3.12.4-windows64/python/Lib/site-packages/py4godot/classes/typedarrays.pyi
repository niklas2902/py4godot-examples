from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal

import py4godot.classes.Area2D.Area2D as __area2d__
import py4godot.classes.Script.Script as __script__
import py4godot.classes.GLTFAccessor.GLTFAccessor as __gltfaccessor__
import py4godot.classes.Area3D.Area3D as __area3d__
import py4godot.classes.GLTFSkeleton.GLTFSkeleton as __gltfskeleton__
import py4godot.classes.Image.Image as __image__
import py4godot.classes.ScriptEditorBase.ScriptEditorBase as __scripteditorbase__
import py4godot.classes.CompositorEffect.CompositorEffect as __compositoreffect__
import py4godot.classes.TextureLayered.TextureLayered as __texturelayered__
import py4godot.classes.RegExMatch.RegExMatch as __regexmatch__
import py4godot.classes.GLTFCamera.GLTFCamera as __gltfcamera__
import py4godot.classes.PhysicsBody3D.PhysicsBody3D as __physicsbody3d__
import py4godot.classes.TreeItem.TreeItem as __treeitem__
import py4godot.classes.GLTFMesh.GLTFMesh as __gltfmesh__
import py4godot.classes.GLTFAnimation.GLTFAnimation as __gltfanimation__
import py4godot.classes.PhysicsBody2D.PhysicsBody2D as __physicsbody2d__
import py4godot.classes.Node.Node as __node__
import py4godot.classes.Texture2D.Texture2D as __texture2d__
import py4godot.classes.GLTFLight.GLTFLight as __gltflight__
import py4godot.classes.BaseButton.BaseButton as __basebutton__
import py4godot.classes.Window.Window as __window__
import py4godot.classes.Node3DGizmo.Node3DGizmo as __node3dgizmo__
import py4godot.classes.CameraFeed.CameraFeed as __camerafeed__
import py4godot.classes.InputEvent.InputEvent as __inputevent__
import py4godot.classes.Font.Font as __font__
import py4godot.classes.Material.Material as __material__
import py4godot.classes.GLTFBufferView.GLTFBufferView as __gltfbufferview__
import py4godot.classes.GLTFTextureSampler.GLTFTextureSampler as __gltftexturesampler__
import py4godot.classes.RDPipelineColorBlendStateAttachment.RDPipelineColorBlendStateAttachment as __rdpipelinecolorblendstateattachment__
import py4godot.classes.RDAttachmentFormat.RDAttachmentFormat as __rdattachmentformat__
import py4godot.classes.Tween.Tween as __tween__
import py4godot.classes.GLTFSkin.GLTFSkin as __gltfskin__
import py4godot.classes.GLTFNode.GLTFNode as __gltfnode__
import py4godot.classes.GLTFTexture.GLTFTexture as __gltftexture__
import py4godot.classes.ENetPacketPeer.ENetPacketPeer as __enetpacketpeer__
import py4godot.classes.RDVertexAttribute.RDVertexAttribute as __rdvertexattribute__
import py4godot.classes.RDUniform.RDUniform as __rduniform__
import py4godot.classes.RDPipelineSpecializationConstant.RDPipelineSpecializationConstant as __rdpipelinespecializationconstant__
import py4godot.classes.Mesh.Mesh as __mesh__
import py4godot.classes.Node2D.Node2D as __node2d__
import py4godot.classes.RDFramebufferPass.RDFramebufferPass as __rdframebufferpass__
import py4godot.classes.Node3D.Node3D as __node3d__

class Area2DTypedArray():

  @staticmethod
  def constructor()->Area2DTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.Area2DTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.Area2DTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.Area2DTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.Area2DTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.Area2DTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.Area2DTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.Area2DTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.Area2DTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.Area2DTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.Area2DTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.Area2DTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.Area2DTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.Area2DTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->Area2DTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:__area2d__.Area2D)->None: pass

  def push_front(self, value:__area2d__.Area2D)->None: pass

  def append(self, value:__area2d__.Area2D)->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:__area2d__.Area2D)->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:__area2d__.Area2D)->None: pass

  def erase(self, value:__area2d__.Area2D)->None: pass

  def front(self)->__area2d__.Area2D: pass

  def back(self)->__area2d__.Area2D: pass

  def pick_random(self)->__area2d__.Area2D: pass

  def find(self, what:__area2d__.Area2D, from_:int=0)->int: pass

  def rfind(self, what:__area2d__.Area2D, from_:int=-1)->int: pass

  def count(self, value:__area2d__.Area2D)->int: pass

  def has(self, value:__area2d__.Area2D)->bool: pass

  def pop_back(self)->__area2d__.Area2D: pass

  def pop_front(self)->__area2d__.Area2D: pass

  def pop_at(self, position:int)->__area2d__.Area2D: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:__area2d__.Area2D, before:bool=True)->int: pass

  def bsearch_custom(self, value:__area2d__.Area2D, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:__area2d__.Area2D=None)->__area2d__.Area2D: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->__area2d__.Area2D: pass

  def min(self)->__area2d__.Area2D: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->__area2d__.Area2D: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class StringTypedArray():

  @staticmethod
  def constructor()->StringTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.StringTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.StringTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.StringTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.StringTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.StringTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.StringTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.StringTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.StringTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.StringTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.StringTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.StringTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.StringTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.StringTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->StringTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:{'String'})->None: pass

  def push_front(self, value:{'String'})->None: pass

  def append(self, value:{'String'})->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:{'String'})->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:{'String'})->None: pass

  def erase(self, value:{'String'})->None: pass

  def front(self)->{'String'}: pass

  def back(self)->{'String'}: pass

  def pick_random(self)->{'String'}: pass

  def find(self, what:{'String'}, from_:int=0)->int: pass

  def rfind(self, what:{'String'}, from_:int=-1)->int: pass

  def count(self, value:{'String'})->int: pass

  def has(self, value:{'String'})->bool: pass

  def pop_back(self)->{'String'}: pass

  def pop_front(self)->{'String'}: pass

  def pop_at(self, position:int)->{'String'}: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:{'String'}, before:bool=True)->int: pass

  def bsearch_custom(self, value:{'String'}, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:{'String'}=None)->{'String'}: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->{'String'}: pass

  def min(self)->{'String'}: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->{'String'}: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class ScriptTypedArray():

  @staticmethod
  def constructor()->ScriptTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.ScriptTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.ScriptTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.ScriptTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.ScriptTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.ScriptTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.ScriptTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.ScriptTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.ScriptTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.ScriptTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.ScriptTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.ScriptTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.ScriptTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.ScriptTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->ScriptTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:__script__.Script)->None: pass

  def push_front(self, value:__script__.Script)->None: pass

  def append(self, value:__script__.Script)->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:__script__.Script)->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:__script__.Script)->None: pass

  def erase(self, value:__script__.Script)->None: pass

  def front(self)->__script__.Script: pass

  def back(self)->__script__.Script: pass

  def pick_random(self)->__script__.Script: pass

  def find(self, what:__script__.Script, from_:int=0)->int: pass

  def rfind(self, what:__script__.Script, from_:int=-1)->int: pass

  def count(self, value:__script__.Script)->int: pass

  def has(self, value:__script__.Script)->bool: pass

  def pop_back(self)->__script__.Script: pass

  def pop_front(self)->__script__.Script: pass

  def pop_at(self, position:int)->__script__.Script: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:__script__.Script, before:bool=True)->int: pass

  def bsearch_custom(self, value:__script__.Script, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:__script__.Script=None)->__script__.Script: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->__script__.Script: pass

  def min(self)->__script__.Script: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->__script__.Script: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class PlaneTypedArray():

  @staticmethod
  def constructor()->PlaneTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.PlaneTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.PlaneTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.PlaneTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.PlaneTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.PlaneTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.PlaneTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.PlaneTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.PlaneTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.PlaneTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.PlaneTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.PlaneTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.PlaneTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.PlaneTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->PlaneTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:{'Plane'})->None: pass

  def push_front(self, value:{'Plane'})->None: pass

  def append(self, value:{'Plane'})->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:{'Plane'})->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:{'Plane'})->None: pass

  def erase(self, value:{'Plane'})->None: pass

  def front(self)->{'Plane'}: pass

  def back(self)->{'Plane'}: pass

  def pick_random(self)->{'Plane'}: pass

  def find(self, what:{'Plane'}, from_:int=0)->int: pass

  def rfind(self, what:{'Plane'}, from_:int=-1)->int: pass

  def count(self, value:{'Plane'})->int: pass

  def has(self, value:{'Plane'})->bool: pass

  def pop_back(self)->{'Plane'}: pass

  def pop_front(self)->{'Plane'}: pass

  def pop_at(self, position:int)->{'Plane'}: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:{'Plane'}, before:bool=True)->int: pass

  def bsearch_custom(self, value:{'Plane'}, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:{'Plane'}=None)->{'Plane'}: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->{'Plane'}: pass

  def min(self)->{'Plane'}: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->{'Plane'}: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class GLTFAccessorTypedArray():

  @staticmethod
  def constructor()->GLTFAccessorTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.GLTFAccessorTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.GLTFAccessorTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.GLTFAccessorTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.GLTFAccessorTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.GLTFAccessorTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.GLTFAccessorTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.GLTFAccessorTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.GLTFAccessorTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.GLTFAccessorTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.GLTFAccessorTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.GLTFAccessorTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.GLTFAccessorTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.GLTFAccessorTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->GLTFAccessorTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:__gltfaccessor__.GLTFAccessor)->None: pass

  def push_front(self, value:__gltfaccessor__.GLTFAccessor)->None: pass

  def append(self, value:__gltfaccessor__.GLTFAccessor)->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:__gltfaccessor__.GLTFAccessor)->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:__gltfaccessor__.GLTFAccessor)->None: pass

  def erase(self, value:__gltfaccessor__.GLTFAccessor)->None: pass

  def front(self)->__gltfaccessor__.GLTFAccessor: pass

  def back(self)->__gltfaccessor__.GLTFAccessor: pass

  def pick_random(self)->__gltfaccessor__.GLTFAccessor: pass

  def find(self, what:__gltfaccessor__.GLTFAccessor, from_:int=0)->int: pass

  def rfind(self, what:__gltfaccessor__.GLTFAccessor, from_:int=-1)->int: pass

  def count(self, value:__gltfaccessor__.GLTFAccessor)->int: pass

  def has(self, value:__gltfaccessor__.GLTFAccessor)->bool: pass

  def pop_back(self)->__gltfaccessor__.GLTFAccessor: pass

  def pop_front(self)->__gltfaccessor__.GLTFAccessor: pass

  def pop_at(self, position:int)->__gltfaccessor__.GLTFAccessor: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:__gltfaccessor__.GLTFAccessor, before:bool=True)->int: pass

  def bsearch_custom(self, value:__gltfaccessor__.GLTFAccessor, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:__gltfaccessor__.GLTFAccessor=None)->__gltfaccessor__.GLTFAccessor: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->__gltfaccessor__.GLTFAccessor: pass

  def min(self)->__gltfaccessor__.GLTFAccessor: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->__gltfaccessor__.GLTFAccessor: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class ArrayTypedArray():

  @staticmethod
  def constructor()->ArrayTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.ArrayTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.ArrayTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.ArrayTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.ArrayTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.ArrayTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.ArrayTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.ArrayTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.ArrayTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.ArrayTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.ArrayTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.ArrayTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.ArrayTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.ArrayTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->ArrayTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:{'Array'})->None: pass

  def push_front(self, value:{'Array'})->None: pass

  def append(self, value:{'Array'})->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:{'Array'})->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:{'Array'})->None: pass

  def erase(self, value:{'Array'})->None: pass

  def front(self)->{'Array'}: pass

  def back(self)->{'Array'}: pass

  def pick_random(self)->{'Array'}: pass

  def find(self, what:{'Array'}, from_:int=0)->int: pass

  def rfind(self, what:{'Array'}, from_:int=-1)->int: pass

  def count(self, value:{'Array'})->int: pass

  def has(self, value:{'Array'})->bool: pass

  def pop_back(self)->{'Array'}: pass

  def pop_front(self)->{'Array'}: pass

  def pop_at(self, position:int)->{'Array'}: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:{'Array'}, before:bool=True)->int: pass

  def bsearch_custom(self, value:{'Array'}, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:{'Array'}=None)->{'Array'}: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->{'Array'}: pass

  def min(self)->{'Array'}: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->{'Array'}: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class PackedByteArrayTypedArray():

  @staticmethod
  def constructor()->PackedByteArrayTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.PackedByteArrayTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.PackedByteArrayTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.PackedByteArrayTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.PackedByteArrayTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.PackedByteArrayTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.PackedByteArrayTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.PackedByteArrayTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.PackedByteArrayTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.PackedByteArrayTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.PackedByteArrayTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.PackedByteArrayTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.PackedByteArrayTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.PackedByteArrayTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->PackedByteArrayTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:{'PackedByteArray'})->None: pass

  def push_front(self, value:{'PackedByteArray'})->None: pass

  def append(self, value:{'PackedByteArray'})->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:{'PackedByteArray'})->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:{'PackedByteArray'})->None: pass

  def erase(self, value:{'PackedByteArray'})->None: pass

  def front(self)->{'PackedByteArray'}: pass

  def back(self)->{'PackedByteArray'}: pass

  def pick_random(self)->{'PackedByteArray'}: pass

  def find(self, what:{'PackedByteArray'}, from_:int=0)->int: pass

  def rfind(self, what:{'PackedByteArray'}, from_:int=-1)->int: pass

  def count(self, value:{'PackedByteArray'})->int: pass

  def has(self, value:{'PackedByteArray'})->bool: pass

  def pop_back(self)->{'PackedByteArray'}: pass

  def pop_front(self)->{'PackedByteArray'}: pass

  def pop_at(self, position:int)->{'PackedByteArray'}: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:{'PackedByteArray'}, before:bool=True)->int: pass

  def bsearch_custom(self, value:{'PackedByteArray'}, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:{'PackedByteArray'}=None)->{'PackedByteArray'}: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->{'PackedByteArray'}: pass

  def min(self)->{'PackedByteArray'}: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->{'PackedByteArray'}: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class Area3DTypedArray():

  @staticmethod
  def constructor()->Area3DTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.Area3DTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.Area3DTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.Area3DTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.Area3DTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.Area3DTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.Area3DTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.Area3DTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.Area3DTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.Area3DTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.Area3DTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.Area3DTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.Area3DTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.Area3DTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->Area3DTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:__area3d__.Area3D)->None: pass

  def push_front(self, value:__area3d__.Area3D)->None: pass

  def append(self, value:__area3d__.Area3D)->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:__area3d__.Area3D)->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:__area3d__.Area3D)->None: pass

  def erase(self, value:__area3d__.Area3D)->None: pass

  def front(self)->__area3d__.Area3D: pass

  def back(self)->__area3d__.Area3D: pass

  def pick_random(self)->__area3d__.Area3D: pass

  def find(self, what:__area3d__.Area3D, from_:int=0)->int: pass

  def rfind(self, what:__area3d__.Area3D, from_:int=-1)->int: pass

  def count(self, value:__area3d__.Area3D)->int: pass

  def has(self, value:__area3d__.Area3D)->bool: pass

  def pop_back(self)->__area3d__.Area3D: pass

  def pop_front(self)->__area3d__.Area3D: pass

  def pop_at(self, position:int)->__area3d__.Area3D: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:__area3d__.Area3D, before:bool=True)->int: pass

  def bsearch_custom(self, value:__area3d__.Area3D, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:__area3d__.Area3D=None)->__area3d__.Area3D: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->__area3d__.Area3D: pass

  def min(self)->__area3d__.Area3D: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->__area3d__.Area3D: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class GLTFSkeletonTypedArray():

  @staticmethod
  def constructor()->GLTFSkeletonTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.GLTFSkeletonTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.GLTFSkeletonTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.GLTFSkeletonTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.GLTFSkeletonTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.GLTFSkeletonTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.GLTFSkeletonTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.GLTFSkeletonTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.GLTFSkeletonTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.GLTFSkeletonTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.GLTFSkeletonTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.GLTFSkeletonTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.GLTFSkeletonTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.GLTFSkeletonTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->GLTFSkeletonTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:__gltfskeleton__.GLTFSkeleton)->None: pass

  def push_front(self, value:__gltfskeleton__.GLTFSkeleton)->None: pass

  def append(self, value:__gltfskeleton__.GLTFSkeleton)->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:__gltfskeleton__.GLTFSkeleton)->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:__gltfskeleton__.GLTFSkeleton)->None: pass

  def erase(self, value:__gltfskeleton__.GLTFSkeleton)->None: pass

  def front(self)->__gltfskeleton__.GLTFSkeleton: pass

  def back(self)->__gltfskeleton__.GLTFSkeleton: pass

  def pick_random(self)->__gltfskeleton__.GLTFSkeleton: pass

  def find(self, what:__gltfskeleton__.GLTFSkeleton, from_:int=0)->int: pass

  def rfind(self, what:__gltfskeleton__.GLTFSkeleton, from_:int=-1)->int: pass

  def count(self, value:__gltfskeleton__.GLTFSkeleton)->int: pass

  def has(self, value:__gltfskeleton__.GLTFSkeleton)->bool: pass

  def pop_back(self)->__gltfskeleton__.GLTFSkeleton: pass

  def pop_front(self)->__gltfskeleton__.GLTFSkeleton: pass

  def pop_at(self, position:int)->__gltfskeleton__.GLTFSkeleton: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:__gltfskeleton__.GLTFSkeleton, before:bool=True)->int: pass

  def bsearch_custom(self, value:__gltfskeleton__.GLTFSkeleton, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:__gltfskeleton__.GLTFSkeleton=None)->__gltfskeleton__.GLTFSkeleton: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->__gltfskeleton__.GLTFSkeleton: pass

  def min(self)->__gltfskeleton__.GLTFSkeleton: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->__gltfskeleton__.GLTFSkeleton: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class ImageTypedArray():

  @staticmethod
  def constructor()->ImageTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.ImageTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.ImageTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.ImageTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.ImageTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.ImageTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.ImageTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.ImageTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.ImageTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.ImageTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.ImageTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.ImageTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.ImageTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.ImageTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->ImageTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:__image__.Image)->None: pass

  def push_front(self, value:__image__.Image)->None: pass

  def append(self, value:__image__.Image)->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:__image__.Image)->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:__image__.Image)->None: pass

  def erase(self, value:__image__.Image)->None: pass

  def front(self)->__image__.Image: pass

  def back(self)->__image__.Image: pass

  def pick_random(self)->__image__.Image: pass

  def find(self, what:__image__.Image, from_:int=0)->int: pass

  def rfind(self, what:__image__.Image, from_:int=-1)->int: pass

  def count(self, value:__image__.Image)->int: pass

  def has(self, value:__image__.Image)->bool: pass

  def pop_back(self)->__image__.Image: pass

  def pop_front(self)->__image__.Image: pass

  def pop_at(self, position:int)->__image__.Image: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:__image__.Image, before:bool=True)->int: pass

  def bsearch_custom(self, value:__image__.Image, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:__image__.Image=None)->__image__.Image: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->__image__.Image: pass

  def min(self)->__image__.Image: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->__image__.Image: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class ScriptEditorBaseTypedArray():

  @staticmethod
  def constructor()->ScriptEditorBaseTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.ScriptEditorBaseTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.ScriptEditorBaseTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.ScriptEditorBaseTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.ScriptEditorBaseTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.ScriptEditorBaseTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.ScriptEditorBaseTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.ScriptEditorBaseTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.ScriptEditorBaseTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.ScriptEditorBaseTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.ScriptEditorBaseTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.ScriptEditorBaseTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.ScriptEditorBaseTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.ScriptEditorBaseTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->ScriptEditorBaseTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:__scripteditorbase__.ScriptEditorBase)->None: pass

  def push_front(self, value:__scripteditorbase__.ScriptEditorBase)->None: pass

  def append(self, value:__scripteditorbase__.ScriptEditorBase)->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:__scripteditorbase__.ScriptEditorBase)->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:__scripteditorbase__.ScriptEditorBase)->None: pass

  def erase(self, value:__scripteditorbase__.ScriptEditorBase)->None: pass

  def front(self)->__scripteditorbase__.ScriptEditorBase: pass

  def back(self)->__scripteditorbase__.ScriptEditorBase: pass

  def pick_random(self)->__scripteditorbase__.ScriptEditorBase: pass

  def find(self, what:__scripteditorbase__.ScriptEditorBase, from_:int=0)->int: pass

  def rfind(self, what:__scripteditorbase__.ScriptEditorBase, from_:int=-1)->int: pass

  def count(self, value:__scripteditorbase__.ScriptEditorBase)->int: pass

  def has(self, value:__scripteditorbase__.ScriptEditorBase)->bool: pass

  def pop_back(self)->__scripteditorbase__.ScriptEditorBase: pass

  def pop_front(self)->__scripteditorbase__.ScriptEditorBase: pass

  def pop_at(self, position:int)->__scripteditorbase__.ScriptEditorBase: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:__scripteditorbase__.ScriptEditorBase, before:bool=True)->int: pass

  def bsearch_custom(self, value:__scripteditorbase__.ScriptEditorBase, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:__scripteditorbase__.ScriptEditorBase=None)->__scripteditorbase__.ScriptEditorBase: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->__scripteditorbase__.ScriptEditorBase: pass

  def min(self)->__scripteditorbase__.ScriptEditorBase: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->__scripteditorbase__.ScriptEditorBase: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class CompositorEffectTypedArray():

  @staticmethod
  def constructor()->CompositorEffectTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.CompositorEffectTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.CompositorEffectTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.CompositorEffectTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.CompositorEffectTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.CompositorEffectTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.CompositorEffectTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.CompositorEffectTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.CompositorEffectTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.CompositorEffectTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.CompositorEffectTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.CompositorEffectTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.CompositorEffectTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.CompositorEffectTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->CompositorEffectTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:__compositoreffect__.CompositorEffect)->None: pass

  def push_front(self, value:__compositoreffect__.CompositorEffect)->None: pass

  def append(self, value:__compositoreffect__.CompositorEffect)->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:__compositoreffect__.CompositorEffect)->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:__compositoreffect__.CompositorEffect)->None: pass

  def erase(self, value:__compositoreffect__.CompositorEffect)->None: pass

  def front(self)->__compositoreffect__.CompositorEffect: pass

  def back(self)->__compositoreffect__.CompositorEffect: pass

  def pick_random(self)->__compositoreffect__.CompositorEffect: pass

  def find(self, what:__compositoreffect__.CompositorEffect, from_:int=0)->int: pass

  def rfind(self, what:__compositoreffect__.CompositorEffect, from_:int=-1)->int: pass

  def count(self, value:__compositoreffect__.CompositorEffect)->int: pass

  def has(self, value:__compositoreffect__.CompositorEffect)->bool: pass

  def pop_back(self)->__compositoreffect__.CompositorEffect: pass

  def pop_front(self)->__compositoreffect__.CompositorEffect: pass

  def pop_at(self, position:int)->__compositoreffect__.CompositorEffect: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:__compositoreffect__.CompositorEffect, before:bool=True)->int: pass

  def bsearch_custom(self, value:__compositoreffect__.CompositorEffect, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:__compositoreffect__.CompositorEffect=None)->__compositoreffect__.CompositorEffect: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->__compositoreffect__.CompositorEffect: pass

  def min(self)->__compositoreffect__.CompositorEffect: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->__compositoreffect__.CompositorEffect: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class TextureLayeredTypedArray():

  @staticmethod
  def constructor()->TextureLayeredTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.TextureLayeredTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.TextureLayeredTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.TextureLayeredTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.TextureLayeredTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.TextureLayeredTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.TextureLayeredTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.TextureLayeredTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.TextureLayeredTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.TextureLayeredTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.TextureLayeredTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.TextureLayeredTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.TextureLayeredTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.TextureLayeredTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->TextureLayeredTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:__texturelayered__.TextureLayered)->None: pass

  def push_front(self, value:__texturelayered__.TextureLayered)->None: pass

  def append(self, value:__texturelayered__.TextureLayered)->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:__texturelayered__.TextureLayered)->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:__texturelayered__.TextureLayered)->None: pass

  def erase(self, value:__texturelayered__.TextureLayered)->None: pass

  def front(self)->__texturelayered__.TextureLayered: pass

  def back(self)->__texturelayered__.TextureLayered: pass

  def pick_random(self)->__texturelayered__.TextureLayered: pass

  def find(self, what:__texturelayered__.TextureLayered, from_:int=0)->int: pass

  def rfind(self, what:__texturelayered__.TextureLayered, from_:int=-1)->int: pass

  def count(self, value:__texturelayered__.TextureLayered)->int: pass

  def has(self, value:__texturelayered__.TextureLayered)->bool: pass

  def pop_back(self)->__texturelayered__.TextureLayered: pass

  def pop_front(self)->__texturelayered__.TextureLayered: pass

  def pop_at(self, position:int)->__texturelayered__.TextureLayered: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:__texturelayered__.TextureLayered, before:bool=True)->int: pass

  def bsearch_custom(self, value:__texturelayered__.TextureLayered, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:__texturelayered__.TextureLayered=None)->__texturelayered__.TextureLayered: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->__texturelayered__.TextureLayered: pass

  def min(self)->__texturelayered__.TextureLayered: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->__texturelayered__.TextureLayered: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class RegExMatchTypedArray():

  @staticmethod
  def constructor()->RegExMatchTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.RegExMatchTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.RegExMatchTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.RegExMatchTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.RegExMatchTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.RegExMatchTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.RegExMatchTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.RegExMatchTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.RegExMatchTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.RegExMatchTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.RegExMatchTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.RegExMatchTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.RegExMatchTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.RegExMatchTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->RegExMatchTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:__regexmatch__.RegExMatch)->None: pass

  def push_front(self, value:__regexmatch__.RegExMatch)->None: pass

  def append(self, value:__regexmatch__.RegExMatch)->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:__regexmatch__.RegExMatch)->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:__regexmatch__.RegExMatch)->None: pass

  def erase(self, value:__regexmatch__.RegExMatch)->None: pass

  def front(self)->__regexmatch__.RegExMatch: pass

  def back(self)->__regexmatch__.RegExMatch: pass

  def pick_random(self)->__regexmatch__.RegExMatch: pass

  def find(self, what:__regexmatch__.RegExMatch, from_:int=0)->int: pass

  def rfind(self, what:__regexmatch__.RegExMatch, from_:int=-1)->int: pass

  def count(self, value:__regexmatch__.RegExMatch)->int: pass

  def has(self, value:__regexmatch__.RegExMatch)->bool: pass

  def pop_back(self)->__regexmatch__.RegExMatch: pass

  def pop_front(self)->__regexmatch__.RegExMatch: pass

  def pop_at(self, position:int)->__regexmatch__.RegExMatch: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:__regexmatch__.RegExMatch, before:bool=True)->int: pass

  def bsearch_custom(self, value:__regexmatch__.RegExMatch, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:__regexmatch__.RegExMatch=None)->__regexmatch__.RegExMatch: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->__regexmatch__.RegExMatch: pass

  def min(self)->__regexmatch__.RegExMatch: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->__regexmatch__.RegExMatch: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class GLTFCameraTypedArray():

  @staticmethod
  def constructor()->GLTFCameraTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.GLTFCameraTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.GLTFCameraTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.GLTFCameraTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.GLTFCameraTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.GLTFCameraTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.GLTFCameraTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.GLTFCameraTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.GLTFCameraTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.GLTFCameraTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.GLTFCameraTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.GLTFCameraTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.GLTFCameraTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.GLTFCameraTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->GLTFCameraTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:__gltfcamera__.GLTFCamera)->None: pass

  def push_front(self, value:__gltfcamera__.GLTFCamera)->None: pass

  def append(self, value:__gltfcamera__.GLTFCamera)->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:__gltfcamera__.GLTFCamera)->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:__gltfcamera__.GLTFCamera)->None: pass

  def erase(self, value:__gltfcamera__.GLTFCamera)->None: pass

  def front(self)->__gltfcamera__.GLTFCamera: pass

  def back(self)->__gltfcamera__.GLTFCamera: pass

  def pick_random(self)->__gltfcamera__.GLTFCamera: pass

  def find(self, what:__gltfcamera__.GLTFCamera, from_:int=0)->int: pass

  def rfind(self, what:__gltfcamera__.GLTFCamera, from_:int=-1)->int: pass

  def count(self, value:__gltfcamera__.GLTFCamera)->int: pass

  def has(self, value:__gltfcamera__.GLTFCamera)->bool: pass

  def pop_back(self)->__gltfcamera__.GLTFCamera: pass

  def pop_front(self)->__gltfcamera__.GLTFCamera: pass

  def pop_at(self, position:int)->__gltfcamera__.GLTFCamera: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:__gltfcamera__.GLTFCamera, before:bool=True)->int: pass

  def bsearch_custom(self, value:__gltfcamera__.GLTFCamera, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:__gltfcamera__.GLTFCamera=None)->__gltfcamera__.GLTFCamera: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->__gltfcamera__.GLTFCamera: pass

  def min(self)->__gltfcamera__.GLTFCamera: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->__gltfcamera__.GLTFCamera: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class PhysicsBody3DTypedArray():

  @staticmethod
  def constructor()->PhysicsBody3DTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.PhysicsBody3DTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.PhysicsBody3DTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.PhysicsBody3DTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.PhysicsBody3DTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.PhysicsBody3DTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.PhysicsBody3DTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.PhysicsBody3DTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.PhysicsBody3DTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.PhysicsBody3DTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.PhysicsBody3DTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.PhysicsBody3DTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.PhysicsBody3DTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.PhysicsBody3DTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->PhysicsBody3DTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:__physicsbody3d__.PhysicsBody3D)->None: pass

  def push_front(self, value:__physicsbody3d__.PhysicsBody3D)->None: pass

  def append(self, value:__physicsbody3d__.PhysicsBody3D)->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:__physicsbody3d__.PhysicsBody3D)->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:__physicsbody3d__.PhysicsBody3D)->None: pass

  def erase(self, value:__physicsbody3d__.PhysicsBody3D)->None: pass

  def front(self)->__physicsbody3d__.PhysicsBody3D: pass

  def back(self)->__physicsbody3d__.PhysicsBody3D: pass

  def pick_random(self)->__physicsbody3d__.PhysicsBody3D: pass

  def find(self, what:__physicsbody3d__.PhysicsBody3D, from_:int=0)->int: pass

  def rfind(self, what:__physicsbody3d__.PhysicsBody3D, from_:int=-1)->int: pass

  def count(self, value:__physicsbody3d__.PhysicsBody3D)->int: pass

  def has(self, value:__physicsbody3d__.PhysicsBody3D)->bool: pass

  def pop_back(self)->__physicsbody3d__.PhysicsBody3D: pass

  def pop_front(self)->__physicsbody3d__.PhysicsBody3D: pass

  def pop_at(self, position:int)->__physicsbody3d__.PhysicsBody3D: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:__physicsbody3d__.PhysicsBody3D, before:bool=True)->int: pass

  def bsearch_custom(self, value:__physicsbody3d__.PhysicsBody3D, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:__physicsbody3d__.PhysicsBody3D=None)->__physicsbody3d__.PhysicsBody3D: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->__physicsbody3d__.PhysicsBody3D: pass

  def min(self)->__physicsbody3d__.PhysicsBody3D: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->__physicsbody3d__.PhysicsBody3D: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class Rect2TypedArray():

  @staticmethod
  def constructor()->Rect2TypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.Rect2TypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.Rect2TypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.Rect2TypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.Rect2TypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.Rect2TypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.Rect2TypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.Rect2TypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.Rect2TypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.Rect2TypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.Rect2TypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.Rect2TypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.Rect2TypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.Rect2TypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->Rect2TypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:{'Rect2'})->None: pass

  def push_front(self, value:{'Rect2'})->None: pass

  def append(self, value:{'Rect2'})->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:{'Rect2'})->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:{'Rect2'})->None: pass

  def erase(self, value:{'Rect2'})->None: pass

  def front(self)->{'Rect2'}: pass

  def back(self)->{'Rect2'}: pass

  def pick_random(self)->{'Rect2'}: pass

  def find(self, what:{'Rect2'}, from_:int=0)->int: pass

  def rfind(self, what:{'Rect2'}, from_:int=-1)->int: pass

  def count(self, value:{'Rect2'})->int: pass

  def has(self, value:{'Rect2'})->bool: pass

  def pop_back(self)->{'Rect2'}: pass

  def pop_front(self)->{'Rect2'}: pass

  def pop_at(self, position:int)->{'Rect2'}: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:{'Rect2'}, before:bool=True)->int: pass

  def bsearch_custom(self, value:{'Rect2'}, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:{'Rect2'}=None)->{'Rect2'}: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->{'Rect2'}: pass

  def min(self)->{'Rect2'}: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->{'Rect2'}: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class TreeItemTypedArray():

  @staticmethod
  def constructor()->TreeItemTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.TreeItemTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.TreeItemTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.TreeItemTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.TreeItemTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.TreeItemTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.TreeItemTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.TreeItemTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.TreeItemTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.TreeItemTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.TreeItemTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.TreeItemTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.TreeItemTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.TreeItemTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->TreeItemTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:__treeitem__.TreeItem)->None: pass

  def push_front(self, value:__treeitem__.TreeItem)->None: pass

  def append(self, value:__treeitem__.TreeItem)->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:__treeitem__.TreeItem)->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:__treeitem__.TreeItem)->None: pass

  def erase(self, value:__treeitem__.TreeItem)->None: pass

  def front(self)->__treeitem__.TreeItem: pass

  def back(self)->__treeitem__.TreeItem: pass

  def pick_random(self)->__treeitem__.TreeItem: pass

  def find(self, what:__treeitem__.TreeItem, from_:int=0)->int: pass

  def rfind(self, what:__treeitem__.TreeItem, from_:int=-1)->int: pass

  def count(self, value:__treeitem__.TreeItem)->int: pass

  def has(self, value:__treeitem__.TreeItem)->bool: pass

  def pop_back(self)->__treeitem__.TreeItem: pass

  def pop_front(self)->__treeitem__.TreeItem: pass

  def pop_at(self, position:int)->__treeitem__.TreeItem: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:__treeitem__.TreeItem, before:bool=True)->int: pass

  def bsearch_custom(self, value:__treeitem__.TreeItem, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:__treeitem__.TreeItem=None)->__treeitem__.TreeItem: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->__treeitem__.TreeItem: pass

  def min(self)->__treeitem__.TreeItem: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->__treeitem__.TreeItem: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class GLTFMeshTypedArray():

  @staticmethod
  def constructor()->GLTFMeshTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.GLTFMeshTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.GLTFMeshTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.GLTFMeshTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.GLTFMeshTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.GLTFMeshTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.GLTFMeshTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.GLTFMeshTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.GLTFMeshTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.GLTFMeshTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.GLTFMeshTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.GLTFMeshTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.GLTFMeshTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.GLTFMeshTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->GLTFMeshTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:__gltfmesh__.GLTFMesh)->None: pass

  def push_front(self, value:__gltfmesh__.GLTFMesh)->None: pass

  def append(self, value:__gltfmesh__.GLTFMesh)->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:__gltfmesh__.GLTFMesh)->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:__gltfmesh__.GLTFMesh)->None: pass

  def erase(self, value:__gltfmesh__.GLTFMesh)->None: pass

  def front(self)->__gltfmesh__.GLTFMesh: pass

  def back(self)->__gltfmesh__.GLTFMesh: pass

  def pick_random(self)->__gltfmesh__.GLTFMesh: pass

  def find(self, what:__gltfmesh__.GLTFMesh, from_:int=0)->int: pass

  def rfind(self, what:__gltfmesh__.GLTFMesh, from_:int=-1)->int: pass

  def count(self, value:__gltfmesh__.GLTFMesh)->int: pass

  def has(self, value:__gltfmesh__.GLTFMesh)->bool: pass

  def pop_back(self)->__gltfmesh__.GLTFMesh: pass

  def pop_front(self)->__gltfmesh__.GLTFMesh: pass

  def pop_at(self, position:int)->__gltfmesh__.GLTFMesh: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:__gltfmesh__.GLTFMesh, before:bool=True)->int: pass

  def bsearch_custom(self, value:__gltfmesh__.GLTFMesh, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:__gltfmesh__.GLTFMesh=None)->__gltfmesh__.GLTFMesh: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->__gltfmesh__.GLTFMesh: pass

  def min(self)->__gltfmesh__.GLTFMesh: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->__gltfmesh__.GLTFMesh: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class Vector2iTypedArray():

  @staticmethod
  def constructor()->Vector2iTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.Vector2iTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.Vector2iTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.Vector2iTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.Vector2iTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.Vector2iTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.Vector2iTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.Vector2iTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.Vector2iTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.Vector2iTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.Vector2iTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.Vector2iTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.Vector2iTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.Vector2iTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->Vector2iTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:{'Vector2i'})->None: pass

  def push_front(self, value:{'Vector2i'})->None: pass

  def append(self, value:{'Vector2i'})->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:{'Vector2i'})->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:{'Vector2i'})->None: pass

  def erase(self, value:{'Vector2i'})->None: pass

  def front(self)->{'Vector2i'}: pass

  def back(self)->{'Vector2i'}: pass

  def pick_random(self)->{'Vector2i'}: pass

  def find(self, what:{'Vector2i'}, from_:int=0)->int: pass

  def rfind(self, what:{'Vector2i'}, from_:int=-1)->int: pass

  def count(self, value:{'Vector2i'})->int: pass

  def has(self, value:{'Vector2i'})->bool: pass

  def pop_back(self)->{'Vector2i'}: pass

  def pop_front(self)->{'Vector2i'}: pass

  def pop_at(self, position:int)->{'Vector2i'}: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:{'Vector2i'}, before:bool=True)->int: pass

  def bsearch_custom(self, value:{'Vector2i'}, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:{'Vector2i'}=None)->{'Vector2i'}: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->{'Vector2i'}: pass

  def min(self)->{'Vector2i'}: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->{'Vector2i'}: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class Transform3DTypedArray():

  @staticmethod
  def constructor()->Transform3DTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.Transform3DTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.Transform3DTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.Transform3DTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.Transform3DTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.Transform3DTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.Transform3DTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.Transform3DTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.Transform3DTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.Transform3DTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.Transform3DTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.Transform3DTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.Transform3DTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.Transform3DTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->Transform3DTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:{'Transform3D'})->None: pass

  def push_front(self, value:{'Transform3D'})->None: pass

  def append(self, value:{'Transform3D'})->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:{'Transform3D'})->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:{'Transform3D'})->None: pass

  def erase(self, value:{'Transform3D'})->None: pass

  def front(self)->{'Transform3D'}: pass

  def back(self)->{'Transform3D'}: pass

  def pick_random(self)->{'Transform3D'}: pass

  def find(self, what:{'Transform3D'}, from_:int=0)->int: pass

  def rfind(self, what:{'Transform3D'}, from_:int=-1)->int: pass

  def count(self, value:{'Transform3D'})->int: pass

  def has(self, value:{'Transform3D'})->bool: pass

  def pop_back(self)->{'Transform3D'}: pass

  def pop_front(self)->{'Transform3D'}: pass

  def pop_at(self, position:int)->{'Transform3D'}: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:{'Transform3D'}, before:bool=True)->int: pass

  def bsearch_custom(self, value:{'Transform3D'}, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:{'Transform3D'}=None)->{'Transform3D'}: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->{'Transform3D'}: pass

  def min(self)->{'Transform3D'}: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->{'Transform3D'}: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class GLTFAnimationTypedArray():

  @staticmethod
  def constructor()->GLTFAnimationTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.GLTFAnimationTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.GLTFAnimationTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.GLTFAnimationTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.GLTFAnimationTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.GLTFAnimationTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.GLTFAnimationTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.GLTFAnimationTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.GLTFAnimationTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.GLTFAnimationTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.GLTFAnimationTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.GLTFAnimationTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.GLTFAnimationTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.GLTFAnimationTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->GLTFAnimationTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:__gltfanimation__.GLTFAnimation)->None: pass

  def push_front(self, value:__gltfanimation__.GLTFAnimation)->None: pass

  def append(self, value:__gltfanimation__.GLTFAnimation)->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:__gltfanimation__.GLTFAnimation)->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:__gltfanimation__.GLTFAnimation)->None: pass

  def erase(self, value:__gltfanimation__.GLTFAnimation)->None: pass

  def front(self)->__gltfanimation__.GLTFAnimation: pass

  def back(self)->__gltfanimation__.GLTFAnimation: pass

  def pick_random(self)->__gltfanimation__.GLTFAnimation: pass

  def find(self, what:__gltfanimation__.GLTFAnimation, from_:int=0)->int: pass

  def rfind(self, what:__gltfanimation__.GLTFAnimation, from_:int=-1)->int: pass

  def count(self, value:__gltfanimation__.GLTFAnimation)->int: pass

  def has(self, value:__gltfanimation__.GLTFAnimation)->bool: pass

  def pop_back(self)->__gltfanimation__.GLTFAnimation: pass

  def pop_front(self)->__gltfanimation__.GLTFAnimation: pass

  def pop_at(self, position:int)->__gltfanimation__.GLTFAnimation: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:__gltfanimation__.GLTFAnimation, before:bool=True)->int: pass

  def bsearch_custom(self, value:__gltfanimation__.GLTFAnimation, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:__gltfanimation__.GLTFAnimation=None)->__gltfanimation__.GLTFAnimation: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->__gltfanimation__.GLTFAnimation: pass

  def min(self)->__gltfanimation__.GLTFAnimation: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->__gltfanimation__.GLTFAnimation: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class PhysicsBody2DTypedArray():

  @staticmethod
  def constructor()->PhysicsBody2DTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.PhysicsBody2DTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.PhysicsBody2DTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.PhysicsBody2DTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.PhysicsBody2DTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.PhysicsBody2DTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.PhysicsBody2DTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.PhysicsBody2DTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.PhysicsBody2DTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.PhysicsBody2DTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.PhysicsBody2DTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.PhysicsBody2DTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.PhysicsBody2DTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.PhysicsBody2DTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->PhysicsBody2DTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:__physicsbody2d__.PhysicsBody2D)->None: pass

  def push_front(self, value:__physicsbody2d__.PhysicsBody2D)->None: pass

  def append(self, value:__physicsbody2d__.PhysicsBody2D)->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:__physicsbody2d__.PhysicsBody2D)->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:__physicsbody2d__.PhysicsBody2D)->None: pass

  def erase(self, value:__physicsbody2d__.PhysicsBody2D)->None: pass

  def front(self)->__physicsbody2d__.PhysicsBody2D: pass

  def back(self)->__physicsbody2d__.PhysicsBody2D: pass

  def pick_random(self)->__physicsbody2d__.PhysicsBody2D: pass

  def find(self, what:__physicsbody2d__.PhysicsBody2D, from_:int=0)->int: pass

  def rfind(self, what:__physicsbody2d__.PhysicsBody2D, from_:int=-1)->int: pass

  def count(self, value:__physicsbody2d__.PhysicsBody2D)->int: pass

  def has(self, value:__physicsbody2d__.PhysicsBody2D)->bool: pass

  def pop_back(self)->__physicsbody2d__.PhysicsBody2D: pass

  def pop_front(self)->__physicsbody2d__.PhysicsBody2D: pass

  def pop_at(self, position:int)->__physicsbody2d__.PhysicsBody2D: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:__physicsbody2d__.PhysicsBody2D, before:bool=True)->int: pass

  def bsearch_custom(self, value:__physicsbody2d__.PhysicsBody2D, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:__physicsbody2d__.PhysicsBody2D=None)->__physicsbody2d__.PhysicsBody2D: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->__physicsbody2d__.PhysicsBody2D: pass

  def min(self)->__physicsbody2d__.PhysicsBody2D: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->__physicsbody2d__.PhysicsBody2D: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class intTypedArray():

  @staticmethod
  def constructor()->intTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.intTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.intTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.intTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.intTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.intTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.intTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.intTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.intTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.intTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.intTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.intTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.intTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.intTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->intTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:int)->None: pass

  def push_front(self, value:int)->None: pass

  def append(self, value:int)->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:int)->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:int)->None: pass

  def erase(self, value:int)->None: pass

  def front(self)->int: pass

  def back(self)->int: pass

  def pick_random(self)->int: pass

  def find(self, what:int, from_:int=0)->int: pass

  def rfind(self, what:int, from_:int=-1)->int: pass

  def count(self, value:int)->int: pass

  def has(self, value:int)->bool: pass

  def pop_back(self)->int: pass

  def pop_front(self)->int: pass

  def pop_at(self, position:int)->int: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:int, before:bool=True)->int: pass

  def bsearch_custom(self, value:int, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:int=None)->int: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->int: pass

  def min(self)->int: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->int: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class NodeTypedArray():

  @staticmethod
  def constructor()->NodeTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.NodeTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.NodeTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.NodeTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.NodeTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.NodeTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.NodeTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.NodeTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.NodeTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.NodeTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.NodeTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.NodeTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.NodeTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.NodeTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->NodeTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:__node__.Node)->None: pass

  def push_front(self, value:__node__.Node)->None: pass

  def append(self, value:__node__.Node)->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:__node__.Node)->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:__node__.Node)->None: pass

  def erase(self, value:__node__.Node)->None: pass

  def front(self)->__node__.Node: pass

  def back(self)->__node__.Node: pass

  def pick_random(self)->__node__.Node: pass

  def find(self, what:__node__.Node, from_:int=0)->int: pass

  def rfind(self, what:__node__.Node, from_:int=-1)->int: pass

  def count(self, value:__node__.Node)->int: pass

  def has(self, value:__node__.Node)->bool: pass

  def pop_back(self)->__node__.Node: pass

  def pop_front(self)->__node__.Node: pass

  def pop_at(self, position:int)->__node__.Node: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:__node__.Node, before:bool=True)->int: pass

  def bsearch_custom(self, value:__node__.Node, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:__node__.Node=None)->__node__.Node: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->__node__.Node: pass

  def min(self)->__node__.Node: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->__node__.Node: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class Texture2DTypedArray():

  @staticmethod
  def constructor()->Texture2DTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.Texture2DTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.Texture2DTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.Texture2DTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.Texture2DTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.Texture2DTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.Texture2DTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.Texture2DTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.Texture2DTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.Texture2DTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.Texture2DTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.Texture2DTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.Texture2DTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.Texture2DTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->Texture2DTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:__texture2d__.Texture2D)->None: pass

  def push_front(self, value:__texture2d__.Texture2D)->None: pass

  def append(self, value:__texture2d__.Texture2D)->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:__texture2d__.Texture2D)->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:__texture2d__.Texture2D)->None: pass

  def erase(self, value:__texture2d__.Texture2D)->None: pass

  def front(self)->__texture2d__.Texture2D: pass

  def back(self)->__texture2d__.Texture2D: pass

  def pick_random(self)->__texture2d__.Texture2D: pass

  def find(self, what:__texture2d__.Texture2D, from_:int=0)->int: pass

  def rfind(self, what:__texture2d__.Texture2D, from_:int=-1)->int: pass

  def count(self, value:__texture2d__.Texture2D)->int: pass

  def has(self, value:__texture2d__.Texture2D)->bool: pass

  def pop_back(self)->__texture2d__.Texture2D: pass

  def pop_front(self)->__texture2d__.Texture2D: pass

  def pop_at(self, position:int)->__texture2d__.Texture2D: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:__texture2d__.Texture2D, before:bool=True)->int: pass

  def bsearch_custom(self, value:__texture2d__.Texture2D, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:__texture2d__.Texture2D=None)->__texture2d__.Texture2D: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->__texture2d__.Texture2D: pass

  def min(self)->__texture2d__.Texture2D: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->__texture2d__.Texture2D: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class GLTFLightTypedArray():

  @staticmethod
  def constructor()->GLTFLightTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.GLTFLightTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.GLTFLightTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.GLTFLightTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.GLTFLightTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.GLTFLightTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.GLTFLightTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.GLTFLightTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.GLTFLightTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.GLTFLightTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.GLTFLightTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.GLTFLightTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.GLTFLightTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.GLTFLightTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->GLTFLightTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:__gltflight__.GLTFLight)->None: pass

  def push_front(self, value:__gltflight__.GLTFLight)->None: pass

  def append(self, value:__gltflight__.GLTFLight)->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:__gltflight__.GLTFLight)->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:__gltflight__.GLTFLight)->None: pass

  def erase(self, value:__gltflight__.GLTFLight)->None: pass

  def front(self)->__gltflight__.GLTFLight: pass

  def back(self)->__gltflight__.GLTFLight: pass

  def pick_random(self)->__gltflight__.GLTFLight: pass

  def find(self, what:__gltflight__.GLTFLight, from_:int=0)->int: pass

  def rfind(self, what:__gltflight__.GLTFLight, from_:int=-1)->int: pass

  def count(self, value:__gltflight__.GLTFLight)->int: pass

  def has(self, value:__gltflight__.GLTFLight)->bool: pass

  def pop_back(self)->__gltflight__.GLTFLight: pass

  def pop_front(self)->__gltflight__.GLTFLight: pass

  def pop_at(self, position:int)->__gltflight__.GLTFLight: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:__gltflight__.GLTFLight, before:bool=True)->int: pass

  def bsearch_custom(self, value:__gltflight__.GLTFLight, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:__gltflight__.GLTFLight=None)->__gltflight__.GLTFLight: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->__gltflight__.GLTFLight: pass

  def min(self)->__gltflight__.GLTFLight: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->__gltflight__.GLTFLight: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class StringNameTypedArray():

  @staticmethod
  def constructor()->StringNameTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.StringNameTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.StringNameTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.StringNameTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.StringNameTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.StringNameTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.StringNameTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.StringNameTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.StringNameTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.StringNameTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.StringNameTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.StringNameTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.StringNameTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.StringNameTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->StringNameTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:{'StringName'})->None: pass

  def push_front(self, value:{'StringName'})->None: pass

  def append(self, value:{'StringName'})->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:{'StringName'})->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:{'StringName'})->None: pass

  def erase(self, value:{'StringName'})->None: pass

  def front(self)->{'StringName'}: pass

  def back(self)->{'StringName'}: pass

  def pick_random(self)->{'StringName'}: pass

  def find(self, what:{'StringName'}, from_:int=0)->int: pass

  def rfind(self, what:{'StringName'}, from_:int=-1)->int: pass

  def count(self, value:{'StringName'})->int: pass

  def has(self, value:{'StringName'})->bool: pass

  def pop_back(self)->{'StringName'}: pass

  def pop_front(self)->{'StringName'}: pass

  def pop_at(self, position:int)->{'StringName'}: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:{'StringName'}, before:bool=True)->int: pass

  def bsearch_custom(self, value:{'StringName'}, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:{'StringName'}=None)->{'StringName'}: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->{'StringName'}: pass

  def min(self)->{'StringName'}: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->{'StringName'}: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class BaseButtonTypedArray():

  @staticmethod
  def constructor()->BaseButtonTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.BaseButtonTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.BaseButtonTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.BaseButtonTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.BaseButtonTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.BaseButtonTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.BaseButtonTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.BaseButtonTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.BaseButtonTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.BaseButtonTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.BaseButtonTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.BaseButtonTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.BaseButtonTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.BaseButtonTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->BaseButtonTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:__basebutton__.BaseButton)->None: pass

  def push_front(self, value:__basebutton__.BaseButton)->None: pass

  def append(self, value:__basebutton__.BaseButton)->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:__basebutton__.BaseButton)->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:__basebutton__.BaseButton)->None: pass

  def erase(self, value:__basebutton__.BaseButton)->None: pass

  def front(self)->__basebutton__.BaseButton: pass

  def back(self)->__basebutton__.BaseButton: pass

  def pick_random(self)->__basebutton__.BaseButton: pass

  def find(self, what:__basebutton__.BaseButton, from_:int=0)->int: pass

  def rfind(self, what:__basebutton__.BaseButton, from_:int=-1)->int: pass

  def count(self, value:__basebutton__.BaseButton)->int: pass

  def has(self, value:__basebutton__.BaseButton)->bool: pass

  def pop_back(self)->__basebutton__.BaseButton: pass

  def pop_front(self)->__basebutton__.BaseButton: pass

  def pop_at(self, position:int)->__basebutton__.BaseButton: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:__basebutton__.BaseButton, before:bool=True)->int: pass

  def bsearch_custom(self, value:__basebutton__.BaseButton, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:__basebutton__.BaseButton=None)->__basebutton__.BaseButton: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->__basebutton__.BaseButton: pass

  def min(self)->__basebutton__.BaseButton: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->__basebutton__.BaseButton: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class WindowTypedArray():

  @staticmethod
  def constructor()->WindowTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.WindowTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.WindowTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.WindowTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.WindowTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.WindowTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.WindowTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.WindowTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.WindowTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.WindowTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.WindowTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.WindowTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.WindowTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.WindowTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->WindowTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:__window__.Window)->None: pass

  def push_front(self, value:__window__.Window)->None: pass

  def append(self, value:__window__.Window)->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:__window__.Window)->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:__window__.Window)->None: pass

  def erase(self, value:__window__.Window)->None: pass

  def front(self)->__window__.Window: pass

  def back(self)->__window__.Window: pass

  def pick_random(self)->__window__.Window: pass

  def find(self, what:__window__.Window, from_:int=0)->int: pass

  def rfind(self, what:__window__.Window, from_:int=-1)->int: pass

  def count(self, value:__window__.Window)->int: pass

  def has(self, value:__window__.Window)->bool: pass

  def pop_back(self)->__window__.Window: pass

  def pop_front(self)->__window__.Window: pass

  def pop_at(self, position:int)->__window__.Window: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:__window__.Window, before:bool=True)->int: pass

  def bsearch_custom(self, value:__window__.Window, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:__window__.Window=None)->__window__.Window: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->__window__.Window: pass

  def min(self)->__window__.Window: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->__window__.Window: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class Node3DGizmoTypedArray():

  @staticmethod
  def constructor()->Node3DGizmoTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.Node3DGizmoTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.Node3DGizmoTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.Node3DGizmoTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.Node3DGizmoTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.Node3DGizmoTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.Node3DGizmoTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.Node3DGizmoTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.Node3DGizmoTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.Node3DGizmoTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.Node3DGizmoTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.Node3DGizmoTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.Node3DGizmoTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.Node3DGizmoTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->Node3DGizmoTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:__node3dgizmo__.Node3DGizmo)->None: pass

  def push_front(self, value:__node3dgizmo__.Node3DGizmo)->None: pass

  def append(self, value:__node3dgizmo__.Node3DGizmo)->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:__node3dgizmo__.Node3DGizmo)->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:__node3dgizmo__.Node3DGizmo)->None: pass

  def erase(self, value:__node3dgizmo__.Node3DGizmo)->None: pass

  def front(self)->__node3dgizmo__.Node3DGizmo: pass

  def back(self)->__node3dgizmo__.Node3DGizmo: pass

  def pick_random(self)->__node3dgizmo__.Node3DGizmo: pass

  def find(self, what:__node3dgizmo__.Node3DGizmo, from_:int=0)->int: pass

  def rfind(self, what:__node3dgizmo__.Node3DGizmo, from_:int=-1)->int: pass

  def count(self, value:__node3dgizmo__.Node3DGizmo)->int: pass

  def has(self, value:__node3dgizmo__.Node3DGizmo)->bool: pass

  def pop_back(self)->__node3dgizmo__.Node3DGizmo: pass

  def pop_front(self)->__node3dgizmo__.Node3DGizmo: pass

  def pop_at(self, position:int)->__node3dgizmo__.Node3DGizmo: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:__node3dgizmo__.Node3DGizmo, before:bool=True)->int: pass

  def bsearch_custom(self, value:__node3dgizmo__.Node3DGizmo, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:__node3dgizmo__.Node3DGizmo=None)->__node3dgizmo__.Node3DGizmo: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->__node3dgizmo__.Node3DGizmo: pass

  def min(self)->__node3dgizmo__.Node3DGizmo: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->__node3dgizmo__.Node3DGizmo: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class RIDTypedArray():

  @staticmethod
  def constructor()->RIDTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.RIDTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.RIDTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.RIDTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.RIDTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.RIDTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.RIDTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.RIDTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.RIDTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.RIDTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.RIDTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.RIDTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.RIDTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.RIDTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->RIDTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:{'RID'})->None: pass

  def push_front(self, value:{'RID'})->None: pass

  def append(self, value:{'RID'})->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:{'RID'})->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:{'RID'})->None: pass

  def erase(self, value:{'RID'})->None: pass

  def front(self)->{'RID'}: pass

  def back(self)->{'RID'}: pass

  def pick_random(self)->{'RID'}: pass

  def find(self, what:{'RID'}, from_:int=0)->int: pass

  def rfind(self, what:{'RID'}, from_:int=-1)->int: pass

  def count(self, value:{'RID'})->int: pass

  def has(self, value:{'RID'})->bool: pass

  def pop_back(self)->{'RID'}: pass

  def pop_front(self)->{'RID'}: pass

  def pop_at(self, position:int)->{'RID'}: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:{'RID'}, before:bool=True)->int: pass

  def bsearch_custom(self, value:{'RID'}, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:{'RID'}=None)->{'RID'}: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->{'RID'}: pass

  def min(self)->{'RID'}: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->{'RID'}: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class CameraFeedTypedArray():

  @staticmethod
  def constructor()->CameraFeedTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.CameraFeedTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.CameraFeedTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.CameraFeedTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.CameraFeedTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.CameraFeedTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.CameraFeedTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.CameraFeedTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.CameraFeedTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.CameraFeedTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.CameraFeedTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.CameraFeedTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.CameraFeedTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.CameraFeedTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->CameraFeedTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:__camerafeed__.CameraFeed)->None: pass

  def push_front(self, value:__camerafeed__.CameraFeed)->None: pass

  def append(self, value:__camerafeed__.CameraFeed)->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:__camerafeed__.CameraFeed)->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:__camerafeed__.CameraFeed)->None: pass

  def erase(self, value:__camerafeed__.CameraFeed)->None: pass

  def front(self)->__camerafeed__.CameraFeed: pass

  def back(self)->__camerafeed__.CameraFeed: pass

  def pick_random(self)->__camerafeed__.CameraFeed: pass

  def find(self, what:__camerafeed__.CameraFeed, from_:int=0)->int: pass

  def rfind(self, what:__camerafeed__.CameraFeed, from_:int=-1)->int: pass

  def count(self, value:__camerafeed__.CameraFeed)->int: pass

  def has(self, value:__camerafeed__.CameraFeed)->bool: pass

  def pop_back(self)->__camerafeed__.CameraFeed: pass

  def pop_front(self)->__camerafeed__.CameraFeed: pass

  def pop_at(self, position:int)->__camerafeed__.CameraFeed: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:__camerafeed__.CameraFeed, before:bool=True)->int: pass

  def bsearch_custom(self, value:__camerafeed__.CameraFeed, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:__camerafeed__.CameraFeed=None)->__camerafeed__.CameraFeed: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->__camerafeed__.CameraFeed: pass

  def min(self)->__camerafeed__.CameraFeed: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->__camerafeed__.CameraFeed: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class InputEventTypedArray():

  @staticmethod
  def constructor()->InputEventTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.InputEventTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.InputEventTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.InputEventTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.InputEventTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.InputEventTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.InputEventTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.InputEventTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.InputEventTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.InputEventTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.InputEventTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.InputEventTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.InputEventTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.InputEventTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->InputEventTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:__inputevent__.InputEvent)->None: pass

  def push_front(self, value:__inputevent__.InputEvent)->None: pass

  def append(self, value:__inputevent__.InputEvent)->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:__inputevent__.InputEvent)->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:__inputevent__.InputEvent)->None: pass

  def erase(self, value:__inputevent__.InputEvent)->None: pass

  def front(self)->__inputevent__.InputEvent: pass

  def back(self)->__inputevent__.InputEvent: pass

  def pick_random(self)->__inputevent__.InputEvent: pass

  def find(self, what:__inputevent__.InputEvent, from_:int=0)->int: pass

  def rfind(self, what:__inputevent__.InputEvent, from_:int=-1)->int: pass

  def count(self, value:__inputevent__.InputEvent)->int: pass

  def has(self, value:__inputevent__.InputEvent)->bool: pass

  def pop_back(self)->__inputevent__.InputEvent: pass

  def pop_front(self)->__inputevent__.InputEvent: pass

  def pop_at(self, position:int)->__inputevent__.InputEvent: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:__inputevent__.InputEvent, before:bool=True)->int: pass

  def bsearch_custom(self, value:__inputevent__.InputEvent, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:__inputevent__.InputEvent=None)->__inputevent__.InputEvent: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->__inputevent__.InputEvent: pass

  def min(self)->__inputevent__.InputEvent: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->__inputevent__.InputEvent: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class FontTypedArray():

  @staticmethod
  def constructor()->FontTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.FontTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.FontTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.FontTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.FontTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.FontTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.FontTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.FontTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.FontTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.FontTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.FontTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.FontTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.FontTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.FontTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->FontTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:__font__.Font)->None: pass

  def push_front(self, value:__font__.Font)->None: pass

  def append(self, value:__font__.Font)->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:__font__.Font)->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:__font__.Font)->None: pass

  def erase(self, value:__font__.Font)->None: pass

  def front(self)->__font__.Font: pass

  def back(self)->__font__.Font: pass

  def pick_random(self)->__font__.Font: pass

  def find(self, what:__font__.Font, from_:int=0)->int: pass

  def rfind(self, what:__font__.Font, from_:int=-1)->int: pass

  def count(self, value:__font__.Font)->int: pass

  def has(self, value:__font__.Font)->bool: pass

  def pop_back(self)->__font__.Font: pass

  def pop_front(self)->__font__.Font: pass

  def pop_at(self, position:int)->__font__.Font: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:__font__.Font, before:bool=True)->int: pass

  def bsearch_custom(self, value:__font__.Font, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:__font__.Font=None)->__font__.Font: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->__font__.Font: pass

  def min(self)->__font__.Font: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->__font__.Font: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class MaterialTypedArray():

  @staticmethod
  def constructor()->MaterialTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.MaterialTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.MaterialTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.MaterialTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.MaterialTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.MaterialTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.MaterialTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.MaterialTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.MaterialTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.MaterialTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.MaterialTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.MaterialTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.MaterialTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.MaterialTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->MaterialTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:__material__.Material)->None: pass

  def push_front(self, value:__material__.Material)->None: pass

  def append(self, value:__material__.Material)->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:__material__.Material)->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:__material__.Material)->None: pass

  def erase(self, value:__material__.Material)->None: pass

  def front(self)->__material__.Material: pass

  def back(self)->__material__.Material: pass

  def pick_random(self)->__material__.Material: pass

  def find(self, what:__material__.Material, from_:int=0)->int: pass

  def rfind(self, what:__material__.Material, from_:int=-1)->int: pass

  def count(self, value:__material__.Material)->int: pass

  def has(self, value:__material__.Material)->bool: pass

  def pop_back(self)->__material__.Material: pass

  def pop_front(self)->__material__.Material: pass

  def pop_at(self, position:int)->__material__.Material: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:__material__.Material, before:bool=True)->int: pass

  def bsearch_custom(self, value:__material__.Material, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:__material__.Material=None)->__material__.Material: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->__material__.Material: pass

  def min(self)->__material__.Material: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->__material__.Material: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class DictionaryTypedArray():

  @staticmethod
  def constructor()->DictionaryTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.DictionaryTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.DictionaryTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.DictionaryTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.DictionaryTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.DictionaryTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.DictionaryTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.DictionaryTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.DictionaryTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.DictionaryTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.DictionaryTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.DictionaryTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.DictionaryTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.DictionaryTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->DictionaryTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:{'Dictionary'})->None: pass

  def push_front(self, value:{'Dictionary'})->None: pass

  def append(self, value:{'Dictionary'})->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:{'Dictionary'})->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:{'Dictionary'})->None: pass

  def erase(self, value:{'Dictionary'})->None: pass

  def front(self)->{'Dictionary'}: pass

  def back(self)->{'Dictionary'}: pass

  def pick_random(self)->{'Dictionary'}: pass

  def find(self, what:{'Dictionary'}, from_:int=0)->int: pass

  def rfind(self, what:{'Dictionary'}, from_:int=-1)->int: pass

  def count(self, value:{'Dictionary'})->int: pass

  def has(self, value:{'Dictionary'})->bool: pass

  def pop_back(self)->{'Dictionary'}: pass

  def pop_front(self)->{'Dictionary'}: pass

  def pop_at(self, position:int)->{'Dictionary'}: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:{'Dictionary'}, before:bool=True)->int: pass

  def bsearch_custom(self, value:{'Dictionary'}, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:{'Dictionary'}=None)->{'Dictionary'}: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->{'Dictionary'}: pass

  def min(self)->{'Dictionary'}: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->{'Dictionary'}: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class GLTFBufferViewTypedArray():

  @staticmethod
  def constructor()->GLTFBufferViewTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.GLTFBufferViewTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.GLTFBufferViewTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.GLTFBufferViewTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.GLTFBufferViewTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.GLTFBufferViewTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.GLTFBufferViewTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.GLTFBufferViewTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.GLTFBufferViewTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.GLTFBufferViewTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.GLTFBufferViewTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.GLTFBufferViewTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.GLTFBufferViewTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.GLTFBufferViewTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->GLTFBufferViewTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:__gltfbufferview__.GLTFBufferView)->None: pass

  def push_front(self, value:__gltfbufferview__.GLTFBufferView)->None: pass

  def append(self, value:__gltfbufferview__.GLTFBufferView)->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:__gltfbufferview__.GLTFBufferView)->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:__gltfbufferview__.GLTFBufferView)->None: pass

  def erase(self, value:__gltfbufferview__.GLTFBufferView)->None: pass

  def front(self)->__gltfbufferview__.GLTFBufferView: pass

  def back(self)->__gltfbufferview__.GLTFBufferView: pass

  def pick_random(self)->__gltfbufferview__.GLTFBufferView: pass

  def find(self, what:__gltfbufferview__.GLTFBufferView, from_:int=0)->int: pass

  def rfind(self, what:__gltfbufferview__.GLTFBufferView, from_:int=-1)->int: pass

  def count(self, value:__gltfbufferview__.GLTFBufferView)->int: pass

  def has(self, value:__gltfbufferview__.GLTFBufferView)->bool: pass

  def pop_back(self)->__gltfbufferview__.GLTFBufferView: pass

  def pop_front(self)->__gltfbufferview__.GLTFBufferView: pass

  def pop_at(self, position:int)->__gltfbufferview__.GLTFBufferView: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:__gltfbufferview__.GLTFBufferView, before:bool=True)->int: pass

  def bsearch_custom(self, value:__gltfbufferview__.GLTFBufferView, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:__gltfbufferview__.GLTFBufferView=None)->__gltfbufferview__.GLTFBufferView: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->__gltfbufferview__.GLTFBufferView: pass

  def min(self)->__gltfbufferview__.GLTFBufferView: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->__gltfbufferview__.GLTFBufferView: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class GLTFTextureSamplerTypedArray():

  @staticmethod
  def constructor()->GLTFTextureSamplerTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.GLTFTextureSamplerTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.GLTFTextureSamplerTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.GLTFTextureSamplerTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.GLTFTextureSamplerTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.GLTFTextureSamplerTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.GLTFTextureSamplerTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.GLTFTextureSamplerTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.GLTFTextureSamplerTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.GLTFTextureSamplerTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.GLTFTextureSamplerTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.GLTFTextureSamplerTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.GLTFTextureSamplerTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.GLTFTextureSamplerTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->GLTFTextureSamplerTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:__gltftexturesampler__.GLTFTextureSampler)->None: pass

  def push_front(self, value:__gltftexturesampler__.GLTFTextureSampler)->None: pass

  def append(self, value:__gltftexturesampler__.GLTFTextureSampler)->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:__gltftexturesampler__.GLTFTextureSampler)->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:__gltftexturesampler__.GLTFTextureSampler)->None: pass

  def erase(self, value:__gltftexturesampler__.GLTFTextureSampler)->None: pass

  def front(self)->__gltftexturesampler__.GLTFTextureSampler: pass

  def back(self)->__gltftexturesampler__.GLTFTextureSampler: pass

  def pick_random(self)->__gltftexturesampler__.GLTFTextureSampler: pass

  def find(self, what:__gltftexturesampler__.GLTFTextureSampler, from_:int=0)->int: pass

  def rfind(self, what:__gltftexturesampler__.GLTFTextureSampler, from_:int=-1)->int: pass

  def count(self, value:__gltftexturesampler__.GLTFTextureSampler)->int: pass

  def has(self, value:__gltftexturesampler__.GLTFTextureSampler)->bool: pass

  def pop_back(self)->__gltftexturesampler__.GLTFTextureSampler: pass

  def pop_front(self)->__gltftexturesampler__.GLTFTextureSampler: pass

  def pop_at(self, position:int)->__gltftexturesampler__.GLTFTextureSampler: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:__gltftexturesampler__.GLTFTextureSampler, before:bool=True)->int: pass

  def bsearch_custom(self, value:__gltftexturesampler__.GLTFTextureSampler, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:__gltftexturesampler__.GLTFTextureSampler=None)->__gltftexturesampler__.GLTFTextureSampler: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->__gltftexturesampler__.GLTFTextureSampler: pass

  def min(self)->__gltftexturesampler__.GLTFTextureSampler: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->__gltftexturesampler__.GLTFTextureSampler: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class Vector2TypedArray():

  @staticmethod
  def constructor()->Vector2TypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.Vector2TypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.Vector2TypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.Vector2TypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.Vector2TypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.Vector2TypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.Vector2TypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.Vector2TypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.Vector2TypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.Vector2TypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.Vector2TypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.Vector2TypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.Vector2TypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.Vector2TypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->Vector2TypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:{'Vector2'})->None: pass

  def push_front(self, value:{'Vector2'})->None: pass

  def append(self, value:{'Vector2'})->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:{'Vector2'})->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:{'Vector2'})->None: pass

  def erase(self, value:{'Vector2'})->None: pass

  def front(self)->{'Vector2'}: pass

  def back(self)->{'Vector2'}: pass

  def pick_random(self)->{'Vector2'}: pass

  def find(self, what:{'Vector2'}, from_:int=0)->int: pass

  def rfind(self, what:{'Vector2'}, from_:int=-1)->int: pass

  def count(self, value:{'Vector2'})->int: pass

  def has(self, value:{'Vector2'})->bool: pass

  def pop_back(self)->{'Vector2'}: pass

  def pop_front(self)->{'Vector2'}: pass

  def pop_at(self, position:int)->{'Vector2'}: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:{'Vector2'}, before:bool=True)->int: pass

  def bsearch_custom(self, value:{'Vector2'}, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:{'Vector2'}=None)->{'Vector2'}: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->{'Vector2'}: pass

  def min(self)->{'Vector2'}: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->{'Vector2'}: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class RDPipelineColorBlendStateAttachmentTypedArray():

  @staticmethod
  def constructor()->RDPipelineColorBlendStateAttachmentTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.RDPipelineColorBlendStateAttachmentTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.RDPipelineColorBlendStateAttachmentTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.RDPipelineColorBlendStateAttachmentTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.RDPipelineColorBlendStateAttachmentTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.RDPipelineColorBlendStateAttachmentTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.RDPipelineColorBlendStateAttachmentTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.RDPipelineColorBlendStateAttachmentTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.RDPipelineColorBlendStateAttachmentTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.RDPipelineColorBlendStateAttachmentTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.RDPipelineColorBlendStateAttachmentTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.RDPipelineColorBlendStateAttachmentTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.RDPipelineColorBlendStateAttachmentTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.RDPipelineColorBlendStateAttachmentTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->RDPipelineColorBlendStateAttachmentTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:__rdpipelinecolorblendstateattachment__.RDPipelineColorBlendStateAttachment)->None: pass

  def push_front(self, value:__rdpipelinecolorblendstateattachment__.RDPipelineColorBlendStateAttachment)->None: pass

  def append(self, value:__rdpipelinecolorblendstateattachment__.RDPipelineColorBlendStateAttachment)->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:__rdpipelinecolorblendstateattachment__.RDPipelineColorBlendStateAttachment)->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:__rdpipelinecolorblendstateattachment__.RDPipelineColorBlendStateAttachment)->None: pass

  def erase(self, value:__rdpipelinecolorblendstateattachment__.RDPipelineColorBlendStateAttachment)->None: pass

  def front(self)->__rdpipelinecolorblendstateattachment__.RDPipelineColorBlendStateAttachment: pass

  def back(self)->__rdpipelinecolorblendstateattachment__.RDPipelineColorBlendStateAttachment: pass

  def pick_random(self)->__rdpipelinecolorblendstateattachment__.RDPipelineColorBlendStateAttachment: pass

  def find(self, what:__rdpipelinecolorblendstateattachment__.RDPipelineColorBlendStateAttachment, from_:int=0)->int: pass

  def rfind(self, what:__rdpipelinecolorblendstateattachment__.RDPipelineColorBlendStateAttachment, from_:int=-1)->int: pass

  def count(self, value:__rdpipelinecolorblendstateattachment__.RDPipelineColorBlendStateAttachment)->int: pass

  def has(self, value:__rdpipelinecolorblendstateattachment__.RDPipelineColorBlendStateAttachment)->bool: pass

  def pop_back(self)->__rdpipelinecolorblendstateattachment__.RDPipelineColorBlendStateAttachment: pass

  def pop_front(self)->__rdpipelinecolorblendstateattachment__.RDPipelineColorBlendStateAttachment: pass

  def pop_at(self, position:int)->__rdpipelinecolorblendstateattachment__.RDPipelineColorBlendStateAttachment: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:__rdpipelinecolorblendstateattachment__.RDPipelineColorBlendStateAttachment, before:bool=True)->int: pass

  def bsearch_custom(self, value:__rdpipelinecolorblendstateattachment__.RDPipelineColorBlendStateAttachment, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:__rdpipelinecolorblendstateattachment__.RDPipelineColorBlendStateAttachment=None)->__rdpipelinecolorblendstateattachment__.RDPipelineColorBlendStateAttachment: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->__rdpipelinecolorblendstateattachment__.RDPipelineColorBlendStateAttachment: pass

  def min(self)->__rdpipelinecolorblendstateattachment__.RDPipelineColorBlendStateAttachment: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->__rdpipelinecolorblendstateattachment__.RDPipelineColorBlendStateAttachment: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class RDAttachmentFormatTypedArray():

  @staticmethod
  def constructor()->RDAttachmentFormatTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.RDAttachmentFormatTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.RDAttachmentFormatTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.RDAttachmentFormatTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.RDAttachmentFormatTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.RDAttachmentFormatTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.RDAttachmentFormatTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.RDAttachmentFormatTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.RDAttachmentFormatTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.RDAttachmentFormatTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.RDAttachmentFormatTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.RDAttachmentFormatTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.RDAttachmentFormatTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.RDAttachmentFormatTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->RDAttachmentFormatTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:__rdattachmentformat__.RDAttachmentFormat)->None: pass

  def push_front(self, value:__rdattachmentformat__.RDAttachmentFormat)->None: pass

  def append(self, value:__rdattachmentformat__.RDAttachmentFormat)->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:__rdattachmentformat__.RDAttachmentFormat)->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:__rdattachmentformat__.RDAttachmentFormat)->None: pass

  def erase(self, value:__rdattachmentformat__.RDAttachmentFormat)->None: pass

  def front(self)->__rdattachmentformat__.RDAttachmentFormat: pass

  def back(self)->__rdattachmentformat__.RDAttachmentFormat: pass

  def pick_random(self)->__rdattachmentformat__.RDAttachmentFormat: pass

  def find(self, what:__rdattachmentformat__.RDAttachmentFormat, from_:int=0)->int: pass

  def rfind(self, what:__rdattachmentformat__.RDAttachmentFormat, from_:int=-1)->int: pass

  def count(self, value:__rdattachmentformat__.RDAttachmentFormat)->int: pass

  def has(self, value:__rdattachmentformat__.RDAttachmentFormat)->bool: pass

  def pop_back(self)->__rdattachmentformat__.RDAttachmentFormat: pass

  def pop_front(self)->__rdattachmentformat__.RDAttachmentFormat: pass

  def pop_at(self, position:int)->__rdattachmentformat__.RDAttachmentFormat: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:__rdattachmentformat__.RDAttachmentFormat, before:bool=True)->int: pass

  def bsearch_custom(self, value:__rdattachmentformat__.RDAttachmentFormat, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:__rdattachmentformat__.RDAttachmentFormat=None)->__rdattachmentformat__.RDAttachmentFormat: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->__rdattachmentformat__.RDAttachmentFormat: pass

  def min(self)->__rdattachmentformat__.RDAttachmentFormat: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->__rdattachmentformat__.RDAttachmentFormat: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class TweenTypedArray():

  @staticmethod
  def constructor()->TweenTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.TweenTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.TweenTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.TweenTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.TweenTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.TweenTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.TweenTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.TweenTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.TweenTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.TweenTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.TweenTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.TweenTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.TweenTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.TweenTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->TweenTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:__tween__.Tween)->None: pass

  def push_front(self, value:__tween__.Tween)->None: pass

  def append(self, value:__tween__.Tween)->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:__tween__.Tween)->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:__tween__.Tween)->None: pass

  def erase(self, value:__tween__.Tween)->None: pass

  def front(self)->__tween__.Tween: pass

  def back(self)->__tween__.Tween: pass

  def pick_random(self)->__tween__.Tween: pass

  def find(self, what:__tween__.Tween, from_:int=0)->int: pass

  def rfind(self, what:__tween__.Tween, from_:int=-1)->int: pass

  def count(self, value:__tween__.Tween)->int: pass

  def has(self, value:__tween__.Tween)->bool: pass

  def pop_back(self)->__tween__.Tween: pass

  def pop_front(self)->__tween__.Tween: pass

  def pop_at(self, position:int)->__tween__.Tween: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:__tween__.Tween, before:bool=True)->int: pass

  def bsearch_custom(self, value:__tween__.Tween, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:__tween__.Tween=None)->__tween__.Tween: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->__tween__.Tween: pass

  def min(self)->__tween__.Tween: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->__tween__.Tween: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class PackedVector2ArrayTypedArray():

  @staticmethod
  def constructor()->PackedVector2ArrayTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.PackedVector2ArrayTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.PackedVector2ArrayTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.PackedVector2ArrayTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.PackedVector2ArrayTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.PackedVector2ArrayTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.PackedVector2ArrayTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.PackedVector2ArrayTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.PackedVector2ArrayTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.PackedVector2ArrayTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.PackedVector2ArrayTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.PackedVector2ArrayTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.PackedVector2ArrayTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.PackedVector2ArrayTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->PackedVector2ArrayTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:{'PackedVector2Array'})->None: pass

  def push_front(self, value:{'PackedVector2Array'})->None: pass

  def append(self, value:{'PackedVector2Array'})->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:{'PackedVector2Array'})->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:{'PackedVector2Array'})->None: pass

  def erase(self, value:{'PackedVector2Array'})->None: pass

  def front(self)->{'PackedVector2Array'}: pass

  def back(self)->{'PackedVector2Array'}: pass

  def pick_random(self)->{'PackedVector2Array'}: pass

  def find(self, what:{'PackedVector2Array'}, from_:int=0)->int: pass

  def rfind(self, what:{'PackedVector2Array'}, from_:int=-1)->int: pass

  def count(self, value:{'PackedVector2Array'})->int: pass

  def has(self, value:{'PackedVector2Array'})->bool: pass

  def pop_back(self)->{'PackedVector2Array'}: pass

  def pop_front(self)->{'PackedVector2Array'}: pass

  def pop_at(self, position:int)->{'PackedVector2Array'}: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:{'PackedVector2Array'}, before:bool=True)->int: pass

  def bsearch_custom(self, value:{'PackedVector2Array'}, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:{'PackedVector2Array'}=None)->{'PackedVector2Array'}: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->{'PackedVector2Array'}: pass

  def min(self)->{'PackedVector2Array'}: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->{'PackedVector2Array'}: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class GLTFSkinTypedArray():

  @staticmethod
  def constructor()->GLTFSkinTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.GLTFSkinTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.GLTFSkinTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.GLTFSkinTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.GLTFSkinTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.GLTFSkinTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.GLTFSkinTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.GLTFSkinTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.GLTFSkinTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.GLTFSkinTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.GLTFSkinTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.GLTFSkinTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.GLTFSkinTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.GLTFSkinTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->GLTFSkinTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:__gltfskin__.GLTFSkin)->None: pass

  def push_front(self, value:__gltfskin__.GLTFSkin)->None: pass

  def append(self, value:__gltfskin__.GLTFSkin)->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:__gltfskin__.GLTFSkin)->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:__gltfskin__.GLTFSkin)->None: pass

  def erase(self, value:__gltfskin__.GLTFSkin)->None: pass

  def front(self)->__gltfskin__.GLTFSkin: pass

  def back(self)->__gltfskin__.GLTFSkin: pass

  def pick_random(self)->__gltfskin__.GLTFSkin: pass

  def find(self, what:__gltfskin__.GLTFSkin, from_:int=0)->int: pass

  def rfind(self, what:__gltfskin__.GLTFSkin, from_:int=-1)->int: pass

  def count(self, value:__gltfskin__.GLTFSkin)->int: pass

  def has(self, value:__gltfskin__.GLTFSkin)->bool: pass

  def pop_back(self)->__gltfskin__.GLTFSkin: pass

  def pop_front(self)->__gltfskin__.GLTFSkin: pass

  def pop_at(self, position:int)->__gltfskin__.GLTFSkin: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:__gltfskin__.GLTFSkin, before:bool=True)->int: pass

  def bsearch_custom(self, value:__gltfskin__.GLTFSkin, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:__gltfskin__.GLTFSkin=None)->__gltfskin__.GLTFSkin: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->__gltfskin__.GLTFSkin: pass

  def min(self)->__gltfskin__.GLTFSkin: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->__gltfskin__.GLTFSkin: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class GLTFNodeTypedArray():

  @staticmethod
  def constructor()->GLTFNodeTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.GLTFNodeTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.GLTFNodeTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.GLTFNodeTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.GLTFNodeTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.GLTFNodeTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.GLTFNodeTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.GLTFNodeTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.GLTFNodeTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.GLTFNodeTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.GLTFNodeTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.GLTFNodeTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.GLTFNodeTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.GLTFNodeTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->GLTFNodeTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:__gltfnode__.GLTFNode)->None: pass

  def push_front(self, value:__gltfnode__.GLTFNode)->None: pass

  def append(self, value:__gltfnode__.GLTFNode)->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:__gltfnode__.GLTFNode)->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:__gltfnode__.GLTFNode)->None: pass

  def erase(self, value:__gltfnode__.GLTFNode)->None: pass

  def front(self)->__gltfnode__.GLTFNode: pass

  def back(self)->__gltfnode__.GLTFNode: pass

  def pick_random(self)->__gltfnode__.GLTFNode: pass

  def find(self, what:__gltfnode__.GLTFNode, from_:int=0)->int: pass

  def rfind(self, what:__gltfnode__.GLTFNode, from_:int=-1)->int: pass

  def count(self, value:__gltfnode__.GLTFNode)->int: pass

  def has(self, value:__gltfnode__.GLTFNode)->bool: pass

  def pop_back(self)->__gltfnode__.GLTFNode: pass

  def pop_front(self)->__gltfnode__.GLTFNode: pass

  def pop_at(self, position:int)->__gltfnode__.GLTFNode: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:__gltfnode__.GLTFNode, before:bool=True)->int: pass

  def bsearch_custom(self, value:__gltfnode__.GLTFNode, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:__gltfnode__.GLTFNode=None)->__gltfnode__.GLTFNode: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->__gltfnode__.GLTFNode: pass

  def min(self)->__gltfnode__.GLTFNode: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->__gltfnode__.GLTFNode: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class Vector3TypedArray():

  @staticmethod
  def constructor()->Vector3TypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.Vector3TypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.Vector3TypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.Vector3TypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.Vector3TypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.Vector3TypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.Vector3TypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.Vector3TypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.Vector3TypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.Vector3TypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.Vector3TypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.Vector3TypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.Vector3TypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.Vector3TypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->Vector3TypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:{'Vector3'})->None: pass

  def push_front(self, value:{'Vector3'})->None: pass

  def append(self, value:{'Vector3'})->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:{'Vector3'})->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:{'Vector3'})->None: pass

  def erase(self, value:{'Vector3'})->None: pass

  def front(self)->{'Vector3'}: pass

  def back(self)->{'Vector3'}: pass

  def pick_random(self)->{'Vector3'}: pass

  def find(self, what:{'Vector3'}, from_:int=0)->int: pass

  def rfind(self, what:{'Vector3'}, from_:int=-1)->int: pass

  def count(self, value:{'Vector3'})->int: pass

  def has(self, value:{'Vector3'})->bool: pass

  def pop_back(self)->{'Vector3'}: pass

  def pop_front(self)->{'Vector3'}: pass

  def pop_at(self, position:int)->{'Vector3'}: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:{'Vector3'}, before:bool=True)->int: pass

  def bsearch_custom(self, value:{'Vector3'}, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:{'Vector3'}=None)->{'Vector3'}: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->{'Vector3'}: pass

  def min(self)->{'Vector3'}: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->{'Vector3'}: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class NodePathTypedArray():

  @staticmethod
  def constructor()->NodePathTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.NodePathTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.NodePathTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.NodePathTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.NodePathTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.NodePathTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.NodePathTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.NodePathTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.NodePathTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.NodePathTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.NodePathTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.NodePathTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.NodePathTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.NodePathTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->NodePathTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:{'NodePath'})->None: pass

  def push_front(self, value:{'NodePath'})->None: pass

  def append(self, value:{'NodePath'})->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:{'NodePath'})->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:{'NodePath'})->None: pass

  def erase(self, value:{'NodePath'})->None: pass

  def front(self)->{'NodePath'}: pass

  def back(self)->{'NodePath'}: pass

  def pick_random(self)->{'NodePath'}: pass

  def find(self, what:{'NodePath'}, from_:int=0)->int: pass

  def rfind(self, what:{'NodePath'}, from_:int=-1)->int: pass

  def count(self, value:{'NodePath'})->int: pass

  def has(self, value:{'NodePath'})->bool: pass

  def pop_back(self)->{'NodePath'}: pass

  def pop_front(self)->{'NodePath'}: pass

  def pop_at(self, position:int)->{'NodePath'}: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:{'NodePath'}, before:bool=True)->int: pass

  def bsearch_custom(self, value:{'NodePath'}, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:{'NodePath'}=None)->{'NodePath'}: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->{'NodePath'}: pass

  def min(self)->{'NodePath'}: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->{'NodePath'}: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class GLTFTextureTypedArray():

  @staticmethod
  def constructor()->GLTFTextureTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.GLTFTextureTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.GLTFTextureTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.GLTFTextureTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.GLTFTextureTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.GLTFTextureTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.GLTFTextureTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.GLTFTextureTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.GLTFTextureTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.GLTFTextureTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.GLTFTextureTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.GLTFTextureTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.GLTFTextureTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.GLTFTextureTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->GLTFTextureTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:__gltftexture__.GLTFTexture)->None: pass

  def push_front(self, value:__gltftexture__.GLTFTexture)->None: pass

  def append(self, value:__gltftexture__.GLTFTexture)->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:__gltftexture__.GLTFTexture)->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:__gltftexture__.GLTFTexture)->None: pass

  def erase(self, value:__gltftexture__.GLTFTexture)->None: pass

  def front(self)->__gltftexture__.GLTFTexture: pass

  def back(self)->__gltftexture__.GLTFTexture: pass

  def pick_random(self)->__gltftexture__.GLTFTexture: pass

  def find(self, what:__gltftexture__.GLTFTexture, from_:int=0)->int: pass

  def rfind(self, what:__gltftexture__.GLTFTexture, from_:int=-1)->int: pass

  def count(self, value:__gltftexture__.GLTFTexture)->int: pass

  def has(self, value:__gltftexture__.GLTFTexture)->bool: pass

  def pop_back(self)->__gltftexture__.GLTFTexture: pass

  def pop_front(self)->__gltftexture__.GLTFTexture: pass

  def pop_at(self, position:int)->__gltftexture__.GLTFTexture: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:__gltftexture__.GLTFTexture, before:bool=True)->int: pass

  def bsearch_custom(self, value:__gltftexture__.GLTFTexture, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:__gltftexture__.GLTFTexture=None)->__gltftexture__.GLTFTexture: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->__gltftexture__.GLTFTexture: pass

  def min(self)->__gltftexture__.GLTFTexture: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->__gltftexture__.GLTFTexture: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class ENetPacketPeerTypedArray():

  @staticmethod
  def constructor()->ENetPacketPeerTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.ENetPacketPeerTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.ENetPacketPeerTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.ENetPacketPeerTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.ENetPacketPeerTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.ENetPacketPeerTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.ENetPacketPeerTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.ENetPacketPeerTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.ENetPacketPeerTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.ENetPacketPeerTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.ENetPacketPeerTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.ENetPacketPeerTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.ENetPacketPeerTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.ENetPacketPeerTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->ENetPacketPeerTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:__enetpacketpeer__.ENetPacketPeer)->None: pass

  def push_front(self, value:__enetpacketpeer__.ENetPacketPeer)->None: pass

  def append(self, value:__enetpacketpeer__.ENetPacketPeer)->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:__enetpacketpeer__.ENetPacketPeer)->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:__enetpacketpeer__.ENetPacketPeer)->None: pass

  def erase(self, value:__enetpacketpeer__.ENetPacketPeer)->None: pass

  def front(self)->__enetpacketpeer__.ENetPacketPeer: pass

  def back(self)->__enetpacketpeer__.ENetPacketPeer: pass

  def pick_random(self)->__enetpacketpeer__.ENetPacketPeer: pass

  def find(self, what:__enetpacketpeer__.ENetPacketPeer, from_:int=0)->int: pass

  def rfind(self, what:__enetpacketpeer__.ENetPacketPeer, from_:int=-1)->int: pass

  def count(self, value:__enetpacketpeer__.ENetPacketPeer)->int: pass

  def has(self, value:__enetpacketpeer__.ENetPacketPeer)->bool: pass

  def pop_back(self)->__enetpacketpeer__.ENetPacketPeer: pass

  def pop_front(self)->__enetpacketpeer__.ENetPacketPeer: pass

  def pop_at(self, position:int)->__enetpacketpeer__.ENetPacketPeer: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:__enetpacketpeer__.ENetPacketPeer, before:bool=True)->int: pass

  def bsearch_custom(self, value:__enetpacketpeer__.ENetPacketPeer, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:__enetpacketpeer__.ENetPacketPeer=None)->__enetpacketpeer__.ENetPacketPeer: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->__enetpacketpeer__.ENetPacketPeer: pass

  def min(self)->__enetpacketpeer__.ENetPacketPeer: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->__enetpacketpeer__.ENetPacketPeer: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class Vector3iTypedArray():

  @staticmethod
  def constructor()->Vector3iTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.Vector3iTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.Vector3iTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.Vector3iTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.Vector3iTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.Vector3iTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.Vector3iTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.Vector3iTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.Vector3iTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.Vector3iTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.Vector3iTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.Vector3iTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.Vector3iTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.Vector3iTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->Vector3iTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:{'Vector3i'})->None: pass

  def push_front(self, value:{'Vector3i'})->None: pass

  def append(self, value:{'Vector3i'})->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:{'Vector3i'})->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:{'Vector3i'})->None: pass

  def erase(self, value:{'Vector3i'})->None: pass

  def front(self)->{'Vector3i'}: pass

  def back(self)->{'Vector3i'}: pass

  def pick_random(self)->{'Vector3i'}: pass

  def find(self, what:{'Vector3i'}, from_:int=0)->int: pass

  def rfind(self, what:{'Vector3i'}, from_:int=-1)->int: pass

  def count(self, value:{'Vector3i'})->int: pass

  def has(self, value:{'Vector3i'})->bool: pass

  def pop_back(self)->{'Vector3i'}: pass

  def pop_front(self)->{'Vector3i'}: pass

  def pop_at(self, position:int)->{'Vector3i'}: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:{'Vector3i'}, before:bool=True)->int: pass

  def bsearch_custom(self, value:{'Vector3i'}, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:{'Vector3i'}=None)->{'Vector3i'}: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->{'Vector3i'}: pass

  def min(self)->{'Vector3i'}: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->{'Vector3i'}: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class RDVertexAttributeTypedArray():

  @staticmethod
  def constructor()->RDVertexAttributeTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.RDVertexAttributeTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.RDVertexAttributeTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.RDVertexAttributeTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.RDVertexAttributeTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.RDVertexAttributeTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.RDVertexAttributeTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.RDVertexAttributeTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.RDVertexAttributeTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.RDVertexAttributeTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.RDVertexAttributeTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.RDVertexAttributeTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.RDVertexAttributeTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.RDVertexAttributeTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->RDVertexAttributeTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:__rdvertexattribute__.RDVertexAttribute)->None: pass

  def push_front(self, value:__rdvertexattribute__.RDVertexAttribute)->None: pass

  def append(self, value:__rdvertexattribute__.RDVertexAttribute)->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:__rdvertexattribute__.RDVertexAttribute)->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:__rdvertexattribute__.RDVertexAttribute)->None: pass

  def erase(self, value:__rdvertexattribute__.RDVertexAttribute)->None: pass

  def front(self)->__rdvertexattribute__.RDVertexAttribute: pass

  def back(self)->__rdvertexattribute__.RDVertexAttribute: pass

  def pick_random(self)->__rdvertexattribute__.RDVertexAttribute: pass

  def find(self, what:__rdvertexattribute__.RDVertexAttribute, from_:int=0)->int: pass

  def rfind(self, what:__rdvertexattribute__.RDVertexAttribute, from_:int=-1)->int: pass

  def count(self, value:__rdvertexattribute__.RDVertexAttribute)->int: pass

  def has(self, value:__rdvertexattribute__.RDVertexAttribute)->bool: pass

  def pop_back(self)->__rdvertexattribute__.RDVertexAttribute: pass

  def pop_front(self)->__rdvertexattribute__.RDVertexAttribute: pass

  def pop_at(self, position:int)->__rdvertexattribute__.RDVertexAttribute: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:__rdvertexattribute__.RDVertexAttribute, before:bool=True)->int: pass

  def bsearch_custom(self, value:__rdvertexattribute__.RDVertexAttribute, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:__rdvertexattribute__.RDVertexAttribute=None)->__rdvertexattribute__.RDVertexAttribute: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->__rdvertexattribute__.RDVertexAttribute: pass

  def min(self)->__rdvertexattribute__.RDVertexAttribute: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->__rdvertexattribute__.RDVertexAttribute: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class RDUniformTypedArray():

  @staticmethod
  def constructor()->RDUniformTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.RDUniformTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.RDUniformTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.RDUniformTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.RDUniformTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.RDUniformTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.RDUniformTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.RDUniformTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.RDUniformTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.RDUniformTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.RDUniformTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.RDUniformTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.RDUniformTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.RDUniformTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->RDUniformTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:__rduniform__.RDUniform)->None: pass

  def push_front(self, value:__rduniform__.RDUniform)->None: pass

  def append(self, value:__rduniform__.RDUniform)->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:__rduniform__.RDUniform)->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:__rduniform__.RDUniform)->None: pass

  def erase(self, value:__rduniform__.RDUniform)->None: pass

  def front(self)->__rduniform__.RDUniform: pass

  def back(self)->__rduniform__.RDUniform: pass

  def pick_random(self)->__rduniform__.RDUniform: pass

  def find(self, what:__rduniform__.RDUniform, from_:int=0)->int: pass

  def rfind(self, what:__rduniform__.RDUniform, from_:int=-1)->int: pass

  def count(self, value:__rduniform__.RDUniform)->int: pass

  def has(self, value:__rduniform__.RDUniform)->bool: pass

  def pop_back(self)->__rduniform__.RDUniform: pass

  def pop_front(self)->__rduniform__.RDUniform: pass

  def pop_at(self, position:int)->__rduniform__.RDUniform: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:__rduniform__.RDUniform, before:bool=True)->int: pass

  def bsearch_custom(self, value:__rduniform__.RDUniform, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:__rduniform__.RDUniform=None)->__rduniform__.RDUniform: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->__rduniform__.RDUniform: pass

  def min(self)->__rduniform__.RDUniform: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->__rduniform__.RDUniform: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class RDPipelineSpecializationConstantTypedArray():

  @staticmethod
  def constructor()->RDPipelineSpecializationConstantTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.RDPipelineSpecializationConstantTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.RDPipelineSpecializationConstantTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.RDPipelineSpecializationConstantTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.RDPipelineSpecializationConstantTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.RDPipelineSpecializationConstantTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.RDPipelineSpecializationConstantTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.RDPipelineSpecializationConstantTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.RDPipelineSpecializationConstantTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.RDPipelineSpecializationConstantTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.RDPipelineSpecializationConstantTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.RDPipelineSpecializationConstantTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.RDPipelineSpecializationConstantTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.RDPipelineSpecializationConstantTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->RDPipelineSpecializationConstantTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:__rdpipelinespecializationconstant__.RDPipelineSpecializationConstant)->None: pass

  def push_front(self, value:__rdpipelinespecializationconstant__.RDPipelineSpecializationConstant)->None: pass

  def append(self, value:__rdpipelinespecializationconstant__.RDPipelineSpecializationConstant)->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:__rdpipelinespecializationconstant__.RDPipelineSpecializationConstant)->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:__rdpipelinespecializationconstant__.RDPipelineSpecializationConstant)->None: pass

  def erase(self, value:__rdpipelinespecializationconstant__.RDPipelineSpecializationConstant)->None: pass

  def front(self)->__rdpipelinespecializationconstant__.RDPipelineSpecializationConstant: pass

  def back(self)->__rdpipelinespecializationconstant__.RDPipelineSpecializationConstant: pass

  def pick_random(self)->__rdpipelinespecializationconstant__.RDPipelineSpecializationConstant: pass

  def find(self, what:__rdpipelinespecializationconstant__.RDPipelineSpecializationConstant, from_:int=0)->int: pass

  def rfind(self, what:__rdpipelinespecializationconstant__.RDPipelineSpecializationConstant, from_:int=-1)->int: pass

  def count(self, value:__rdpipelinespecializationconstant__.RDPipelineSpecializationConstant)->int: pass

  def has(self, value:__rdpipelinespecializationconstant__.RDPipelineSpecializationConstant)->bool: pass

  def pop_back(self)->__rdpipelinespecializationconstant__.RDPipelineSpecializationConstant: pass

  def pop_front(self)->__rdpipelinespecializationconstant__.RDPipelineSpecializationConstant: pass

  def pop_at(self, position:int)->__rdpipelinespecializationconstant__.RDPipelineSpecializationConstant: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:__rdpipelinespecializationconstant__.RDPipelineSpecializationConstant, before:bool=True)->int: pass

  def bsearch_custom(self, value:__rdpipelinespecializationconstant__.RDPipelineSpecializationConstant, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:__rdpipelinespecializationconstant__.RDPipelineSpecializationConstant=None)->__rdpipelinespecializationconstant__.RDPipelineSpecializationConstant: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->__rdpipelinespecializationconstant__.RDPipelineSpecializationConstant: pass

  def min(self)->__rdpipelinespecializationconstant__.RDPipelineSpecializationConstant: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->__rdpipelinespecializationconstant__.RDPipelineSpecializationConstant: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class MeshTypedArray():

  @staticmethod
  def constructor()->MeshTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.MeshTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.MeshTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.MeshTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.MeshTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.MeshTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.MeshTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.MeshTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.MeshTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.MeshTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.MeshTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.MeshTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.MeshTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.MeshTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->MeshTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:__mesh__.Mesh)->None: pass

  def push_front(self, value:__mesh__.Mesh)->None: pass

  def append(self, value:__mesh__.Mesh)->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:__mesh__.Mesh)->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:__mesh__.Mesh)->None: pass

  def erase(self, value:__mesh__.Mesh)->None: pass

  def front(self)->__mesh__.Mesh: pass

  def back(self)->__mesh__.Mesh: pass

  def pick_random(self)->__mesh__.Mesh: pass

  def find(self, what:__mesh__.Mesh, from_:int=0)->int: pass

  def rfind(self, what:__mesh__.Mesh, from_:int=-1)->int: pass

  def count(self, value:__mesh__.Mesh)->int: pass

  def has(self, value:__mesh__.Mesh)->bool: pass

  def pop_back(self)->__mesh__.Mesh: pass

  def pop_front(self)->__mesh__.Mesh: pass

  def pop_at(self, position:int)->__mesh__.Mesh: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:__mesh__.Mesh, before:bool=True)->int: pass

  def bsearch_custom(self, value:__mesh__.Mesh, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:__mesh__.Mesh=None)->__mesh__.Mesh: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->__mesh__.Mesh: pass

  def min(self)->__mesh__.Mesh: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->__mesh__.Mesh: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class Node2DTypedArray():

  @staticmethod
  def constructor()->Node2DTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.Node2DTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.Node2DTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.Node2DTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.Node2DTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.Node2DTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.Node2DTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.Node2DTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.Node2DTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.Node2DTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.Node2DTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.Node2DTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.Node2DTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.Node2DTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->Node2DTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:__node2d__.Node2D)->None: pass

  def push_front(self, value:__node2d__.Node2D)->None: pass

  def append(self, value:__node2d__.Node2D)->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:__node2d__.Node2D)->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:__node2d__.Node2D)->None: pass

  def erase(self, value:__node2d__.Node2D)->None: pass

  def front(self)->__node2d__.Node2D: pass

  def back(self)->__node2d__.Node2D: pass

  def pick_random(self)->__node2d__.Node2D: pass

  def find(self, what:__node2d__.Node2D, from_:int=0)->int: pass

  def rfind(self, what:__node2d__.Node2D, from_:int=-1)->int: pass

  def count(self, value:__node2d__.Node2D)->int: pass

  def has(self, value:__node2d__.Node2D)->bool: pass

  def pop_back(self)->__node2d__.Node2D: pass

  def pop_front(self)->__node2d__.Node2D: pass

  def pop_at(self, position:int)->__node2d__.Node2D: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:__node2d__.Node2D, before:bool=True)->int: pass

  def bsearch_custom(self, value:__node2d__.Node2D, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:__node2d__.Node2D=None)->__node2d__.Node2D: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->__node2d__.Node2D: pass

  def min(self)->__node2d__.Node2D: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->__node2d__.Node2D: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class RDFramebufferPassTypedArray():

  @staticmethod
  def constructor()->RDFramebufferPassTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.RDFramebufferPassTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.RDFramebufferPassTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.RDFramebufferPassTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.RDFramebufferPassTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.RDFramebufferPassTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.RDFramebufferPassTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.RDFramebufferPassTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.RDFramebufferPassTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.RDFramebufferPassTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.RDFramebufferPassTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.RDFramebufferPassTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.RDFramebufferPassTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.RDFramebufferPassTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->RDFramebufferPassTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:__rdframebufferpass__.RDFramebufferPass)->None: pass

  def push_front(self, value:__rdframebufferpass__.RDFramebufferPass)->None: pass

  def append(self, value:__rdframebufferpass__.RDFramebufferPass)->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:__rdframebufferpass__.RDFramebufferPass)->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:__rdframebufferpass__.RDFramebufferPass)->None: pass

  def erase(self, value:__rdframebufferpass__.RDFramebufferPass)->None: pass

  def front(self)->__rdframebufferpass__.RDFramebufferPass: pass

  def back(self)->__rdframebufferpass__.RDFramebufferPass: pass

  def pick_random(self)->__rdframebufferpass__.RDFramebufferPass: pass

  def find(self, what:__rdframebufferpass__.RDFramebufferPass, from_:int=0)->int: pass

  def rfind(self, what:__rdframebufferpass__.RDFramebufferPass, from_:int=-1)->int: pass

  def count(self, value:__rdframebufferpass__.RDFramebufferPass)->int: pass

  def has(self, value:__rdframebufferpass__.RDFramebufferPass)->bool: pass

  def pop_back(self)->__rdframebufferpass__.RDFramebufferPass: pass

  def pop_front(self)->__rdframebufferpass__.RDFramebufferPass: pass

  def pop_at(self, position:int)->__rdframebufferpass__.RDFramebufferPass: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:__rdframebufferpass__.RDFramebufferPass, before:bool=True)->int: pass

  def bsearch_custom(self, value:__rdframebufferpass__.RDFramebufferPass, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:__rdframebufferpass__.RDFramebufferPass=None)->__rdframebufferpass__.RDFramebufferPass: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->__rdframebufferpass__.RDFramebufferPass: pass

  def min(self)->__rdframebufferpass__.RDFramebufferPass: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->__rdframebufferpass__.RDFramebufferPass: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass



class Node3DTypedArray():

  @staticmethod
  def constructor()->Node3DTypedArray:pass


  @staticmethod
  def new0() -> __typedarrays__.Node3DTypedArray:pass
  @staticmethod
  def new1(from_:Array) -> __typedarrays__.Node3DTypedArray:pass
  @staticmethod
  def new2(base:Array, type:int, class_name:StringName, script:object) -> __typedarrays__.Node3DTypedArray:pass
  @staticmethod
  def new3(from_:PackedByteArray) -> __typedarrays__.Node3DTypedArray:pass
  @staticmethod
  def new4(from_:PackedInt32Array) -> __typedarrays__.Node3DTypedArray:pass
  @staticmethod
  def new5(from_:PackedInt64Array) -> __typedarrays__.Node3DTypedArray:pass
  @staticmethod
  def new6(from_:PackedFloat32Array) -> __typedarrays__.Node3DTypedArray:pass
  @staticmethod
  def new7(from_:PackedFloat64Array) -> __typedarrays__.Node3DTypedArray:pass
  @staticmethod
  def new8(from_:PackedStringArray) -> __typedarrays__.Node3DTypedArray:pass
  @staticmethod
  def new9(from_:PackedVector2Array) -> __typedarrays__.Node3DTypedArray:pass
  @staticmethod
  def new10(from_:PackedVector3Array) -> __typedarrays__.Node3DTypedArray:pass
  @staticmethod
  def new11(from_:PackedColorArray) -> __typedarrays__.Node3DTypedArray:pass
  @staticmethod
  def new12(from_:PackedVector4Array) -> __typedarrays__.Node3DTypedArray:pass

  def __setitem__(self, value:object,  index:int) -> None: pass

  def __getitem__(self,  index:int)->object:pass

  def __iter__(self)->Node3DTypedArray:pass



  def size(self)->int: pass

  def is_empty(self)->bool: pass

  def clear(self)->None: pass

  def hash(self)->int: pass

  def assign(self, array:Array)->None: pass

  def push_back(self, value:__node3d__.Node3D)->None: pass

  def push_front(self, value:__node3d__.Node3D)->None: pass

  def append(self, value:__node3d__.Node3D)->None: pass

  def append_array(self, array:Array)->None: pass

  def resize(self, size:int)->int: pass

  def insert(self, position:int, value:__node3d__.Node3D)->int: pass

  def remove_at(self, position:int)->None: pass

  def fill(self, value:__node3d__.Node3D)->None: pass

  def erase(self, value:__node3d__.Node3D)->None: pass

  def front(self)->__node3d__.Node3D: pass

  def back(self)->__node3d__.Node3D: pass

  def pick_random(self)->__node3d__.Node3D: pass

  def find(self, what:__node3d__.Node3D, from_:int=0)->int: pass

  def rfind(self, what:__node3d__.Node3D, from_:int=-1)->int: pass

  def count(self, value:__node3d__.Node3D)->int: pass

  def has(self, value:__node3d__.Node3D)->bool: pass

  def pop_back(self)->__node3d__.Node3D: pass

  def pop_front(self)->__node3d__.Node3D: pass

  def pop_at(self, position:int)->__node3d__.Node3D: pass

  def sort(self)->None: pass

  def sort_custom(self, func:Callable)->None: pass

  def shuffle(self)->None: pass

  def bsearch(self, value:__node3d__.Node3D, before:bool=True)->int: pass

  def bsearch_custom(self, value:__node3d__.Node3D, func:Callable, before:bool=True)->int: pass

  def reverse(self)->None: pass

  def duplicate(self, deep:bool=False)->Array: pass

  def slice(self, begin:int, end:int=2147483647, step:int=1, deep:bool=False)->Array: pass

  def filter(self, method:Callable)->Array: pass

  def map(self, method:Callable)->Array: pass

  def reduce(self, method:Callable, accum:__node3d__.Node3D=None)->__node3d__.Node3D: pass

  def any(self, method:Callable)->bool: pass

  def all(self, method:Callable)->bool: pass

  def max(self)->__node3d__.Node3D: pass

  def min(self)->__node3d__.Node3D: pass

  def is_typed(self)->bool: pass

  def is_same_typed(self, array:Array)->bool: pass

  def get_typed_builtin(self)->int: pass

  def get_typed_class_name(self)->StringName: pass

  def get_typed_script(self)->__node3d__.Node3D: pass

  def make_read_only(self)->None: pass

  def is_read_only(self)->bool: pass


