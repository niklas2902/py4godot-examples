from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.VisualInstance3D.VisualInstance3D as __visualinstance3d__


class RootMotionView(__visualinstance3d__.VisualInstance3D):

  @staticmethod
  def constructor()->RootMotionView:pass



  @staticmethod
  def cast(other:__object__.Object)->RootMotionView:pass


  @property
  def animation_path(self)->__core__.NodePath: pass
  @animation_path.setter
  def animation_path(self,  value:__core__.NodePath)->None: pass
  @property
  def color(self)->__core__.Color: pass
  @color.setter
  def color(self,  value:__core__.Color)->None: pass
  @property
  def cell_size(self)->float: pass
  @cell_size.setter
  def cell_size(self,  value:float)->None: pass
  @property
  def radius(self)->float: pass
  @radius.setter
  def radius(self,  value:float)->None: pass
  @property
  def zero_y(self)->bool: pass
  @zero_y.setter
  def zero_y(self,  value:bool)->None: pass
  def set_animation_path(self, path:__core__.NodePath)->None: pass

  def get_animation_path(self)->__core__.NodePath: pass

  def set_color(self, color:__core__.Color)->None: pass

  def get_color(self)->__core__.Color: pass

  def set_cell_size(self, size:float)->None: pass

  def get_cell_size(self)->float: pass

  def set_radius(self, size:float)->None: pass

  def get_radius(self)->float: pass

  def set_zero_y(self, enable:bool)->None: pass

  def get_zero_y(self)->bool: pass


