from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.VisualShaderNodeResizableBase.VisualShaderNodeResizableBase as __visualshadernoderesizablebase__


class VisualShaderNodeFrame(__visualshadernoderesizablebase__.VisualShaderNodeResizableBase):

  @staticmethod
  def constructor()->VisualShaderNodeFrame:pass



  @staticmethod
  def cast(other:__object__.Object)->VisualShaderNodeFrame:pass


  @property
  def title(self)->str: pass
  @title.setter
  def title(self,  value:str)->None: pass
  @property
  def tint_color_enabled(self)->bool: pass
  @tint_color_enabled.setter
  def tint_color_enabled(self,  value:bool)->None: pass
  @property
  def tint_color(self)->__core__.Color: pass
  @tint_color.setter
  def tint_color(self,  value:__core__.Color)->None: pass
  @property
  def autoshrink(self)->bool: pass
  @autoshrink.setter
  def autoshrink(self,  value:bool)->None: pass
  @property
  def attached_nodes(self)->__core__.PackedInt32Array: pass
  @attached_nodes.setter
  def attached_nodes(self,  value:__core__.PackedInt32Array)->None: pass
  def set_title(self, title:str)->None: pass

  def get_title(self)->str: pass

  def set_tint_color_enabled(self, enable:bool)->None: pass

  def is_tint_color_enabled(self)->bool: pass

  def set_tint_color(self, color:__core__.Color)->None: pass

  def get_tint_color(self)->__core__.Color: pass

  def set_autoshrink_enabled(self, enable:bool)->None: pass

  def is_autoshrink_enabled(self)->bool: pass

  def add_attached_node(self, node:int)->None: pass

  def remove_attached_node(self, node:int)->None: pass

  def set_attached_nodes(self, attached_nodes:__core__.PackedInt32Array)->None: pass

  def get_attached_nodes(self)->__core__.PackedInt32Array: pass


