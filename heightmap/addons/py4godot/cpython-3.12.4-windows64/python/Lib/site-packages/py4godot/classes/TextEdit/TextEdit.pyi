from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.TextEdit.TextEdit as __textedit__
import py4godot.classes.PopupMenu.PopupMenu as __popupmenu__
import py4godot.classes.VScrollBar.VScrollBar as __vscrollbar__
import py4godot.classes.TextServer.TextServer as __textserver__
import py4godot.classes.Control.Control as __control__
import py4godot.classes.Texture2D.Texture2D as __texture2d__
import py4godot.classes.SyntaxHighlighter.SyntaxHighlighter as __syntaxhighlighter__
import py4godot.classes.HScrollBar.HScrollBar as __hscrollbar__


class TextEdit(__control__.Control):
  text_set: BuiltinSignal
  text_changed: BuiltinSignal
  lines_edited_from: BuiltinSignal
  caret_changed: BuiltinSignal
  gutter_clicked: BuiltinSignal
  gutter_added: BuiltinSignal
  gutter_removed: BuiltinSignal

  @staticmethod
  def constructor()->TextEdit:pass



  @staticmethod
  def cast(other:__object__.Object)->TextEdit:pass


  @property
  def text(self)->str: pass
  @text.setter
  def text(self,  value:str)->None: pass
  @property
  def placeholder_text(self)->str: pass
  @placeholder_text.setter
  def placeholder_text(self,  value:str)->None: pass
  @property
  def editable(self)->bool: pass
  @editable.setter
  def editable(self,  value:bool)->None: pass
  @property
  def context_menu_enabled(self)->bool: pass
  @context_menu_enabled.setter
  def context_menu_enabled(self,  value:bool)->None: pass
  @property
  def shortcut_keys_enabled(self)->bool: pass
  @shortcut_keys_enabled.setter
  def shortcut_keys_enabled(self,  value:bool)->None: pass
  @property
  def selecting_enabled(self)->bool: pass
  @selecting_enabled.setter
  def selecting_enabled(self,  value:bool)->None: pass
  @property
  def deselect_on_focus_loss_enabled(self)->bool: pass
  @deselect_on_focus_loss_enabled.setter
  def deselect_on_focus_loss_enabled(self,  value:bool)->None: pass
  @property
  def drag_and_drop_selection_enabled(self)->bool: pass
  @drag_and_drop_selection_enabled.setter
  def drag_and_drop_selection_enabled(self,  value:bool)->None: pass
  @property
  def virtual_keyboard_enabled(self)->bool: pass
  @virtual_keyboard_enabled.setter
  def virtual_keyboard_enabled(self,  value:bool)->None: pass
  @property
  def middle_mouse_paste_enabled(self)->bool: pass
  @middle_mouse_paste_enabled.setter
  def middle_mouse_paste_enabled(self,  value:bool)->None: pass
  @property
  def wrap_mode(self)->int: pass
  @wrap_mode.setter
  def wrap_mode(self,  value:int)->None: pass
  @property
  def autowrap_mode(self)->int: pass
  @autowrap_mode.setter
  def autowrap_mode(self,  value:int)->None: pass
  @property
  def indent_wrapped_lines(self)->bool: pass
  @indent_wrapped_lines.setter
  def indent_wrapped_lines(self,  value:bool)->None: pass
  @property
  def scroll_smooth(self)->bool: pass
  @scroll_smooth.setter
  def scroll_smooth(self,  value:bool)->None: pass
  @property
  def scroll_v_scroll_speed(self)->float: pass
  @scroll_v_scroll_speed.setter
  def scroll_v_scroll_speed(self,  value:float)->None: pass
  @property
  def scroll_past_end_of_file(self)->bool: pass
  @scroll_past_end_of_file.setter
  def scroll_past_end_of_file(self,  value:bool)->None: pass
  @property
  def scroll_vertical(self)->float: pass
  @scroll_vertical.setter
  def scroll_vertical(self,  value:float)->None: pass
  @property
  def scroll_horizontal(self)->int: pass
  @scroll_horizontal.setter
  def scroll_horizontal(self,  value:int)->None: pass
  @property
  def scroll_fit_content_height(self)->bool: pass
  @scroll_fit_content_height.setter
  def scroll_fit_content_height(self,  value:bool)->None: pass
  @property
  def minimap_draw(self)->bool: pass
  @minimap_draw.setter
  def minimap_draw(self,  value:bool)->None: pass
  @property
  def minimap_width(self)->int: pass
  @minimap_width.setter
  def minimap_width(self,  value:int)->None: pass
  @property
  def caret_type(self)->int: pass
  @caret_type.setter
  def caret_type(self,  value:int)->None: pass
  @property
  def caret_blink(self)->bool: pass
  @caret_blink.setter
  def caret_blink(self,  value:bool)->None: pass
  @property
  def caret_blink_interval(self)->float: pass
  @caret_blink_interval.setter
  def caret_blink_interval(self,  value:float)->None: pass
  @property
  def caret_draw_when_editable_disabled(self)->bool: pass
  @caret_draw_when_editable_disabled.setter
  def caret_draw_when_editable_disabled(self,  value:bool)->None: pass
  @property
  def caret_move_on_right_click(self)->bool: pass
  @caret_move_on_right_click.setter
  def caret_move_on_right_click(self,  value:bool)->None: pass
  @property
  def caret_mid_grapheme(self)->bool: pass
  @caret_mid_grapheme.setter
  def caret_mid_grapheme(self,  value:bool)->None: pass
  @property
  def caret_multiple(self)->bool: pass
  @caret_multiple.setter
  def caret_multiple(self,  value:bool)->None: pass
  @property
  def use_default_word_separators(self)->bool: pass
  @use_default_word_separators.setter
  def use_default_word_separators(self,  value:bool)->None: pass
  @property
  def use_custom_word_separators(self)->bool: pass
  @use_custom_word_separators.setter
  def use_custom_word_separators(self,  value:bool)->None: pass
  @property
  def custom_word_separators(self)->str: pass
  @custom_word_separators.setter
  def custom_word_separators(self,  value:str)->None: pass
  @property
  def syntax_highlighter(self)->__syntaxhighlighter__.SyntaxHighlighter: pass
  @syntax_highlighter.setter
  def syntax_highlighter(self,  value:__syntaxhighlighter__.SyntaxHighlighter)->None: pass
  @property
  def highlight_all_occurrences(self)->bool: pass
  @highlight_all_occurrences.setter
  def highlight_all_occurrences(self,  value:bool)->None: pass
  @property
  def highlight_current_line(self)->bool: pass
  @highlight_current_line.setter
  def highlight_current_line(self,  value:bool)->None: pass
  @property
  def draw_control_chars(self)->bool: pass
  @draw_control_chars.setter
  def draw_control_chars(self,  value:bool)->None: pass
  @property
  def draw_tabs(self)->bool: pass
  @draw_tabs.setter
  def draw_tabs(self,  value:bool)->None: pass
  @property
  def draw_spaces(self)->bool: pass
  @draw_spaces.setter
  def draw_spaces(self,  value:bool)->None: pass
  @property
  def text_direction(self)->int: pass
  @text_direction.setter
  def text_direction(self,  value:int)->None: pass
  @property
  def language(self)->str: pass
  @language.setter
  def language(self,  value:str)->None: pass
  @property
  def structured_text_bidi_override(self)->int: pass
  @structured_text_bidi_override.setter
  def structured_text_bidi_override(self,  value:int)->None: pass
  @property
  def structured_text_bidi_override_options(self)->__core__.Array: pass
  @structured_text_bidi_override_options.setter
  def structured_text_bidi_override_options(self,  value:__core__.Array)->None: pass
  def _handle_unicode_input(self, unicode_char:int, caret_index:int)->None: pass

  def _backspace(self, caret_index:int)->None: pass

  def _cut(self, caret_index:int)->None: pass

  def _copy(self, caret_index:int)->None: pass

  def _paste(self, caret_index:int)->None: pass

  def _paste_primary_clipboard(self, caret_index:int)->None: pass

  def has_ime_text(self)->bool: pass

  def cancel_ime(self)->None: pass

  def apply_ime(self)->None: pass

  def set_editable(self, enabled:bool)->None: pass

  def is_editable(self)->bool: pass

  def set_text_direction(self, direction:int )->None: pass

  def get_text_direction(self)->int: pass

  def set_language(self, language:str)->None: pass

  def get_language(self)->str: pass

  def set_structured_text_bidi_override(self, parser:int )->None: pass

  def get_structured_text_bidi_override(self)->int: pass

  def set_structured_text_bidi_override_options(self, args:__core__.Array)->None: pass

  def get_structured_text_bidi_override_options(self)->__core__.Array: pass

  def set_tab_size(self, size:int)->None: pass

  def get_tab_size(self)->int: pass

  def set_indent_wrapped_lines(self, enabled:bool)->None: pass

  def is_indent_wrapped_lines(self)->bool: pass

  def set_overtype_mode_enabled(self, enabled:bool)->None: pass

  def is_overtype_mode_enabled(self)->bool: pass

  def set_context_menu_enabled(self, enabled:bool)->None: pass

  def is_context_menu_enabled(self)->bool: pass

  def set_shortcut_keys_enabled(self, enabled:bool)->None: pass

  def is_shortcut_keys_enabled(self)->bool: pass

  def set_virtual_keyboard_enabled(self, enabled:bool)->None: pass

  def is_virtual_keyboard_enabled(self)->bool: pass

  def set_middle_mouse_paste_enabled(self, enabled:bool)->None: pass

  def is_middle_mouse_paste_enabled(self)->bool: pass

  def clear(self)->None: pass

  def set_text(self, text:str)->None: pass

  def get_text(self)->str: pass

  def get_line_count(self)->int: pass

  def set_placeholder(self, text:str)->None: pass

  def get_placeholder(self)->str: pass

  def set_line(self, line:int, new_text:str)->None: pass

  def get_line(self, line:int)->str: pass

  def get_line_width(self, line:int, wrap_index:int=-1)->int: pass

  def get_line_height(self)->int: pass

  def get_indent_level(self, line:int)->int: pass

  def get_first_non_whitespace_column(self, line:int)->int: pass

  def swap_lines(self, from_line:int, to_line:int)->None: pass

  def insert_line_at(self, line:int, text:str)->None: pass

  def remove_line_at(self, line:int, move_carets_down:bool=True)->None: pass

  def insert_text_at_caret(self, text:str, caret_index:int=-1)->None: pass

  def insert_text(self, text:str, line:int, column:int, before_selection_begin:bool=True, before_selection_end:bool=False)->None: pass

  def remove_text(self, from_line:int, from_column:int, to_line:int, to_column:int)->None: pass

  def get_last_unhidden_line(self)->int: pass

  def get_next_visible_line_offset_from(self, line:int, visible_amount:int)->int: pass

  def get_next_visible_line_index_offset_from(self, line:int, wrap_index:int, visible_amount:int)->__core__.Vector2i: pass

  def backspace(self, caret_index:int=-1)->None: pass

  def cut(self, caret_index:int=-1)->None: pass

  def copy(self, caret_index:int=-1)->None: pass

  def paste(self, caret_index:int=-1)->None: pass

  def paste_primary_clipboard(self, caret_index:int=-1)->None: pass

  def start_action(self, action:int )->None: pass

  def end_action(self)->None: pass

  def begin_complex_operation(self)->None: pass

  def end_complex_operation(self)->None: pass

  def has_undo(self)->bool: pass

  def has_redo(self)->bool: pass

  def undo(self)->None: pass

  def redo(self)->None: pass

  def clear_undo_history(self)->None: pass

  def tag_saved_version(self)->None: pass

  def get_version(self)->int: pass

  def get_saved_version(self)->int: pass

  def set_search_text(self, search_text:str)->None: pass

  def set_search_flags(self, flags:int)->None: pass

  def search(self, text:str, flags:int, from_line:int, from_column:int)->__core__.Vector2i: pass

  def set_tooltip_request_func(self, callback:__core__.Callable)->None: pass

  def get_local_mouse_pos(self)->__core__.Vector2: pass

  def get_word_at_pos(self, position:__core__.Vector2)->str: pass

  def get_line_column_at_pos(self, position:__core__.Vector2i, allow_out_of_bounds:bool=True)->__core__.Vector2i: pass

  def get_pos_at_line_column(self, line:int, column:int)->__core__.Vector2i: pass

  def get_rect_at_line_column(self, line:int, column:int)->__core__.Rect2i: pass

  def get_minimap_line_at_pos(self, position:__core__.Vector2i)->int: pass

  def is_dragging_cursor(self)->bool: pass

  def is_mouse_over_selection(self, edges:bool, caret_index:int=-1)->bool: pass

  def set_caret_type(self, type:int )->None: pass

  def get_caret_type(self)->int: pass

  def set_caret_blink_enabled(self, enable:bool)->None: pass

  def is_caret_blink_enabled(self)->bool: pass

  def set_caret_blink_interval(self, interval:float)->None: pass

  def get_caret_blink_interval(self)->float: pass

  def set_draw_caret_when_editable_disabled(self, enable:bool)->None: pass

  def is_drawing_caret_when_editable_disabled(self)->bool: pass

  def set_move_caret_on_right_click_enabled(self, enable:bool)->None: pass

  def is_move_caret_on_right_click_enabled(self)->bool: pass

  def set_caret_mid_grapheme_enabled(self, enabled:bool)->None: pass

  def is_caret_mid_grapheme_enabled(self)->bool: pass

  def set_multiple_carets_enabled(self, enabled:bool)->None: pass

  def is_multiple_carets_enabled(self)->bool: pass

  def add_caret(self, line:int, column:int)->int: pass

  def remove_caret(self, caret:int)->None: pass

  def remove_secondary_carets(self)->None: pass

  def get_caret_count(self)->int: pass

  def add_caret_at_carets(self, below:bool)->None: pass

  def get_sorted_carets(self, include_ignored_carets:bool=False)->__core__.PackedInt32Array: pass

  def collapse_carets(self, from_line:int, from_column:int, to_line:int, to_column:int, inclusive:bool=False)->None: pass

  def merge_overlapping_carets(self)->None: pass

  def begin_multicaret_edit(self)->None: pass

  def end_multicaret_edit(self)->None: pass

  def is_in_mulitcaret_edit(self)->bool: pass

  def multicaret_edit_ignore_caret(self, caret_index:int)->bool: pass

  def is_caret_visible(self, caret_index:int=0)->bool: pass

  def get_caret_draw_pos(self, caret_index:int=0)->__core__.Vector2: pass

  def set_caret_line(self, line:int, adjust_viewport:bool=True, can_be_hidden:bool=True, wrap_index:int=0, caret_index:int=0)->None: pass

  def get_caret_line(self, caret_index:int=0)->int: pass

  def set_caret_column(self, column:int, adjust_viewport:bool=True, caret_index:int=0)->None: pass

  def get_caret_column(self, caret_index:int=0)->int: pass

  def get_caret_wrap_index(self, caret_index:int=0)->int: pass

  def get_word_under_caret(self, caret_index:int=-1)->str: pass

  def set_use_default_word_separators(self, enabled:bool)->None: pass

  def is_default_word_separators_enabled(self)->bool: pass

  def set_use_custom_word_separators(self, enabled:bool)->None: pass

  def is_custom_word_separators_enabled(self)->bool: pass

  def set_custom_word_separators(self, custom_word_separators:str)->None: pass

  def get_custom_word_separators(self)->str: pass

  def set_selecting_enabled(self, enable:bool)->None: pass

  def is_selecting_enabled(self)->bool: pass

  def set_deselect_on_focus_loss_enabled(self, enable:bool)->None: pass

  def is_deselect_on_focus_loss_enabled(self)->bool: pass

  def set_drag_and_drop_selection_enabled(self, enable:bool)->None: pass

  def is_drag_and_drop_selection_enabled(self)->bool: pass

  def set_selection_mode(self, mode:int )->None: pass

  def get_selection_mode(self)->int: pass

  def select_all(self)->None: pass

  def select_word_under_caret(self, caret_index:int=-1)->None: pass

  def add_selection_for_next_occurrence(self)->None: pass

  def skip_selection_for_next_occurrence(self)->None: pass

  def select(self, origin_line:int, origin_column:int, caret_line:int, caret_column:int, caret_index:int=0)->None: pass

  def has_selection(self, caret_index:int=-1)->bool: pass

  def get_selected_text(self, caret_index:int=-1)->str: pass

  def get_selection_at_line_column(self, line:int, column:int, include_edges:bool=True, only_selections:bool=True)->int: pass

  def get_line_ranges_from_carets(self, only_selections:bool=False, merge_adjacent:bool=True)->__core__.Array: pass

  def get_selection_origin_line(self, caret_index:int=0)->int: pass

  def get_selection_origin_column(self, caret_index:int=0)->int: pass

  def set_selection_origin_line(self, line:int, can_be_hidden:bool=True, wrap_index:int=-1, caret_index:int=0)->None: pass

  def set_selection_origin_column(self, column:int, caret_index:int=0)->None: pass

  def get_selection_from_line(self, caret_index:int=0)->int: pass

  def get_selection_from_column(self, caret_index:int=0)->int: pass

  def get_selection_to_line(self, caret_index:int=0)->int: pass

  def get_selection_to_column(self, caret_index:int=0)->int: pass

  def is_caret_after_selection_origin(self, caret_index:int=0)->bool: pass

  def deselect(self, caret_index:int=-1)->None: pass

  def delete_selection(self, caret_index:int=-1)->None: pass

  def set_line_wrapping_mode(self, mode:int )->None: pass

  def get_line_wrapping_mode(self)->int: pass

  def set_autowrap_mode(self, autowrap_mode:int )->None: pass

  def get_autowrap_mode(self)->int: pass

  def is_line_wrapped(self, line:int)->bool: pass

  def get_line_wrap_count(self, line:int)->int: pass

  def get_line_wrap_index_at_column(self, line:int, column:int)->int: pass

  def get_line_wrapped_text(self, line:int)->__core__.PackedStringArray: pass

  def set_smooth_scroll_enabled(self, enable:bool)->None: pass

  def is_smooth_scroll_enabled(self)->bool: pass

  def get_v_scroll_bar(self)->__vscrollbar__.VScrollBar: pass

  def get_h_scroll_bar(self)->__hscrollbar__.HScrollBar: pass

  def set_v_scroll(self, value:float)->None: pass

  def get_v_scroll(self)->float: pass

  def set_h_scroll(self, value:int)->None: pass

  def get_h_scroll(self)->int: pass

  def set_scroll_past_end_of_file_enabled(self, enable:bool)->None: pass

  def is_scroll_past_end_of_file_enabled(self)->bool: pass

  def set_v_scroll_speed(self, speed:float)->None: pass

  def get_v_scroll_speed(self)->float: pass

  def set_fit_content_height_enabled(self, enabled:bool)->None: pass

  def is_fit_content_height_enabled(self)->bool: pass

  def get_scroll_pos_for_line(self, line:int, wrap_index:int=0)->float: pass

  def set_line_as_first_visible(self, line:int, wrap_index:int=0)->None: pass

  def get_first_visible_line(self)->int: pass

  def set_line_as_center_visible(self, line:int, wrap_index:int=0)->None: pass

  def set_line_as_last_visible(self, line:int, wrap_index:int=0)->None: pass

  def get_last_full_visible_line(self)->int: pass

  def get_last_full_visible_line_wrap_index(self)->int: pass

  def get_visible_line_count(self)->int: pass

  def get_visible_line_count_in_range(self, from_line:int, to_line:int)->int: pass

  def get_total_visible_line_count(self)->int: pass

  def adjust_viewport_to_caret(self, caret_index:int=0)->None: pass

  def center_viewport_to_caret(self, caret_index:int=0)->None: pass

  def set_draw_minimap(self, enabled:bool)->None: pass

  def is_drawing_minimap(self)->bool: pass

  def set_minimap_width(self, width:int)->None: pass

  def get_minimap_width(self)->int: pass

  def get_minimap_visible_lines(self)->int: pass

  def add_gutter(self, at:int=-1)->None: pass

  def remove_gutter(self, gutter:int)->None: pass

  def get_gutter_count(self)->int: pass

  def set_gutter_name(self, gutter:int, name:str)->None: pass

  def get_gutter_name(self, gutter:int)->str: pass

  def set_gutter_type(self, gutter:int, type:int )->None: pass

  def get_gutter_type(self, gutter:int)->int: pass

  def set_gutter_width(self, gutter:int, width:int)->None: pass

  def get_gutter_width(self, gutter:int)->int: pass

  def set_gutter_draw(self, gutter:int, draw:bool)->None: pass

  def is_gutter_drawn(self, gutter:int)->bool: pass

  def set_gutter_clickable(self, gutter:int, clickable:bool)->None: pass

  def is_gutter_clickable(self, gutter:int)->bool: pass

  def set_gutter_overwritable(self, gutter:int, overwritable:bool)->None: pass

  def is_gutter_overwritable(self, gutter:int)->bool: pass

  def merge_gutters(self, from_line:int, to_line:int)->None: pass

  def set_gutter_custom_draw(self, column:int, draw_callback:__core__.Callable)->None: pass

  def get_total_gutter_width(self)->int: pass

  def set_line_gutter_metadata(self, line:int, gutter:int, metadata:object)->None: pass

  def get_line_gutter_metadata(self, line:int, gutter:int)->object: pass

  def set_line_gutter_text(self, line:int, gutter:int, text:str)->None: pass

  def get_line_gutter_text(self, line:int, gutter:int)->str: pass

  def set_line_gutter_icon(self, line:int, gutter:int, icon:__texture2d__.Texture2D)->None: pass

  def get_line_gutter_icon(self, line:int, gutter:int)->__texture2d__.Texture2D: pass

  def set_line_gutter_item_color(self, line:int, gutter:int, color:__core__.Color)->None: pass

  def get_line_gutter_item_color(self, line:int, gutter:int)->__core__.Color: pass

  def set_line_gutter_clickable(self, line:int, gutter:int, clickable:bool)->None: pass

  def is_line_gutter_clickable(self, line:int, gutter:int)->bool: pass

  def set_line_background_color(self, line:int, color:__core__.Color)->None: pass

  def get_line_background_color(self, line:int)->__core__.Color: pass

  def set_syntax_highlighter(self, syntax_highlighter:__syntaxhighlighter__.SyntaxHighlighter)->None: pass

  def get_syntax_highlighter(self)->__syntaxhighlighter__.SyntaxHighlighter: pass

  def set_highlight_current_line(self, enabled:bool)->None: pass

  def is_highlight_current_line_enabled(self)->bool: pass

  def set_highlight_all_occurrences(self, enabled:bool)->None: pass

  def is_highlight_all_occurrences_enabled(self)->bool: pass

  def get_draw_control_chars(self)->bool: pass

  def set_draw_control_chars(self, enabled:bool)->None: pass

  def set_draw_tabs(self, enabled:bool)->None: pass

  def is_drawing_tabs(self)->bool: pass

  def set_draw_spaces(self, enabled:bool)->None: pass

  def is_drawing_spaces(self)->bool: pass

  def get_menu(self)->__popupmenu__.PopupMenu: pass

  def is_menu_visible(self)->bool: pass

  def menu_option(self, option:int)->None: pass

  def adjust_carets_after_edit(self, caret:int, from_line:int, from_col:int, to_line:int, to_col:int)->None: pass

  def get_caret_index_edit_order(self)->__core__.PackedInt32Array: pass

  def get_selection_line(self, caret_index:int=0)->int: pass

  def get_selection_column(self, caret_index:int=0)->int: pass


