from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.RefCounted.RefCounted as __refcounted__
import py4godot.classes.PhysicsRayQueryParameters2D.PhysicsRayQueryParameters2D as __physicsrayqueryparameters2d__


class PhysicsRayQueryParameters2D(__refcounted__.RefCounted):

  @staticmethod
  def constructor()->PhysicsRayQueryParameters2D:pass



  @staticmethod
  def cast(other:__object__.Object)->PhysicsRayQueryParameters2D:pass


  @property
  def from_(self)->__core__.Vector2: pass
  @from_.setter
  def from_(self,  value:__core__.Vector2)->None: pass
  @property
  def to(self)->__core__.Vector2: pass
  @to.setter
  def to(self,  value:__core__.Vector2)->None: pass
  @property
  def collision_mask(self)->int: pass
  @collision_mask.setter
  def collision_mask(self,  value:int)->None: pass
  @property
  def exclude(self)->typedarray::RID: pass
  @exclude.setter
  def exclude(self,  value:__core__.Array)->None: pass
  @property
  def collide_with_bodies(self)->bool: pass
  @collide_with_bodies.setter
  def collide_with_bodies(self,  value:bool)->None: pass
  @property
  def collide_with_areas(self)->bool: pass
  @collide_with_areas.setter
  def collide_with_areas(self,  value:bool)->None: pass
  @property
  def hit_from_inside(self)->bool: pass
  @hit_from_inside.setter
  def hit_from_inside(self,  value:bool)->None: pass
  @staticmethod
  def create(from_:__core__.Vector2, to:__core__.Vector2, collision_mask:int=4294967295, exclude:__core__.Array=Array[RID]([]))->__physicsrayqueryparameters2d__.PhysicsRayQueryParameters2D: pass

  def set_from(self, from_:__core__.Vector2)->None: pass

  def get_from(self)->__core__.Vector2: pass

  def set_to(self, to:__core__.Vector2)->None: pass

  def get_to(self)->__core__.Vector2: pass

  def set_collision_mask(self, collision_mask:int)->None: pass

  def get_collision_mask(self)->int: pass

  def set_exclude(self, exclude:__core__.Array)->None: pass

  def get_exclude(self)->__core__.Array: pass

  def set_collide_with_bodies(self, enable:bool)->None: pass

  def is_collide_with_bodies_enabled(self)->bool: pass

  def set_collide_with_areas(self, enable:bool)->None: pass

  def is_collide_with_areas_enabled(self)->bool: pass

  def set_hit_from_inside(self, enable:bool)->None: pass

  def is_hit_from_inside_enabled(self)->bool: pass


