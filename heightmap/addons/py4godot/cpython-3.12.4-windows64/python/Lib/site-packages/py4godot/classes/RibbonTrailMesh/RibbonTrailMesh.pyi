from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.PrimitiveMesh.PrimitiveMesh as __primitivemesh__
import py4godot.classes.Curve.Curve as __curve__
import py4godot.classes.RibbonTrailMesh.RibbonTrailMesh as __ribbontrailmesh__


class RibbonTrailMesh(__primitivemesh__.PrimitiveMesh):

  @staticmethod
  def constructor()->RibbonTrailMesh:pass



  @staticmethod
  def cast(other:__object__.Object)->RibbonTrailMesh:pass


  @property
  def shape(self)->int: pass
  @shape.setter
  def shape(self,  value:int)->None: pass
  @property
  def size(self)->float: pass
  @size.setter
  def size(self,  value:float)->None: pass
  @property
  def sections(self)->int: pass
  @sections.setter
  def sections(self,  value:int)->None: pass
  @property
  def section_length(self)->float: pass
  @section_length.setter
  def section_length(self,  value:float)->None: pass
  @property
  def section_segments(self)->int: pass
  @section_segments.setter
  def section_segments(self,  value:int)->None: pass
  @property
  def curve(self)->__curve__.Curve: pass
  @curve.setter
  def curve(self,  value:__curve__.Curve)->None: pass
  def set_size(self, size:float)->None: pass

  def get_size(self)->float: pass

  def set_sections(self, sections:int)->None: pass

  def get_sections(self)->int: pass

  def set_section_length(self, section_length:float)->None: pass

  def get_section_length(self)->float: pass

  def set_section_segments(self, section_segments:int)->None: pass

  def get_section_segments(self)->int: pass

  def set_curve(self, curve:__curve__.Curve)->None: pass

  def get_curve(self)->__curve__.Curve: pass

  def set_shape(self, shape:int )->None: pass

  def get_shape(self)->int: pass


