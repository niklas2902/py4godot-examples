from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.RenderSceneBuffers.RenderSceneBuffers as __renderscenebuffers__
import py4godot.classes.RDTextureView.RDTextureView as __rdtextureview__
import py4godot.classes.RenderingDevice.RenderingDevice as __renderingdevice__
import py4godot.classes.RDTextureFormat.RDTextureFormat as __rdtextureformat__
import py4godot.classes.RenderingServer.RenderingServer as __renderingserver__


class RenderSceneBuffersRD(__renderscenebuffers__.RenderSceneBuffers):

  @staticmethod
  def constructor()->RenderSceneBuffersRD:pass



  @staticmethod
  def cast(other:__object__.Object)->RenderSceneBuffersRD:pass


  def has_texture(self, context:__core__.StringName, name:__core__.StringName)->bool: pass

  def create_texture(self, context:__core__.StringName, name:__core__.StringName, data_format:int , usage_bits:int, texture_samples:int , size:__core__.Vector2i, layers:int, mipmaps:int, unique:bool)->__core__.RID: pass

  def create_texture_from_format(self, context:__core__.StringName, name:__core__.StringName, format:__rdtextureformat__.RDTextureFormat, view:__rdtextureview__.RDTextureView, unique:bool)->__core__.RID: pass

  def create_texture_view(self, context:__core__.StringName, name:__core__.StringName, view_name:__core__.StringName, view:__rdtextureview__.RDTextureView)->__core__.RID: pass

  def get_texture(self, context:__core__.StringName, name:__core__.StringName)->__core__.RID: pass

  def get_texture_format(self, context:__core__.StringName, name:__core__.StringName)->__rdtextureformat__.RDTextureFormat: pass

  def get_texture_slice(self, context:__core__.StringName, name:__core__.StringName, layer:int, mipmap:int, layers:int, mipmaps:int)->__core__.RID: pass

  def get_texture_slice_view(self, context:__core__.StringName, name:__core__.StringName, layer:int, mipmap:int, layers:int, mipmaps:int, view:__rdtextureview__.RDTextureView)->__core__.RID: pass

  def get_texture_slice_size(self, context:__core__.StringName, name:__core__.StringName, mipmap:int)->__core__.Vector2i: pass

  def clear_context(self, context:__core__.StringName)->None: pass

  def get_color_texture(self, msaa:bool=False)->__core__.RID: pass

  def get_color_layer(self, layer:int, msaa:bool=False)->__core__.RID: pass

  def get_depth_texture(self, msaa:bool=False)->__core__.RID: pass

  def get_depth_layer(self, layer:int, msaa:bool=False)->__core__.RID: pass

  def get_velocity_texture(self, msaa:bool=False)->__core__.RID: pass

  def get_velocity_layer(self, layer:int, msaa:bool=False)->__core__.RID: pass

  def get_render_target(self)->__core__.RID: pass

  def get_view_count(self)->int: pass

  def get_internal_size(self)->__core__.Vector2i: pass

  def get_target_size(self)->__core__.Vector2i: pass

  def get_scaling_3d_mode(self)->int: pass

  def get_fsr_sharpness(self)->float: pass

  def get_msaa_3d(self)->int: pass

  def get_texture_samples(self)->int: pass

  def get_screen_space_aa(self)->int: pass

  def get_use_taa(self)->bool: pass

  def get_use_debanding(self)->bool: pass


