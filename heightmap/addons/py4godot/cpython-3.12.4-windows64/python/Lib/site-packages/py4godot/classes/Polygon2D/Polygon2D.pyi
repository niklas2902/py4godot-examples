from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Node2D.Node2D as __node2d__
import py4godot.classes.Texture2D.Texture2D as __texture2d__


class Polygon2D(__node2d__.Node2D):

  @staticmethod
  def constructor()->Polygon2D:pass



  @staticmethod
  def cast(other:__object__.Object)->Polygon2D:pass


  @property
  def color(self)->__core__.Color: pass
  @color.setter
  def color(self,  value:__core__.Color)->None: pass
  @property
  def offset(self)->__core__.Vector2: pass
  @offset.setter
  def offset(self,  value:__core__.Vector2)->None: pass
  @property
  def antialiased(self)->bool: pass
  @antialiased.setter
  def antialiased(self,  value:bool)->None: pass
  @property
  def texture(self)->__texture2d__.Texture2D: pass
  @texture.setter
  def texture(self,  value:__texture2d__.Texture2D)->None: pass
  @property
  def texture_offset(self)->__core__.Vector2: pass
  @texture_offset.setter
  def texture_offset(self,  value:__core__.Vector2)->None: pass
  @property
  def texture_scale(self)->__core__.Vector2: pass
  @texture_scale.setter
  def texture_scale(self,  value:__core__.Vector2)->None: pass
  @property
  def texture_rotation(self)->float: pass
  @texture_rotation.setter
  def texture_rotation(self,  value:float)->None: pass
  @property
  def skeleton(self)->__core__.NodePath: pass
  @skeleton.setter
  def skeleton(self,  value:__core__.NodePath)->None: pass
  @property
  def invert_enabled(self)->bool: pass
  @invert_enabled.setter
  def invert_enabled(self,  value:bool)->None: pass
  @property
  def invert_border(self)->float: pass
  @invert_border.setter
  def invert_border(self,  value:float)->None: pass
  @property
  def polygon(self)->__core__.PackedVector2Array: pass
  @polygon.setter
  def polygon(self,  value:__core__.PackedVector2Array)->None: pass
  @property
  def uv(self)->__core__.PackedVector2Array: pass
  @uv.setter
  def uv(self,  value:__core__.PackedVector2Array)->None: pass
  @property
  def vertex_colors(self)->__core__.PackedColorArray: pass
  @vertex_colors.setter
  def vertex_colors(self,  value:__core__.PackedColorArray)->None: pass
  @property
  def polygons(self)->__core__.Array: pass
  @polygons.setter
  def polygons(self,  value:__core__.Array)->None: pass
  @property
  def bones(self)->__core__.Array: pass
  @bones.setter
  def bones(self,  value:__core__.Array)->None: pass
  @property
  def internal_vertex_count(self)->int: pass
  @internal_vertex_count.setter
  def internal_vertex_count(self,  value:int)->None: pass
  def set_polygon(self, polygon:__core__.PackedVector2Array)->None: pass

  def get_polygon(self)->__core__.PackedVector2Array: pass

  def set_uv(self, uv:__core__.PackedVector2Array)->None: pass

  def get_uv(self)->__core__.PackedVector2Array: pass

  def set_color(self, color:__core__.Color)->None: pass

  def get_color(self)->__core__.Color: pass

  def set_polygons(self, polygons:__core__.Array)->None: pass

  def get_polygons(self)->__core__.Array: pass

  def set_vertex_colors(self, vertex_colors:__core__.PackedColorArray)->None: pass

  def get_vertex_colors(self)->__core__.PackedColorArray: pass

  def set_texture(self, texture:__texture2d__.Texture2D)->None: pass

  def get_texture(self)->__texture2d__.Texture2D: pass

  def set_texture_offset(self, texture_offset:__core__.Vector2)->None: pass

  def get_texture_offset(self)->__core__.Vector2: pass

  def set_texture_rotation(self, texture_rotation:float)->None: pass

  def get_texture_rotation(self)->float: pass

  def set_texture_scale(self, texture_scale:__core__.Vector2)->None: pass

  def get_texture_scale(self)->__core__.Vector2: pass

  def set_invert_enabled(self, invert:bool)->None: pass

  def get_invert_enabled(self)->bool: pass

  def set_antialiased(self, antialiased:bool)->None: pass

  def get_antialiased(self)->bool: pass

  def set_invert_border(self, invert_border:float)->None: pass

  def get_invert_border(self)->float: pass

  def set_offset(self, offset:__core__.Vector2)->None: pass

  def get_offset(self)->__core__.Vector2: pass

  def add_bone(self, path:__core__.NodePath, weights:__core__.PackedFloat32Array)->None: pass

  def get_bone_count(self)->int: pass

  def get_bone_path(self, index:int)->__core__.NodePath: pass

  def get_bone_weights(self, index:int)->__core__.PackedFloat32Array: pass

  def erase_bone(self, index:int)->None: pass

  def clear_bones(self)->None: pass

  def set_bone_path(self, index:int, path:__core__.NodePath)->None: pass

  def set_bone_weights(self, index:int, weights:__core__.PackedFloat32Array)->None: pass

  def set_skeleton(self, skeleton:__core__.NodePath)->None: pass

  def get_skeleton(self)->__core__.NodePath: pass

  def set_internal_vertex_count(self, internal_vertex_count:int)->None: pass

  def get_internal_vertex_count(self)->int: pass


