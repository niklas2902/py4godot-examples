from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Font.Font as __font__
import py4godot.classes.TextServer.TextServer as __textserver__
import py4godot.classes.Image.Image as __image__


class FontFile(__font__.Font):

  @staticmethod
  def constructor()->FontFile:pass



  @staticmethod
  def cast(other:__object__.Object)->FontFile:pass


  @property
  def data(self)->__core__.PackedByteArray: pass
  @data.setter
  def data(self,  value:__core__.PackedByteArray)->None: pass
  @property
  def generate_mipmaps(self)->bool: pass
  @generate_mipmaps.setter
  def generate_mipmaps(self,  value:bool)->None: pass
  @property
  def disable_embedded_bitmaps(self)->bool: pass
  @disable_embedded_bitmaps.setter
  def disable_embedded_bitmaps(self,  value:bool)->None: pass
  @property
  def antialiasing(self)->int: pass
  @antialiasing.setter
  def antialiasing(self,  value:int)->None: pass
  @property
  def font_name(self)->str: pass
  @font_name.setter
  def font_name(self,  value:str)->None: pass
  @property
  def style_name(self)->str: pass
  @style_name.setter
  def style_name(self,  value:str)->None: pass
  @property
  def font_style(self)->int: pass
  @font_style.setter
  def font_style(self,  value:int)->None: pass
  @property
  def font_weight(self)->int: pass
  @font_weight.setter
  def font_weight(self,  value:int)->None: pass
  @property
  def font_stretch(self)->int: pass
  @font_stretch.setter
  def font_stretch(self,  value:int)->None: pass
  @property
  def subpixel_positioning(self)->int: pass
  @subpixel_positioning.setter
  def subpixel_positioning(self,  value:int)->None: pass
  @property
  def multichannel_signed_distance_field(self)->bool: pass
  @multichannel_signed_distance_field.setter
  def multichannel_signed_distance_field(self,  value:bool)->None: pass
  @property
  def msdf_pixel_range(self)->int: pass
  @msdf_pixel_range.setter
  def msdf_pixel_range(self,  value:int)->None: pass
  @property
  def msdf_size(self)->int: pass
  @msdf_size.setter
  def msdf_size(self,  value:int)->None: pass
  @property
  def allow_system_fallback(self)->bool: pass
  @allow_system_fallback.setter
  def allow_system_fallback(self,  value:bool)->None: pass
  @property
  def force_autohinter(self)->bool: pass
  @force_autohinter.setter
  def force_autohinter(self,  value:bool)->None: pass
  @property
  def hinting(self)->int: pass
  @hinting.setter
  def hinting(self,  value:int)->None: pass
  @property
  def oversampling(self)->float: pass
  @oversampling.setter
  def oversampling(self,  value:float)->None: pass
  @property
  def fixed_size(self)->int: pass
  @fixed_size.setter
  def fixed_size(self,  value:int)->None: pass
  @property
  def fixed_size_scale_mode(self)->int: pass
  @fixed_size_scale_mode.setter
  def fixed_size_scale_mode(self,  value:int)->None: pass
  @property
  def opentype_feature_overrides(self)->__core__.Dictionary: pass
  @opentype_feature_overrides.setter
  def opentype_feature_overrides(self,  value:__core__.Dictionary)->None: pass
  def load_bitmap_font(self, path:str)->int: pass

  def load_dynamic_font(self, path:str)->int: pass

  def set_data(self, data:__core__.PackedByteArray)->None: pass

  def get_data(self)->__core__.PackedByteArray: pass

  def set_font_name(self, name:str)->None: pass

  def set_font_style_name(self, name:str)->None: pass

  def set_font_style(self, style:int)->None: pass

  def set_font_weight(self, weight:int)->None: pass

  def set_font_stretch(self, stretch:int)->None: pass

  def set_antialiasing(self, antialiasing:int )->None: pass

  def get_antialiasing(self)->int: pass

  def set_disable_embedded_bitmaps(self, disable_embedded_bitmaps:bool)->None: pass

  def get_disable_embedded_bitmaps(self)->bool: pass

  def set_generate_mipmaps(self, generate_mipmaps:bool)->None: pass

  def get_generate_mipmaps(self)->bool: pass

  def set_multichannel_signed_distance_field(self, msdf:bool)->None: pass

  def is_multichannel_signed_distance_field(self)->bool: pass

  def set_msdf_pixel_range(self, msdf_pixel_range:int)->None: pass

  def get_msdf_pixel_range(self)->int: pass

  def set_msdf_size(self, msdf_size:int)->None: pass

  def get_msdf_size(self)->int: pass

  def set_fixed_size(self, fixed_size:int)->None: pass

  def get_fixed_size(self)->int: pass

  def set_fixed_size_scale_mode(self, fixed_size_scale_mode:int )->None: pass

  def get_fixed_size_scale_mode(self)->int: pass

  def set_allow_system_fallback(self, allow_system_fallback:bool)->None: pass

  def is_allow_system_fallback(self)->bool: pass

  def set_force_autohinter(self, force_autohinter:bool)->None: pass

  def is_force_autohinter(self)->bool: pass

  def set_hinting(self, hinting:int )->None: pass

  def get_hinting(self)->int: pass

  def set_subpixel_positioning(self, subpixel_positioning:int )->None: pass

  def get_subpixel_positioning(self)->int: pass

  def set_oversampling(self, oversampling:float)->None: pass

  def get_oversampling(self)->float: pass

  def get_cache_count(self)->int: pass

  def clear_cache(self)->None: pass

  def remove_cache(self, cache_index:int)->None: pass

  def get_size_cache_list(self, cache_index:int)->__core__.Array: pass

  def clear_size_cache(self, cache_index:int)->None: pass

  def remove_size_cache(self, cache_index:int, size:__core__.Vector2i)->None: pass

  def set_variation_coordinates(self, cache_index:int, variation_coordinates:__core__.Dictionary)->None: pass

  def get_variation_coordinates(self, cache_index:int)->__core__.Dictionary: pass

  def set_embolden(self, cache_index:int, strength:float)->None: pass

  def get_embolden(self, cache_index:int)->float: pass

  def set_transform(self, cache_index:int, transform:__core__.Transform2D)->None: pass

  def get_transform(self, cache_index:int)->__core__.Transform2D: pass

  def set_extra_spacing(self, cache_index:int, spacing:int , value:int)->None: pass

  def get_extra_spacing(self, cache_index:int, spacing:int )->int: pass

  def set_extra_baseline_offset(self, cache_index:int, baseline_offset:float)->None: pass

  def get_extra_baseline_offset(self, cache_index:int)->float: pass

  def set_face_index(self, cache_index:int, face_index:int)->None: pass

  def get_face_index(self, cache_index:int)->int: pass

  def set_cache_ascent(self, cache_index:int, size:int, ascent:float)->None: pass

  def get_cache_ascent(self, cache_index:int, size:int)->float: pass

  def set_cache_descent(self, cache_index:int, size:int, descent:float)->None: pass

  def get_cache_descent(self, cache_index:int, size:int)->float: pass

  def set_cache_underline_position(self, cache_index:int, size:int, underline_position:float)->None: pass

  def get_cache_underline_position(self, cache_index:int, size:int)->float: pass

  def set_cache_underline_thickness(self, cache_index:int, size:int, underline_thickness:float)->None: pass

  def get_cache_underline_thickness(self, cache_index:int, size:int)->float: pass

  def set_cache_scale(self, cache_index:int, size:int, scale:float)->None: pass

  def get_cache_scale(self, cache_index:int, size:int)->float: pass

  def get_texture_count(self, cache_index:int, size:__core__.Vector2i)->int: pass

  def clear_textures(self, cache_index:int, size:__core__.Vector2i)->None: pass

  def remove_texture(self, cache_index:int, size:__core__.Vector2i, texture_index:int)->None: pass

  def set_texture_image(self, cache_index:int, size:__core__.Vector2i, texture_index:int, image:__image__.Image)->None: pass

  def get_texture_image(self, cache_index:int, size:__core__.Vector2i, texture_index:int)->__image__.Image: pass

  def set_texture_offsets(self, cache_index:int, size:__core__.Vector2i, texture_index:int, offset:__core__.PackedInt32Array)->None: pass

  def get_texture_offsets(self, cache_index:int, size:__core__.Vector2i, texture_index:int)->__core__.PackedInt32Array: pass

  def get_glyph_list(self, cache_index:int, size:__core__.Vector2i)->__core__.PackedInt32Array: pass

  def clear_glyphs(self, cache_index:int, size:__core__.Vector2i)->None: pass

  def remove_glyph(self, cache_index:int, size:__core__.Vector2i, glyph:int)->None: pass

  def set_glyph_advance(self, cache_index:int, size:int, glyph:int, advance:__core__.Vector2)->None: pass

  def get_glyph_advance(self, cache_index:int, size:int, glyph:int)->__core__.Vector2: pass

  def set_glyph_offset(self, cache_index:int, size:__core__.Vector2i, glyph:int, offset:__core__.Vector2)->None: pass

  def get_glyph_offset(self, cache_index:int, size:__core__.Vector2i, glyph:int)->__core__.Vector2: pass

  def set_glyph_size(self, cache_index:int, size:__core__.Vector2i, glyph:int, gl_size:__core__.Vector2)->None: pass

  def get_glyph_size(self, cache_index:int, size:__core__.Vector2i, glyph:int)->__core__.Vector2: pass

  def set_glyph_uv_rect(self, cache_index:int, size:__core__.Vector2i, glyph:int, uv_rect:__core__.Rect2)->None: pass

  def get_glyph_uv_rect(self, cache_index:int, size:__core__.Vector2i, glyph:int)->__core__.Rect2: pass

  def set_glyph_texture_idx(self, cache_index:int, size:__core__.Vector2i, glyph:int, texture_idx:int)->None: pass

  def get_glyph_texture_idx(self, cache_index:int, size:__core__.Vector2i, glyph:int)->int: pass

  def get_kerning_list(self, cache_index:int, size:int)->__core__.Array: pass

  def clear_kerning_map(self, cache_index:int, size:int)->None: pass

  def remove_kerning(self, cache_index:int, size:int, glyph_pair:__core__.Vector2i)->None: pass

  def set_kerning(self, cache_index:int, size:int, glyph_pair:__core__.Vector2i, kerning:__core__.Vector2)->None: pass

  def get_kerning(self, cache_index:int, size:int, glyph_pair:__core__.Vector2i)->__core__.Vector2: pass

  def render_range(self, cache_index:int, size:__core__.Vector2i, start:int, end:int)->None: pass

  def render_glyph(self, cache_index:int, size:__core__.Vector2i, index:int)->None: pass

  def set_language_support_override(self, language:str, supported:bool)->None: pass

  def get_language_support_override(self, language:str)->bool: pass

  def remove_language_support_override(self, language:str)->None: pass

  def get_language_support_overrides(self)->__core__.PackedStringArray: pass

  def set_script_support_override(self, script:str, supported:bool)->None: pass

  def get_script_support_override(self, script:str)->bool: pass

  def remove_script_support_override(self, script:str)->None: pass

  def get_script_support_overrides(self)->__core__.PackedStringArray: pass

  def set_opentype_feature_overrides(self, overrides:__core__.Dictionary)->None: pass

  def get_opentype_feature_overrides(self)->__core__.Dictionary: pass

  def get_glyph_index(self, size:int, char:int, variation_selector:int)->int: pass

  def get_char_from_glyph_index(self, size:int, glyph_index:int)->int: pass


