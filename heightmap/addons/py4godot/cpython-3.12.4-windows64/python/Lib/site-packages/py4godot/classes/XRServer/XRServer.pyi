from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.XRInterface.XRInterface as __xrinterface__
import py4godot.classes.Object.Object as __object__
import py4godot.classes.XRTracker.XRTracker as __xrtracker__
import py4godot.classes.XRServer.XRServer as __xrserver__


class XRServer(__object__.Object):
  reference_frame_changed: BuiltinSignal
  interface_added: BuiltinSignal
  interface_removed: BuiltinSignal
  tracker_added: BuiltinSignal
  tracker_updated: BuiltinSignal
  tracker_removed: BuiltinSignal



  @staticmethod
  def cast(other:__object__.Object)->XRServer:pass

  @staticmethod
  def get_instance()->XRServer:pass

  @property
  def world_scale(self)->float: pass
  @world_scale.setter
  def world_scale(self,  value:float)->None: pass
  @property
  def world_origin(self)->__core__.Vector3: pass
  @world_origin.setter
  def world_origin(self,  value:__core__.Vector3)->None: pass
  @property
  def primary_interface(self)->__object__.Object: pass
  @primary_interface.setter
  def primary_interface(self,  value:__object__.Object)->None: pass
  def get_world_scale(self)->float: pass

  def set_world_scale(self, scale:float)->None: pass

  def get_world_origin(self)->__core__.Transform3D: pass

  def set_world_origin(self, world_origin:__core__.Transform3D)->None: pass

  def get_reference_frame(self)->__core__.Transform3D: pass

  def clear_reference_frame(self)->None: pass

  def center_on_hmd(self, rotation_mode:int , keep_height:bool)->None: pass

  def get_hmd_transform(self)->__core__.Transform3D: pass

  def add_interface(self, interface:__xrinterface__.XRInterface)->None: pass

  def get_interface_count(self)->int: pass

  def remove_interface(self, interface:__xrinterface__.XRInterface)->None: pass

  def get_interface(self, idx:int)->__xrinterface__.XRInterface: pass

  def get_interfaces(self)->__core__.Array: pass

  def find_interface(self, name:str)->__xrinterface__.XRInterface: pass

  def add_tracker(self, tracker:__xrtracker__.XRTracker)->None: pass

  def remove_tracker(self, tracker:__xrtracker__.XRTracker)->None: pass

  def get_trackers(self, tracker_types:int)->__core__.Dictionary: pass

  def get_tracker(self, tracker_name:__core__.StringName)->__xrtracker__.XRTracker: pass

  def get_primary_interface(self)->__xrinterface__.XRInterface: pass

  def set_primary_interface(self, interface:__xrinterface__.XRInterface)->None: pass


