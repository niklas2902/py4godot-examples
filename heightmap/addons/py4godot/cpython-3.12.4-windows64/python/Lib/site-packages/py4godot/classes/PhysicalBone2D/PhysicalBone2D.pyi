from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.RigidBody2D.RigidBody2D as __rigidbody2d__
import py4godot.classes.Joint2D.Joint2D as __joint2d__


class PhysicalBone2D(__rigidbody2d__.RigidBody2D):

  @staticmethod
  def constructor()->PhysicalBone2D:pass



  @staticmethod
  def cast(other:__object__.Object)->PhysicalBone2D:pass


  @property
  def bone2d_nodepath(self)->__core__.NodePath: pass
  @bone2d_nodepath.setter
  def bone2d_nodepath(self,  value:__core__.NodePath)->None: pass
  @property
  def bone2d_index(self)->int: pass
  @bone2d_index.setter
  def bone2d_index(self,  value:int)->None: pass
  @property
  def auto_configure_joint(self)->bool: pass
  @auto_configure_joint.setter
  def auto_configure_joint(self,  value:bool)->None: pass
  @property
  def simulate_physics(self)->bool: pass
  @simulate_physics.setter
  def simulate_physics(self,  value:bool)->None: pass
  @property
  def follow_bone_when_simulating(self)->bool: pass
  @follow_bone_when_simulating.setter
  def follow_bone_when_simulating(self,  value:bool)->None: pass
  def get_joint(self)->__joint2d__.Joint2D: pass

  def get_auto_configure_joint(self)->bool: pass

  def set_auto_configure_joint(self, auto_configure_joint:bool)->None: pass

  def set_simulate_physics(self, simulate_physics:bool)->None: pass

  def get_simulate_physics(self)->bool: pass

  def is_simulating_physics(self)->bool: pass

  def set_bone2d_nodepath(self, nodepath:__core__.NodePath)->None: pass

  def get_bone2d_nodepath(self)->__core__.NodePath: pass

  def set_bone2d_index(self, bone_index:int)->None: pass

  def get_bone2d_index(self)->int: pass

  def set_follow_bone_when_simulating(self, follow_bone:bool)->None: pass

  def get_follow_bone_when_simulating(self)->bool: pass


