from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.AnimationNodeStateMachine.AnimationNodeStateMachine as __animationnodestatemachine__
import py4godot.classes.AnimationNode.AnimationNode as __animationnode__
import py4godot.classes.AnimationRootNode.AnimationRootNode as __animationrootnode__
import py4godot.classes.AnimationNodeStateMachineTransition.AnimationNodeStateMachineTransition as __animationnodestatemachinetransition__


class AnimationNodeStateMachine(__animationrootnode__.AnimationRootNode):

  @staticmethod
  def constructor()->AnimationNodeStateMachine:pass



  @staticmethod
  def cast(other:__object__.Object)->AnimationNodeStateMachine:pass


  @property
  def state_machine_type(self)->int: pass
  @state_machine_type.setter
  def state_machine_type(self,  value:int)->None: pass
  @property
  def allow_transition_to_self(self)->bool: pass
  @allow_transition_to_self.setter
  def allow_transition_to_self(self,  value:bool)->None: pass
  @property
  def reset_ends(self)->bool: pass
  @reset_ends.setter
  def reset_ends(self,  value:bool)->None: pass
  def add_node(self, name:__core__.StringName, node:__animationnode__.AnimationNode, position:__core__.Vector2= __core__.Vector2.new0())->None: pass

  def replace_node(self, name:__core__.StringName, node:__animationnode__.AnimationNode)->None: pass

  def get_node(self, name:__core__.StringName)->__animationnode__.AnimationNode: pass

  def remove_node(self, name:__core__.StringName)->None: pass

  def rename_node(self, name:__core__.StringName, new_name:__core__.StringName)->None: pass

  def has_node(self, name:__core__.StringName)->bool: pass

  def get_node_name(self, node:__animationnode__.AnimationNode)->__core__.StringName: pass

  def set_node_position(self, name:__core__.StringName, position:__core__.Vector2)->None: pass

  def get_node_position(self, name:__core__.StringName)->__core__.Vector2: pass

  def has_transition(self, from_:__core__.StringName, to:__core__.StringName)->bool: pass

  def add_transition(self, from_:__core__.StringName, to:__core__.StringName, transition:__animationnodestatemachinetransition__.AnimationNodeStateMachineTransition)->None: pass

  def get_transition(self, idx:int)->__animationnodestatemachinetransition__.AnimationNodeStateMachineTransition: pass

  def get_transition_from(self, idx:int)->__core__.StringName: pass

  def get_transition_to(self, idx:int)->__core__.StringName: pass

  def get_transition_count(self)->int: pass

  def remove_transition_by_index(self, idx:int)->None: pass

  def remove_transition(self, from_:__core__.StringName, to:__core__.StringName)->None: pass

  def set_graph_offset(self, offset:__core__.Vector2)->None: pass

  def get_graph_offset(self)->__core__.Vector2: pass

  def set_state_machine_type(self, state_machine_type:int )->None: pass

  def get_state_machine_type(self)->int: pass

  def set_allow_transition_to_self(self, enable:bool)->None: pass

  def is_allow_transition_to_self(self)->bool: pass

  def set_reset_ends(self, enable:bool)->None: pass

  def are_ends_reset(self)->bool: pass


