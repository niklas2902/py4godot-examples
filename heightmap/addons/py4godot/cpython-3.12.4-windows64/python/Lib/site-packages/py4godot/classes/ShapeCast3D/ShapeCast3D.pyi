from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.CollisionObject3D.CollisionObject3D as __collisionobject3d__
import py4godot.classes.Shape3D.Shape3D as __shape3d__
import py4godot.classes.Resource.Resource as __resource__
import py4godot.classes.Object.Object as __object__
import py4godot.classes.Node3D.Node3D as __node3d__


class ShapeCast3D(__node3d__.Node3D):

  @staticmethod
  def constructor()->ShapeCast3D:pass



  @staticmethod
  def cast(other:__object__.Object)->ShapeCast3D:pass


  @property
  def enabled(self)->bool: pass
  @enabled.setter
  def enabled(self,  value:bool)->None: pass
  @property
  def shape(self)->__shape3d__.Shape3D: pass
  @shape.setter
  def shape(self,  value:__shape3d__.Shape3D)->None: pass
  @property
  def exclude_parent(self)->bool: pass
  @exclude_parent.setter
  def exclude_parent(self,  value:bool)->None: pass
  @property
  def target_position(self)->__core__.Vector3: pass
  @target_position.setter
  def target_position(self,  value:__core__.Vector3)->None: pass
  @property
  def margin(self)->float: pass
  @margin.setter
  def margin(self,  value:float)->None: pass
  @property
  def max_results(self)->int: pass
  @max_results.setter
  def max_results(self,  value:int)->None: pass
  @property
  def collision_mask(self)->int: pass
  @collision_mask.setter
  def collision_mask(self,  value:int)->None: pass
  @property
  def collision_result(self)->__core__.Array: pass
  @property
  def collide_with_areas(self)->bool: pass
  @collide_with_areas.setter
  def collide_with_areas(self,  value:bool)->None: pass
  @property
  def collide_with_bodies(self)->bool: pass
  @collide_with_bodies.setter
  def collide_with_bodies(self,  value:bool)->None: pass
  @property
  def debug_shape_custom_color(self)->__core__.Color: pass
  @debug_shape_custom_color.setter
  def debug_shape_custom_color(self,  value:__core__.Color)->None: pass
  def resource_changed(self, resource:__resource__.Resource)->None: pass

  def set_enabled(self, enabled:bool)->None: pass

  def is_enabled(self)->bool: pass

  def set_shape(self, shape:__shape3d__.Shape3D)->None: pass

  def get_shape(self)->__shape3d__.Shape3D: pass

  def set_target_position(self, local_point:__core__.Vector3)->None: pass

  def get_target_position(self)->__core__.Vector3: pass

  def set_margin(self, margin:float)->None: pass

  def get_margin(self)->float: pass

  def set_max_results(self, max_results:int)->None: pass

  def get_max_results(self)->int: pass

  def is_colliding(self)->bool: pass

  def get_collision_count(self)->int: pass

  def force_shapecast_update(self)->None: pass

  def get_collider(self, index:int)->__object__.Object: pass

  def get_collider_rid(self, index:int)->__core__.RID: pass

  def get_collider_shape(self, index:int)->int: pass

  def get_collision_point(self, index:int)->__core__.Vector3: pass

  def get_collision_normal(self, index:int)->__core__.Vector3: pass

  def get_closest_collision_safe_fraction(self)->float: pass

  def get_closest_collision_unsafe_fraction(self)->float: pass

  def add_exception_rid(self, rid:__core__.RID)->None: pass

  def add_exception(self, node:__collisionobject3d__.CollisionObject3D)->None: pass

  def remove_exception_rid(self, rid:__core__.RID)->None: pass

  def remove_exception(self, node:__collisionobject3d__.CollisionObject3D)->None: pass

  def clear_exceptions(self)->None: pass

  def set_collision_mask(self, mask:int)->None: pass

  def get_collision_mask(self)->int: pass

  def set_collision_mask_value(self, layer_number:int, value:bool)->None: pass

  def get_collision_mask_value(self, layer_number:int)->bool: pass

  def set_exclude_parent_body(self, mask:bool)->None: pass

  def get_exclude_parent_body(self)->bool: pass

  def set_collide_with_areas(self, enable:bool)->None: pass

  def is_collide_with_areas_enabled(self)->bool: pass

  def set_collide_with_bodies(self, enable:bool)->None: pass

  def is_collide_with_bodies_enabled(self)->bool: pass

  def set_debug_shape_custom_color(self, debug_shape_custom_color:__core__.Color)->None: pass

  def get_debug_shape_custom_color(self)->__core__.Color: pass


