from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.VisualShaderNodeResizableBase.VisualShaderNodeResizableBase as __visualshadernoderesizablebase__


class VisualShaderNodeGroupBase(__visualshadernoderesizablebase__.VisualShaderNodeResizableBase):

  @staticmethod
  def constructor()->VisualShaderNodeGroupBase:pass



  @staticmethod
  def cast(other:__object__.Object)->VisualShaderNodeGroupBase:pass


  def set_inputs(self, inputs:str)->None: pass

  def get_inputs(self)->str: pass

  def set_outputs(self, outputs:str)->None: pass

  def get_outputs(self)->str: pass

  def is_valid_port_name(self, name:str)->bool: pass

  def add_input_port(self, id:int, type:int, name:str)->None: pass

  def remove_input_port(self, id:int)->None: pass

  def get_input_port_count(self)->int: pass

  def has_input_port(self, id:int)->bool: pass

  def clear_input_ports(self)->None: pass

  def add_output_port(self, id:int, type:int, name:str)->None: pass

  def remove_output_port(self, id:int)->None: pass

  def get_output_port_count(self)->int: pass

  def has_output_port(self, id:int)->bool: pass

  def clear_output_ports(self)->None: pass

  def set_input_port_name(self, id:int, name:str)->None: pass

  def set_input_port_type(self, id:int, type:int)->None: pass

  def set_output_port_name(self, id:int, name:str)->None: pass

  def set_output_port_type(self, id:int, type:int)->None: pass

  def get_free_input_port_id(self)->int: pass

  def get_free_output_port_id(self)->int: pass


