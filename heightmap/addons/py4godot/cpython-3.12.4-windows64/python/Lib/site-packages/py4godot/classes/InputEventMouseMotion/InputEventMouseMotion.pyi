from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.InputEventMouse.InputEventMouse as __inputeventmouse__


class InputEventMouseMotion(__inputeventmouse__.InputEventMouse):

  @staticmethod
  def constructor()->InputEventMouseMotion:pass



  @staticmethod
  def cast(other:__object__.Object)->InputEventMouseMotion:pass


  @property
  def tilt(self)->__core__.Vector2: pass
  @tilt.setter
  def tilt(self,  value:__core__.Vector2)->None: pass
  @property
  def pressure(self)->float: pass
  @pressure.setter
  def pressure(self,  value:float)->None: pass
  @property
  def pen_inverted(self)->bool: pass
  @pen_inverted.setter
  def pen_inverted(self,  value:bool)->None: pass
  @property
  def relative(self)->__core__.Vector2: pass
  @relative.setter
  def relative(self,  value:__core__.Vector2)->None: pass
  @property
  def screen_relative(self)->__core__.Vector2: pass
  @screen_relative.setter
  def screen_relative(self,  value:__core__.Vector2)->None: pass
  @property
  def velocity(self)->__core__.Vector2: pass
  @velocity.setter
  def velocity(self,  value:__core__.Vector2)->None: pass
  @property
  def screen_velocity(self)->__core__.Vector2: pass
  @screen_velocity.setter
  def screen_velocity(self,  value:__core__.Vector2)->None: pass
  def set_tilt(self, tilt:__core__.Vector2)->None: pass

  def get_tilt(self)->__core__.Vector2: pass

  def set_pressure(self, pressure:float)->None: pass

  def get_pressure(self)->float: pass

  def set_pen_inverted(self, pen_inverted:bool)->None: pass

  def get_pen_inverted(self)->bool: pass

  def set_relative(self, relative:__core__.Vector2)->None: pass

  def get_relative(self)->__core__.Vector2: pass

  def set_screen_relative(self, relative:__core__.Vector2)->None: pass

  def get_screen_relative(self)->__core__.Vector2: pass

  def set_velocity(self, velocity:__core__.Vector2)->None: pass

  def get_velocity(self)->__core__.Vector2: pass

  def set_screen_velocity(self, velocity:__core__.Vector2)->None: pass

  def get_screen_velocity(self)->__core__.Vector2: pass


