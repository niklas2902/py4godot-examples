from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Node.Node as __node__
import py4godot.classes.GLTFDocumentExtension.GLTFDocumentExtension as __gltfdocumentextension__
import py4godot.classes.Resource.Resource as __resource__
import py4godot.classes.GLTFDocument.GLTFDocument as __gltfdocument__
import py4godot.classes.GLTFState.GLTFState as __gltfstate__


class GLTFDocument(__resource__.Resource):

  @staticmethod
  def constructor()->GLTFDocument:pass



  @staticmethod
  def cast(other:__object__.Object)->GLTFDocument:pass


  @property
  def image_format(self)->str: pass
  @image_format.setter
  def image_format(self,  value:str)->None: pass
  @property
  def lossy_quality(self)->float: pass
  @lossy_quality.setter
  def lossy_quality(self,  value:float)->None: pass
  @property
  def root_node_mode(self)->int: pass
  @root_node_mode.setter
  def root_node_mode(self,  value:int)->None: pass
  def set_image_format(self, image_format:str)->None: pass

  def get_image_format(self)->str: pass

  def set_lossy_quality(self, lossy_quality:float)->None: pass

  def get_lossy_quality(self)->float: pass

  def set_root_node_mode(self, root_node_mode:int )->None: pass

  def get_root_node_mode(self)->int: pass

  def append_from_file(self, path:str, state:__gltfstate__.GLTFState, flags:int=0, base_path:str= __core__.String.new0())->int: pass

  def append_from_buffer(self, bytes:__core__.PackedByteArray, base_path:str, state:__gltfstate__.GLTFState, flags:int=0)->int: pass

  def append_from_scene(self, node:__node__.Node, state:__gltfstate__.GLTFState, flags:int=0)->int: pass

  def generate_scene(self, state:__gltfstate__.GLTFState, bake_fps:float=30, trimming:bool=False, remove_immutable_tracks:bool=True)->__node__.Node: pass

  def generate_buffer(self, state:__gltfstate__.GLTFState)->__core__.PackedByteArray: pass

  def write_to_filesystem(self, state:__gltfstate__.GLTFState, path:str)->int: pass

  @staticmethod
  def register_gltf_document_extension(extension:__gltfdocumentextension__.GLTFDocumentExtension, first_priority:bool=False)->None: pass

  @staticmethod
  def unregister_gltf_document_extension(extension:__gltfdocumentextension__.GLTFDocumentExtension)->None: pass


