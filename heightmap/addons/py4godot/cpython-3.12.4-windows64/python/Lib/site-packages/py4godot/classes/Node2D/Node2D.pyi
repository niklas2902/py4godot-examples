from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Node.Node as __node__
import py4godot.classes.CanvasItem.CanvasItem as __canvasitem__


class Node2D(__canvasitem__.CanvasItem):

  @staticmethod
  def constructor()->Node2D:pass



  @staticmethod
  def cast(other:__object__.Object)->Node2D:pass


  @property
  def position(self)->__core__.Vector2: pass
  @position.setter
  def position(self,  value:__core__.Vector2)->None: pass
  @property
  def rotation(self)->float: pass
  @rotation.setter
  def rotation(self,  value:float)->None: pass
  @property
  def rotation_degrees(self)->float: pass
  @rotation_degrees.setter
  def rotation_degrees(self,  value:float)->None: pass
  @property
  def scale(self)->__core__.Vector2: pass
  @scale.setter
  def scale(self,  value:__core__.Vector2)->None: pass
  @property
  def skew(self)->float: pass
  @skew.setter
  def skew(self,  value:float)->None: pass
  @property
  def transform(self)->__core__.Transform2D: pass
  @transform.setter
  def transform(self,  value:__core__.Transform2D)->None: pass
  @property
  def global_position(self)->__core__.Vector2: pass
  @global_position.setter
  def global_position(self,  value:__core__.Vector2)->None: pass
  @property
  def global_rotation(self)->float: pass
  @global_rotation.setter
  def global_rotation(self,  value:float)->None: pass
  @property
  def global_rotation_degrees(self)->float: pass
  @global_rotation_degrees.setter
  def global_rotation_degrees(self,  value:float)->None: pass
  @property
  def global_scale(self)->__core__.Vector2: pass
  @global_scale.setter
  def global_scale(self,  value:__core__.Vector2)->None: pass
  @property
  def global_skew(self)->float: pass
  @global_skew.setter
  def global_skew(self,  value:float)->None: pass
  @property
  def global_transform(self)->__core__.Transform2D: pass
  @global_transform.setter
  def global_transform(self,  value:__core__.Transform2D)->None: pass
  def set_position(self, position:__core__.Vector2)->None: pass

  def set_rotation(self, radians:float)->None: pass

  def set_rotation_degrees(self, degrees:float)->None: pass

  def set_skew(self, radians:float)->None: pass

  def set_scale(self, scale:__core__.Vector2)->None: pass

  def get_position(self)->__core__.Vector2: pass

  def get_rotation(self)->float: pass

  def get_rotation_degrees(self)->float: pass

  def get_skew(self)->float: pass

  def get_scale(self)->__core__.Vector2: pass

  def rotate(self, radians:float)->None: pass

  def move_local_x(self, delta:float, scaled:bool=False)->None: pass

  def move_local_y(self, delta:float, scaled:bool=False)->None: pass

  def translate(self, offset:__core__.Vector2)->None: pass

  def global_translate(self, offset:__core__.Vector2)->None: pass

  def apply_scale(self, ratio:__core__.Vector2)->None: pass

  def set_global_position(self, position:__core__.Vector2)->None: pass

  def get_global_position(self)->__core__.Vector2: pass

  def set_global_rotation(self, radians:float)->None: pass

  def set_global_rotation_degrees(self, degrees:float)->None: pass

  def get_global_rotation(self)->float: pass

  def get_global_rotation_degrees(self)->float: pass

  def set_global_skew(self, radians:float)->None: pass

  def get_global_skew(self)->float: pass

  def set_global_scale(self, scale:__core__.Vector2)->None: pass

  def get_global_scale(self)->__core__.Vector2: pass

  def set_transform(self, xform:__core__.Transform2D)->None: pass

  def set_global_transform(self, xform:__core__.Transform2D)->None: pass

  def look_at(self, point:__core__.Vector2)->None: pass

  def get_angle_to(self, point:__core__.Vector2)->float: pass

  def to_local(self, global_point:__core__.Vector2)->__core__.Vector2: pass

  def to_global(self, local_point:__core__.Vector2)->__core__.Vector2: pass

  def get_relative_transform_to_parent(self, parent:__node__.Node)->__core__.Transform2D: pass


