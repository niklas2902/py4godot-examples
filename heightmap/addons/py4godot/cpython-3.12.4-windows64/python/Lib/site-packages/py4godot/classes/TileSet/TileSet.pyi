from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.PhysicsMaterial.PhysicsMaterial as __physicsmaterial__
import py4godot.classes.Resource.Resource as __resource__
import py4godot.classes.TileSetSource.TileSetSource as __tilesetsource__
import py4godot.classes.TileMapPattern.TileMapPattern as __tilemappattern__
import py4godot.classes.TileSet.TileSet as __tileset__


class TileSet(__resource__.Resource):

  @staticmethod
  def constructor()->TileSet:pass



  @staticmethod
  def cast(other:__object__.Object)->TileSet:pass


  @property
  def tile_shape(self)->int: pass
  @tile_shape.setter
  def tile_shape(self,  value:int)->None: pass
  @property
  def tile_layout(self)->int: pass
  @tile_layout.setter
  def tile_layout(self,  value:int)->None: pass
  @property
  def tile_offset_axis(self)->int: pass
  @tile_offset_axis.setter
  def tile_offset_axis(self,  value:int)->None: pass
  @property
  def tile_size(self)->__core__.Vector2i: pass
  @tile_size.setter
  def tile_size(self,  value:__core__.Vector2i)->None: pass
  @property
  def uv_clipping(self)->bool: pass
  @uv_clipping.setter
  def uv_clipping(self,  value:bool)->None: pass
  def get_next_source_id(self)->int: pass

  def add_source(self, source:__tilesetsource__.TileSetSource, atlas_source_id_override:int=-1)->int: pass

  def remove_source(self, source_id:int)->None: pass

  def set_source_id(self, source_id:int, new_source_id:int)->None: pass

  def get_source_count(self)->int: pass

  def get_source_id(self, index:int)->int: pass

  def has_source(self, source_id:int)->bool: pass

  def get_source(self, source_id:int)->__tilesetsource__.TileSetSource: pass

  def set_tile_shape(self, shape:int )->None: pass

  def get_tile_shape(self)->int: pass

  def set_tile_layout(self, layout:int )->None: pass

  def get_tile_layout(self)->int: pass

  def set_tile_offset_axis(self, alignment:int )->None: pass

  def get_tile_offset_axis(self)->int: pass

  def set_tile_size(self, size:__core__.Vector2i)->None: pass

  def get_tile_size(self)->__core__.Vector2i: pass

  def set_uv_clipping(self, uv_clipping:bool)->None: pass

  def is_uv_clipping(self)->bool: pass

  def get_occlusion_layers_count(self)->int: pass

  def add_occlusion_layer(self, to_position:int=-1)->None: pass

  def move_occlusion_layer(self, layer_index:int, to_position:int)->None: pass

  def remove_occlusion_layer(self, layer_index:int)->None: pass

  def set_occlusion_layer_light_mask(self, layer_index:int, light_mask:int)->None: pass

  def get_occlusion_layer_light_mask(self, layer_index:int)->int: pass

  def set_occlusion_layer_sdf_collision(self, layer_index:int, sdf_collision:bool)->None: pass

  def get_occlusion_layer_sdf_collision(self, layer_index:int)->bool: pass

  def get_physics_layers_count(self)->int: pass

  def add_physics_layer(self, to_position:int=-1)->None: pass

  def move_physics_layer(self, layer_index:int, to_position:int)->None: pass

  def remove_physics_layer(self, layer_index:int)->None: pass

  def set_physics_layer_collision_layer(self, layer_index:int, layer:int)->None: pass

  def get_physics_layer_collision_layer(self, layer_index:int)->int: pass

  def set_physics_layer_collision_mask(self, layer_index:int, mask:int)->None: pass

  def get_physics_layer_collision_mask(self, layer_index:int)->int: pass

  def set_physics_layer_physics_material(self, layer_index:int, physics_material:__physicsmaterial__.PhysicsMaterial)->None: pass

  def get_physics_layer_physics_material(self, layer_index:int)->__physicsmaterial__.PhysicsMaterial: pass

  def get_terrain_sets_count(self)->int: pass

  def add_terrain_set(self, to_position:int=-1)->None: pass

  def move_terrain_set(self, terrain_set:int, to_position:int)->None: pass

  def remove_terrain_set(self, terrain_set:int)->None: pass

  def set_terrain_set_mode(self, terrain_set:int, mode:int )->None: pass

  def get_terrain_set_mode(self, terrain_set:int)->int: pass

  def get_terrains_count(self, terrain_set:int)->int: pass

  def add_terrain(self, terrain_set:int, to_position:int=-1)->None: pass

  def move_terrain(self, terrain_set:int, terrain_index:int, to_position:int)->None: pass

  def remove_terrain(self, terrain_set:int, terrain_index:int)->None: pass

  def set_terrain_name(self, terrain_set:int, terrain_index:int, name:str)->None: pass

  def get_terrain_name(self, terrain_set:int, terrain_index:int)->str: pass

  def set_terrain_color(self, terrain_set:int, terrain_index:int, color:__core__.Color)->None: pass

  def get_terrain_color(self, terrain_set:int, terrain_index:int)->__core__.Color: pass

  def get_navigation_layers_count(self)->int: pass

  def add_navigation_layer(self, to_position:int=-1)->None: pass

  def move_navigation_layer(self, layer_index:int, to_position:int)->None: pass

  def remove_navigation_layer(self, layer_index:int)->None: pass

  def set_navigation_layer_layers(self, layer_index:int, layers:int)->None: pass

  def get_navigation_layer_layers(self, layer_index:int)->int: pass

  def set_navigation_layer_layer_value(self, layer_index:int, layer_number:int, value:bool)->None: pass

  def get_navigation_layer_layer_value(self, layer_index:int, layer_number:int)->bool: pass

  def get_custom_data_layers_count(self)->int: pass

  def add_custom_data_layer(self, to_position:int=-1)->None: pass

  def move_custom_data_layer(self, layer_index:int, to_position:int)->None: pass

  def remove_custom_data_layer(self, layer_index:int)->None: pass

  def get_custom_data_layer_by_name(self, layer_name:str)->int: pass

  def set_custom_data_layer_name(self, layer_index:int, layer_name:str)->None: pass

  def get_custom_data_layer_name(self, layer_index:int)->str: pass

  def set_custom_data_layer_type(self, layer_index:int, layer_type:int )->None: pass

  def get_custom_data_layer_type(self, layer_index:int)->int: pass

  def set_source_level_tile_proxy(self, source_from:int, source_to:int)->None: pass

  def get_source_level_tile_proxy(self, source_from:int)->int: pass

  def has_source_level_tile_proxy(self, source_from:int)->bool: pass

  def remove_source_level_tile_proxy(self, source_from:int)->None: pass

  def set_coords_level_tile_proxy(self, p_source_from:int, coords_from:__core__.Vector2i, source_to:int, coords_to:__core__.Vector2i)->None: pass

  def get_coords_level_tile_proxy(self, source_from:int, coords_from:__core__.Vector2i)->__core__.Array: pass

  def has_coords_level_tile_proxy(self, source_from:int, coords_from:__core__.Vector2i)->bool: pass

  def remove_coords_level_tile_proxy(self, source_from:int, coords_from:__core__.Vector2i)->None: pass

  def set_alternative_level_tile_proxy(self, source_from:int, coords_from:__core__.Vector2i, alternative_from:int, source_to:int, coords_to:__core__.Vector2i, alternative_to:int)->None: pass

  def get_alternative_level_tile_proxy(self, source_from:int, coords_from:__core__.Vector2i, alternative_from:int)->__core__.Array: pass

  def has_alternative_level_tile_proxy(self, source_from:int, coords_from:__core__.Vector2i, alternative_from:int)->bool: pass

  def remove_alternative_level_tile_proxy(self, source_from:int, coords_from:__core__.Vector2i, alternative_from:int)->None: pass

  def map_tile_proxy(self, source_from:int, coords_from:__core__.Vector2i, alternative_from:int)->__core__.Array: pass

  def cleanup_invalid_tile_proxies(self)->None: pass

  def clear_tile_proxies(self)->None: pass

  def add_pattern(self, pattern:__tilemappattern__.TileMapPattern, index:int=-1)->int: pass

  def get_pattern(self, index:int=-1)->__tilemappattern__.TileMapPattern: pass

  def remove_pattern(self, index:int)->None: pass

  def get_patterns_count(self)->int: pass


