from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.PrimitiveMesh.PrimitiveMesh as __primitivemesh__
import py4godot.classes.PlaneMesh.PlaneMesh as __planemesh__


class PlaneMesh(__primitivemesh__.PrimitiveMesh):

  @staticmethod
  def constructor()->PlaneMesh:pass



  @staticmethod
  def cast(other:__object__.Object)->PlaneMesh:pass


  @property
  def size(self)->__core__.Vector2: pass
  @size.setter
  def size(self,  value:__core__.Vector2)->None: pass
  @property
  def subdivide_width(self)->int: pass
  @subdivide_width.setter
  def subdivide_width(self,  value:int)->None: pass
  @property
  def subdivide_depth(self)->int: pass
  @subdivide_depth.setter
  def subdivide_depth(self,  value:int)->None: pass
  @property
  def center_offset(self)->__core__.Vector3: pass
  @center_offset.setter
  def center_offset(self,  value:__core__.Vector3)->None: pass
  @property
  def orientation(self)->int: pass
  @orientation.setter
  def orientation(self,  value:int)->None: pass
  def set_size(self, size:__core__.Vector2)->None: pass

  def get_size(self)->__core__.Vector2: pass

  def set_subdivide_width(self, subdivide:int)->None: pass

  def get_subdivide_width(self)->int: pass

  def set_subdivide_depth(self, subdivide:int)->None: pass

  def get_subdivide_depth(self)->int: pass

  def set_center_offset(self, offset:__core__.Vector3)->None: pass

  def get_center_offset(self)->__core__.Vector3: pass

  def set_orientation(self, orientation:int )->None: pass

  def get_orientation(self)->int: pass


