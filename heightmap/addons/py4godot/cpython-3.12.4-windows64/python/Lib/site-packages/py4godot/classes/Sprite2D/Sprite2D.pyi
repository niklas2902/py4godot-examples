from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Node2D.Node2D as __node2d__
import py4godot.classes.Texture2D.Texture2D as __texture2d__


class Sprite2D(__node2d__.Node2D):
  frame_changed: BuiltinSignal
  texture_changed: BuiltinSignal

  @staticmethod
  def constructor()->Sprite2D:pass



  @staticmethod
  def cast(other:__object__.Object)->Sprite2D:pass


  @property
  def texture(self)->__texture2d__.Texture2D: pass
  @texture.setter
  def texture(self,  value:__texture2d__.Texture2D)->None: pass
  @property
  def centered(self)->bool: pass
  @centered.setter
  def centered(self,  value:bool)->None: pass
  @property
  def offset(self)->__core__.Vector2: pass
  @offset.setter
  def offset(self,  value:__core__.Vector2)->None: pass
  @property
  def flip_h(self)->bool: pass
  @flip_h.setter
  def flip_h(self,  value:bool)->None: pass
  @property
  def flip_v(self)->bool: pass
  @flip_v.setter
  def flip_v(self,  value:bool)->None: pass
  @property
  def hframes(self)->int: pass
  @hframes.setter
  def hframes(self,  value:int)->None: pass
  @property
  def vframes(self)->int: pass
  @vframes.setter
  def vframes(self,  value:int)->None: pass
  @property
  def frame(self)->int: pass
  @frame.setter
  def frame(self,  value:int)->None: pass
  @property
  def frame_coords(self)->__core__.Vector2i: pass
  @frame_coords.setter
  def frame_coords(self,  value:__core__.Vector2i)->None: pass
  @property
  def region_enabled(self)->bool: pass
  @region_enabled.setter
  def region_enabled(self,  value:bool)->None: pass
  @property
  def region_rect(self)->__core__.Rect2: pass
  @region_rect.setter
  def region_rect(self,  value:__core__.Rect2)->None: pass
  @property
  def region_filter_clip_enabled(self)->bool: pass
  @region_filter_clip_enabled.setter
  def region_filter_clip_enabled(self,  value:bool)->None: pass
  def set_texture(self, texture:__texture2d__.Texture2D)->None: pass

  def get_texture(self)->__texture2d__.Texture2D: pass

  def set_centered(self, centered:bool)->None: pass

  def is_centered(self)->bool: pass

  def set_offset(self, offset:__core__.Vector2)->None: pass

  def get_offset(self)->__core__.Vector2: pass

  def set_flip_h(self, flip_h:bool)->None: pass

  def is_flipped_h(self)->bool: pass

  def set_flip_v(self, flip_v:bool)->None: pass

  def is_flipped_v(self)->bool: pass

  def set_region_enabled(self, enabled:bool)->None: pass

  def is_region_enabled(self)->bool: pass

  def is_pixel_opaque(self, pos:__core__.Vector2)->bool: pass

  def set_region_rect(self, rect:__core__.Rect2)->None: pass

  def get_region_rect(self)->__core__.Rect2: pass

  def set_region_filter_clip_enabled(self, enabled:bool)->None: pass

  def is_region_filter_clip_enabled(self)->bool: pass

  def set_frame(self, frame:int)->None: pass

  def get_frame(self)->int: pass

  def set_frame_coords(self, coords:__core__.Vector2i)->None: pass

  def get_frame_coords(self)->__core__.Vector2i: pass

  def set_vframes(self, vframes:int)->None: pass

  def get_vframes(self)->int: pass

  def set_hframes(self, hframes:int)->None: pass

  def get_hframes(self)->int: pass

  def get_rect(self)->__core__.Rect2: pass


