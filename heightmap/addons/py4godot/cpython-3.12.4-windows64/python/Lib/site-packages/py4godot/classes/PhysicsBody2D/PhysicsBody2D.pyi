from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Node.Node as __node__
import py4godot.classes.CollisionObject2D.CollisionObject2D as __collisionobject2d__
import py4godot.classes.KinematicCollision2D.KinematicCollision2D as __kinematiccollision2d__


class PhysicsBody2D(__collisionobject2d__.CollisionObject2D):

  @staticmethod
  def constructor()->PhysicsBody2D:pass



  @staticmethod
  def cast(other:__object__.Object)->PhysicsBody2D:pass


  def move_and_collide(self, motion:__core__.Vector2, test_only:bool=False, safe_margin:float=0.08, recovery_as_collision:bool=False)->__kinematiccollision2d__.KinematicCollision2D: pass

  def test_move(self, from_:__core__.Transform2D, motion:__core__.Vector2, collision:__kinematiccollision2d__.KinematicCollision2D= __kinematiccollision2d__.KinematicCollision2D.constructor(), safe_margin:float=0.08, recovery_as_collision:bool=False)->bool: pass

  def get_gravity(self)->__core__.Vector2: pass

  def get_collision_exceptions(self)->__core__.Array: pass

  def add_collision_exception_with(self, body:__node__.Node)->None: pass

  def remove_collision_exception_with(self, body:__node__.Node)->None: pass


