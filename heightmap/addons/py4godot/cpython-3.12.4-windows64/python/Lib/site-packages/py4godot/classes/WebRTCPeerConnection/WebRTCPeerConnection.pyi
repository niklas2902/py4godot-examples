from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.RefCounted.RefCounted as __refcounted__
import py4godot.classes.WebRTCPeerConnection.WebRTCPeerConnection as __webrtcpeerconnection__
import py4godot.classes.WebRTCDataChannel.WebRTCDataChannel as __webrtcdatachannel__


class WebRTCPeerConnection(__refcounted__.RefCounted):
  session_description_created: BuiltinSignal
  ice_candidate_created: BuiltinSignal
  data_channel_received: BuiltinSignal

  @staticmethod
  def constructor()->WebRTCPeerConnection:pass



  @staticmethod
  def cast(other:__object__.Object)->WebRTCPeerConnection:pass


  @staticmethod
  def set_default_extension(extension_class:__core__.StringName)->None: pass

  def initialize(self, configuration:__core__.Dictionary= __core__.Dictionary.new0())->int: pass

  def create_data_channel(self, label:str, options:__core__.Dictionary= __core__.Dictionary.new0())->__webrtcdatachannel__.WebRTCDataChannel: pass

  def create_offer(self)->int: pass

  def set_local_description(self, type:str, sdp:str)->int: pass

  def set_remote_description(self, type:str, sdp:str)->int: pass

  def add_ice_candidate(self, media:str, index:int, name:str)->int: pass

  def poll(self)->int: pass

  def close(self)->None: pass

  def get_connection_state(self)->int: pass

  def get_gathering_state(self)->int: pass

  def get_signaling_state(self)->int: pass


