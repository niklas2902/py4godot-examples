from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.KinematicCollision2D.KinematicCollision2D as __kinematiccollision2d__
import py4godot.classes.PhysicsBody2D.PhysicsBody2D as __physicsbody2d__
import py4godot.classes.CharacterBody2D.CharacterBody2D as __characterbody2d__


class CharacterBody2D(__physicsbody2d__.PhysicsBody2D):

  @staticmethod
  def constructor()->CharacterBody2D:pass



  @staticmethod
  def cast(other:__object__.Object)->CharacterBody2D:pass


  @property
  def motion_mode(self)->int: pass
  @motion_mode.setter
  def motion_mode(self,  value:int)->None: pass
  @property
  def up_direction(self)->__core__.Vector2: pass
  @up_direction.setter
  def up_direction(self,  value:__core__.Vector2)->None: pass
  @property
  def velocity(self)->__core__.Vector2: pass
  @velocity.setter
  def velocity(self,  value:__core__.Vector2)->None: pass
  @property
  def slide_on_ceiling(self)->bool: pass
  @slide_on_ceiling.setter
  def slide_on_ceiling(self,  value:bool)->None: pass
  @property
  def max_slides(self)->int: pass
  @max_slides.setter
  def max_slides(self,  value:int)->None: pass
  @property
  def wall_min_slide_angle(self)->float: pass
  @wall_min_slide_angle.setter
  def wall_min_slide_angle(self,  value:float)->None: pass
  @property
  def floor_stop_on_slope(self)->bool: pass
  @floor_stop_on_slope.setter
  def floor_stop_on_slope(self,  value:bool)->None: pass
  @property
  def floor_constant_speed(self)->bool: pass
  @floor_constant_speed.setter
  def floor_constant_speed(self,  value:bool)->None: pass
  @property
  def floor_block_on_wall(self)->bool: pass
  @floor_block_on_wall.setter
  def floor_block_on_wall(self,  value:bool)->None: pass
  @property
  def floor_max_angle(self)->float: pass
  @floor_max_angle.setter
  def floor_max_angle(self,  value:float)->None: pass
  @property
  def floor_snap_length(self)->float: pass
  @floor_snap_length.setter
  def floor_snap_length(self,  value:float)->None: pass
  @property
  def platform_on_leave(self)->int: pass
  @platform_on_leave.setter
  def platform_on_leave(self,  value:int)->None: pass
  @property
  def platform_floor_layers(self)->int: pass
  @platform_floor_layers.setter
  def platform_floor_layers(self,  value:int)->None: pass
  @property
  def platform_wall_layers(self)->int: pass
  @platform_wall_layers.setter
  def platform_wall_layers(self,  value:int)->None: pass
  @property
  def safe_margin(self)->float: pass
  @safe_margin.setter
  def safe_margin(self,  value:float)->None: pass
  def move_and_slide(self)->bool: pass

  def apply_floor_snap(self)->None: pass

  def set_velocity(self, velocity:__core__.Vector2)->None: pass

  def get_velocity(self)->__core__.Vector2: pass

  def set_safe_margin(self, margin:float)->None: pass

  def get_safe_margin(self)->float: pass

  def is_floor_stop_on_slope_enabled(self)->bool: pass

  def set_floor_stop_on_slope_enabled(self, enabled:bool)->None: pass

  def set_floor_constant_speed_enabled(self, enabled:bool)->None: pass

  def is_floor_constant_speed_enabled(self)->bool: pass

  def set_floor_block_on_wall_enabled(self, enabled:bool)->None: pass

  def is_floor_block_on_wall_enabled(self)->bool: pass

  def set_slide_on_ceiling_enabled(self, enabled:bool)->None: pass

  def is_slide_on_ceiling_enabled(self)->bool: pass

  def set_platform_floor_layers(self, exclude_layer:int)->None: pass

  def get_platform_floor_layers(self)->int: pass

  def set_platform_wall_layers(self, exclude_layer:int)->None: pass

  def get_platform_wall_layers(self)->int: pass

  def get_max_slides(self)->int: pass

  def set_max_slides(self, max_slides:int)->None: pass

  def get_floor_max_angle(self)->float: pass

  def set_floor_max_angle(self, radians:float)->None: pass

  def get_floor_snap_length(self)->float: pass

  def set_floor_snap_length(self, floor_snap_length:float)->None: pass

  def get_wall_min_slide_angle(self)->float: pass

  def set_wall_min_slide_angle(self, radians:float)->None: pass

  def get_up_direction(self)->__core__.Vector2: pass

  def set_up_direction(self, up_direction:__core__.Vector2)->None: pass

  def set_motion_mode(self, mode:int )->None: pass

  def get_motion_mode(self)->int: pass

  def set_platform_on_leave(self, on_leave_apply_velocity:int )->None: pass

  def get_platform_on_leave(self)->int: pass

  def is_on_floor(self)->bool: pass

  def is_on_floor_only(self)->bool: pass

  def is_on_ceiling(self)->bool: pass

  def is_on_ceiling_only(self)->bool: pass

  def is_on_wall(self)->bool: pass

  def is_on_wall_only(self)->bool: pass

  def get_floor_normal(self)->__core__.Vector2: pass

  def get_wall_normal(self)->__core__.Vector2: pass

  def get_last_motion(self)->__core__.Vector2: pass

  def get_position_delta(self)->__core__.Vector2: pass

  def get_real_velocity(self)->__core__.Vector2: pass

  def get_floor_angle(self, up_direction:__core__.Vector2= __core__.Vector2.new0())->float: pass

  def get_platform_velocity(self)->__core__.Vector2: pass

  def get_slide_collision_count(self)->int: pass

  def get_slide_collision(self, slide_idx:int)->__kinematiccollision2d__.KinematicCollision2D: pass

  def get_last_slide_collision(self)->__kinematiccollision2d__.KinematicCollision2D: pass


