from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.EditorCommandPalette.EditorCommandPalette as __editorcommandpalette__
import py4godot.classes.Node.Node as __node__
import py4godot.classes.EditorResourcePreview.EditorResourcePreview as __editorresourcepreview__
import py4godot.classes.Theme.Theme as __theme__
import py4godot.classes.EditorSettings.EditorSettings as __editorsettings__
import py4godot.classes.Object.Object as __object__
import py4godot.classes.Resource.Resource as __resource__
import py4godot.classes.Script.Script as __script__
import py4godot.classes.VBoxContainer.VBoxContainer as __vboxcontainer__
import py4godot.classes.SubViewport.SubViewport as __subviewport__
import py4godot.classes.Window.Window as __window__
import py4godot.classes.EditorPaths.EditorPaths as __editorpaths__
import py4godot.classes.Control.Control as __control__
import py4godot.classes.EditorSelection.EditorSelection as __editorselection__
import py4godot.classes.EditorFileSystem.EditorFileSystem as __editorfilesystem__
import py4godot.classes.EditorInspector.EditorInspector as __editorinspector__
import py4godot.classes.FileSystemDock.FileSystemDock as __filesystemdock__
import py4godot.classes.ScriptEditor.ScriptEditor as __scripteditor__


class EditorInterface(__object__.Object):



  @staticmethod
  def cast(other:__object__.Object)->EditorInterface:pass

  @staticmethod
  def get_instance()->EditorInterface:pass

  @property
  def distraction_free_mode(self)->bool: pass
  @distraction_free_mode.setter
  def distraction_free_mode(self,  value:bool)->None: pass
  @property
  def movie_maker_enabled(self)->bool: pass
  @movie_maker_enabled.setter
  def movie_maker_enabled(self,  value:bool)->None: pass
  def restart_editor(self, save:bool=True)->None: pass

  def get_command_palette(self)->__editorcommandpalette__.EditorCommandPalette: pass

  def get_resource_filesystem(self)->__editorfilesystem__.EditorFileSystem: pass

  def get_editor_paths(self)->__editorpaths__.EditorPaths: pass

  def get_resource_previewer(self)->__editorresourcepreview__.EditorResourcePreview: pass

  def get_selection(self)->__editorselection__.EditorSelection: pass

  def get_editor_settings(self)->__editorsettings__.EditorSettings: pass

  def make_mesh_previews(self, meshes:__core__.Array, preview_size:int)->__core__.Array: pass

  def set_plugin_enabled(self, plugin:str, enabled:bool)->None: pass

  def is_plugin_enabled(self, plugin:str)->bool: pass

  def get_editor_theme(self)->__theme__.Theme: pass

  def get_base_control(self)->__control__.Control: pass

  def get_editor_main_screen(self)->__vboxcontainer__.VBoxContainer: pass

  def get_script_editor(self)->__scripteditor__.ScriptEditor: pass

  def get_editor_viewport_2d(self)->__subviewport__.SubViewport: pass

  def get_editor_viewport_3d(self, idx:int=0)->__subviewport__.SubViewport: pass

  def set_main_screen_editor(self, name:str)->None: pass

  def set_distraction_free_mode(self, enter:bool)->None: pass

  def is_distraction_free_mode_enabled(self)->bool: pass

  def is_multi_window_enabled(self)->bool: pass

  def get_editor_scale(self)->float: pass

  def popup_dialog(self, dialog:__window__.Window, rect:__core__.Rect2i= __core__.Rect2i.new0())->None: pass

  def popup_dialog_centered(self, dialog:__window__.Window, minsize:__core__.Vector2i= __core__.Vector2i.new0())->None: pass

  def popup_dialog_centered_ratio(self, dialog:__window__.Window, ratio:float=0.8)->None: pass

  def popup_dialog_centered_clamped(self, dialog:__window__.Window, minsize:__core__.Vector2i= __core__.Vector2i.new0(), fallback_ratio:float=0.75)->None: pass

  def get_current_feature_profile(self)->str: pass

  def set_current_feature_profile(self, profile_name:str)->None: pass

  def popup_node_selector(self, callback:__core__.Callable, valid_types:__core__.Array=Array[StringName]([]))->None: pass

  def popup_property_selector(self, object:__object__.Object, callback:__core__.Callable, type_filter:__core__.PackedInt32Array= __core__.PackedInt32Array.new0())->None: pass

  def get_file_system_dock(self)->__filesystemdock__.FileSystemDock: pass

  def select_file(self, file:str)->None: pass

  def get_selected_paths(self)->__core__.PackedStringArray: pass

  def get_current_path(self)->str: pass

  def get_current_directory(self)->str: pass

  def get_inspector(self)->__editorinspector__.EditorInspector: pass

  def inspect_object(self, object:__object__.Object, for_property:str= __core__.String.new0(), inspector_only:bool=False)->None: pass

  def edit_resource(self, resource:__resource__.Resource)->None: pass

  def edit_node(self, node:__node__.Node)->None: pass

  def edit_script(self, script:__script__.Script, line:int=-1, column:int=0, grab_focus:bool=True)->None: pass

  def open_scene_from_path(self, scene_filepath:str)->None: pass

  def reload_scene_from_path(self, scene_filepath:str)->None: pass

  def get_open_scenes(self)->__core__.PackedStringArray: pass

  def get_edited_scene_root(self)->__node__.Node: pass

  def save_scene(self)->int: pass

  def save_scene_as(self, path:str, with_preview:bool=True)->None: pass

  def save_all_scenes(self)->None: pass

  def mark_scene_as_unsaved(self)->None: pass

  def play_main_scene(self)->None: pass

  def play_current_scene(self)->None: pass

  def play_custom_scene(self, scene_filepath:str)->None: pass

  def stop_playing_scene(self)->None: pass

  def is_playing_scene(self)->bool: pass

  def get_playing_scene(self)->str: pass

  def set_movie_maker_enabled(self, enabled:bool)->None: pass

  def is_movie_maker_enabled(self)->bool: pass


