from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Object.Object as __object__
import py4godot.classes.RefCounted.RefCounted as __refcounted__
import py4godot.classes.Control.Control as __control__


class EditorInspectorPlugin(__refcounted__.RefCounted):

  @staticmethod
  def constructor()->EditorInspectorPlugin:pass



  @staticmethod
  def cast(other:__object__.Object)->EditorInspectorPlugin:pass


  def _can_handle(self, object:__object__.Object)->bool: pass

  def _parse_begin(self, object:__object__.Object)->None: pass

  def _parse_category(self, object:__object__.Object, category:str)->None: pass

  def _parse_group(self, object:__object__.Object, group:str)->None: pass

  def _parse_property(self, object:__object__.Object, type:int , name:str, hint_type:int , hint_string:str, usage_flags:int, wide:bool)->bool: pass

  def _parse_end(self, object:__object__.Object)->None: pass

  def add_custom_control(self, control:__control__.Control)->None: pass

  def add_property_editor(self, property:str, editor:__control__.Control, add_to_end:bool=False, label:str= __core__.String.new0())->None: pass

  def add_property_editor_for_multiple_properties(self, label:str, properties:__core__.PackedStringArray, editor:__control__.Control)->None: pass


