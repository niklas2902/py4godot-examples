from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.RefCounted.RefCounted as __refcounted__


class RandomNumberGenerator(__refcounted__.RefCounted):

  @staticmethod
  def constructor()->RandomNumberGenerator:pass



  @staticmethod
  def cast(other:__object__.Object)->RandomNumberGenerator:pass


  @property
  def seed(self)->int: pass
  @seed.setter
  def seed(self,  value:int)->None: pass
  @property
  def state(self)->int: pass
  @state.setter
  def state(self,  value:int)->None: pass
  def set_seed(self, seed:int)->None: pass

  def get_seed(self)->int: pass

  def set_state(self, state:int)->None: pass

  def get_state(self)->int: pass

  def randi(self)->int: pass

  def randf(self)->float: pass

  def randfn(self, mean:float=0.0, deviation:float=1.0)->float: pass

  def randf_range(self, from_:float, to:float)->float: pass

  def randi_range(self, from_:int, to:int)->int: pass

  def rand_weighted(self, weights:__core__.PackedFloat32Array)->int: pass

  def randomize(self)->None: pass


