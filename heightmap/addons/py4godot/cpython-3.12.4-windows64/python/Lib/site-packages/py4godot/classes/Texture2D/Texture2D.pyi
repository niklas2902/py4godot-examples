from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Resource.Resource as __resource__
import py4godot.classes.Texture.Texture as __texture__
import py4godot.classes.Image.Image as __image__


class Texture2D(__texture__.Texture):

  @staticmethod
  def constructor()->Texture2D:pass



  @staticmethod
  def cast(other:__object__.Object)->Texture2D:pass


  def _get_width(self)->int: pass

  def _get_height(self)->int: pass

  def _is_pixel_opaque(self, x:int, y:int)->bool: pass

  def _has_alpha(self)->bool: pass

  def _draw(self, to_canvas_item:__core__.RID, pos:__core__.Vector2, modulate:__core__.Color, transpose:bool)->None: pass

  def _draw_rect(self, to_canvas_item:__core__.RID, rect:__core__.Rect2, tile:bool, modulate:__core__.Color, transpose:bool)->None: pass

  def _draw_rect_region(self, to_canvas_item:__core__.RID, rect:__core__.Rect2, src_rect:__core__.Rect2, modulate:__core__.Color, transpose:bool, clip_uv:bool)->None: pass

  def get_width(self)->int: pass

  def get_height(self)->int: pass

  def get_size(self)->__core__.Vector2: pass

  def has_alpha(self)->bool: pass

  def draw(self, canvas_item:__core__.RID, position:__core__.Vector2, modulate:__core__.Color= __core__.Color.new0(), transpose:bool=False)->None: pass

  def draw_rect(self, canvas_item:__core__.RID, rect:__core__.Rect2, tile:bool, modulate:__core__.Color= __core__.Color.new0(), transpose:bool=False)->None: pass

  def draw_rect_region(self, canvas_item:__core__.RID, rect:__core__.Rect2, src_rect:__core__.Rect2, modulate:__core__.Color= __core__.Color.new0(), transpose:bool=False, clip_uv:bool=True)->None: pass

  def get_image(self)->__image__.Image: pass

  def create_placeholder(self)->__resource__.Resource: pass


