from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.AudioStream.AudioStream as __audiostream__
import py4godot.classes.AudioStreamPlayback.AudioStreamPlayback as __audiostreamplayback__
import py4godot.classes.Node3D.Node3D as __node3d__
import py4godot.classes.AudioServer.AudioServer as __audioserver__
import py4godot.classes.AudioStreamPlayer3D.AudioStreamPlayer3D as __audiostreamplayer3d__


class AudioStreamPlayer3D(__node3d__.Node3D):
  finished: BuiltinSignal

  @staticmethod
  def constructor()->AudioStreamPlayer3D:pass



  @staticmethod
  def cast(other:__object__.Object)->AudioStreamPlayer3D:pass


  @property
  def stream(self)->__audiostream__.AudioStream: pass
  @stream.setter
  def stream(self,  value:__audiostream__.AudioStream)->None: pass
  @property
  def attenuation_model(self)->int: pass
  @attenuation_model.setter
  def attenuation_model(self,  value:int)->None: pass
  @property
  def volume_db(self)->float: pass
  @volume_db.setter
  def volume_db(self,  value:float)->None: pass
  @property
  def unit_size(self)->float: pass
  @unit_size.setter
  def unit_size(self,  value:float)->None: pass
  @property
  def max_db(self)->float: pass
  @max_db.setter
  def max_db(self,  value:float)->None: pass
  @property
  def pitch_scale(self)->float: pass
  @pitch_scale.setter
  def pitch_scale(self,  value:float)->None: pass
  @property
  def playing(self)->bool: pass
  @playing.setter
  def playing(self,  value:bool)->None: pass
  @property
  def autoplay(self)->bool: pass
  @autoplay.setter
  def autoplay(self,  value:bool)->None: pass
  @property
  def stream_paused(self)->bool: pass
  @stream_paused.setter
  def stream_paused(self,  value:bool)->None: pass
  @property
  def max_distance(self)->float: pass
  @max_distance.setter
  def max_distance(self,  value:float)->None: pass
  @property
  def max_polyphony(self)->int: pass
  @max_polyphony.setter
  def max_polyphony(self,  value:int)->None: pass
  @property
  def panning_strength(self)->float: pass
  @panning_strength.setter
  def panning_strength(self,  value:float)->None: pass
  @property
  def bus(self)->__core__.StringName: pass
  @bus.setter
  def bus(self,  value:__core__.StringName)->None: pass
  @property
  def area_mask(self)->int: pass
  @area_mask.setter
  def area_mask(self,  value:int)->None: pass
  @property
  def playback_type(self)->int: pass
  @playback_type.setter
  def playback_type(self,  value:int)->None: pass
  @property
  def emission_angle_enabled(self)->bool: pass
  @emission_angle_enabled.setter
  def emission_angle_enabled(self,  value:bool)->None: pass
  @property
  def emission_angle_degrees(self)->float: pass
  @emission_angle_degrees.setter
  def emission_angle_degrees(self,  value:float)->None: pass
  @property
  def emission_angle_filter_attenuation_db(self)->float: pass
  @emission_angle_filter_attenuation_db.setter
  def emission_angle_filter_attenuation_db(self,  value:float)->None: pass
  @property
  def attenuation_filter_cutoff_hz(self)->float: pass
  @attenuation_filter_cutoff_hz.setter
  def attenuation_filter_cutoff_hz(self,  value:float)->None: pass
  @property
  def attenuation_filter_db(self)->float: pass
  @attenuation_filter_db.setter
  def attenuation_filter_db(self,  value:float)->None: pass
  @property
  def doppler_tracking(self)->int: pass
  @doppler_tracking.setter
  def doppler_tracking(self,  value:int)->None: pass
  def set_stream(self, stream:__audiostream__.AudioStream)->None: pass

  def get_stream(self)->__audiostream__.AudioStream: pass

  def set_volume_db(self, volume_db:float)->None: pass

  def get_volume_db(self)->float: pass

  def set_unit_size(self, unit_size:float)->None: pass

  def get_unit_size(self)->float: pass

  def set_max_db(self, max_db:float)->None: pass

  def get_max_db(self)->float: pass

  def set_pitch_scale(self, pitch_scale:float)->None: pass

  def get_pitch_scale(self)->float: pass

  def play(self, from_position:float=0.0)->None: pass

  def seek(self, to_position:float)->None: pass

  def stop(self)->None: pass

  def is_playing(self)->bool: pass

  def get_playback_position(self)->float: pass

  def set_bus(self, bus:__core__.StringName)->None: pass

  def get_bus(self)->__core__.StringName: pass

  def set_autoplay(self, enable:bool)->None: pass

  def is_autoplay_enabled(self)->bool: pass

  def set_max_distance(self, meters:float)->None: pass

  def get_max_distance(self)->float: pass

  def set_area_mask(self, mask:int)->None: pass

  def get_area_mask(self)->int: pass

  def set_emission_angle(self, degrees:float)->None: pass

  def get_emission_angle(self)->float: pass

  def set_emission_angle_enabled(self, enabled:bool)->None: pass

  def is_emission_angle_enabled(self)->bool: pass

  def set_emission_angle_filter_attenuation_db(self, db:float)->None: pass

  def get_emission_angle_filter_attenuation_db(self)->float: pass

  def set_attenuation_filter_cutoff_hz(self, degrees:float)->None: pass

  def get_attenuation_filter_cutoff_hz(self)->float: pass

  def set_attenuation_filter_db(self, db:float)->None: pass

  def get_attenuation_filter_db(self)->float: pass

  def set_attenuation_model(self, model:int )->None: pass

  def get_attenuation_model(self)->int: pass

  def set_doppler_tracking(self, mode:int )->None: pass

  def get_doppler_tracking(self)->int: pass

  def set_stream_paused(self, pause:bool)->None: pass

  def get_stream_paused(self)->bool: pass

  def set_max_polyphony(self, max_polyphony:int)->None: pass

  def get_max_polyphony(self)->int: pass

  def set_panning_strength(self, panning_strength:float)->None: pass

  def get_panning_strength(self)->float: pass

  def has_stream_playback(self)->bool: pass

  def get_stream_playback(self)->__audiostreamplayback__.AudioStreamPlayback: pass

  def set_playback_type(self, playback_type:int )->None: pass

  def get_playback_type(self)->int: pass


