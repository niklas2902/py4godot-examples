from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.RefCounted.RefCounted as __refcounted__


class StreamPeer(__refcounted__.RefCounted):

  @staticmethod
  def constructor()->StreamPeer:pass



  @staticmethod
  def cast(other:__object__.Object)->StreamPeer:pass


  @property
  def big_endian(self)->bool: pass
  @big_endian.setter
  def big_endian(self,  value:bool)->None: pass
  def put_data(self, data:__core__.PackedByteArray)->int: pass

  def put_partial_data(self, data:__core__.PackedByteArray)->__core__.Array: pass

  def get_data(self, bytes:int)->__core__.Array: pass

  def get_partial_data(self, bytes:int)->__core__.Array: pass

  def get_available_bytes(self)->int: pass

  def set_big_endian(self, enable:bool)->None: pass

  def is_big_endian_enabled(self)->bool: pass

  def put_8(self, value:int)->None: pass

  def put_u8(self, value:int)->None: pass

  def put_16(self, value:int)->None: pass

  def put_u16(self, value:int)->None: pass

  def put_32(self, value:int)->None: pass

  def put_u32(self, value:int)->None: pass

  def put_64(self, value:int)->None: pass

  def put_u64(self, value:int)->None: pass

  def put_float(self, value:float)->None: pass

  def put_double(self, value:float)->None: pass

  def put_string(self, value:str)->None: pass

  def put_utf8_string(self, value:str)->None: pass

  def put_var(self, value:object, full_objects:bool=False)->None: pass

  def get_8(self)->int: pass

  def get_u8(self)->int: pass

  def get_16(self)->int: pass

  def get_u16(self)->int: pass

  def get_32(self)->int: pass

  def get_u32(self)->int: pass

  def get_64(self)->int: pass

  def get_u64(self)->int: pass

  def get_float(self)->float: pass

  def get_double(self)->float: pass

  def get_string(self, bytes:int=-1)->str: pass

  def get_utf8_string(self, bytes:int=-1)->str: pass

  def get_var(self, allow_objects:bool=False)->object: pass


