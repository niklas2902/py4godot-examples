from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.RefCounted.RefCounted as __refcounted__


class ConfigFile(__refcounted__.RefCounted):

  @staticmethod
  def constructor()->ConfigFile:pass



  @staticmethod
  def cast(other:__object__.Object)->ConfigFile:pass


  def set_value(self, section:str, key:str, value:object)->None: pass

  def get_value(self, section:str, key:str, default:object=None)->object: pass

  def has_section(self, section:str)->bool: pass

  def has_section_key(self, section:str, key:str)->bool: pass

  def get_sections(self)->__core__.PackedStringArray: pass

  def get_section_keys(self, section:str)->__core__.PackedStringArray: pass

  def erase_section(self, section:str)->None: pass

  def erase_section_key(self, section:str, key:str)->None: pass

  def load(self, path:str)->int: pass

  def parse(self, data:str)->int: pass

  def save(self, path:str)->int: pass

  def encode_to_text(self)->str: pass

  def load_encrypted(self, path:str, key:__core__.PackedByteArray)->int: pass

  def load_encrypted_pass(self, path:str, password:str)->int: pass

  def save_encrypted(self, path:str, key:__core__.PackedByteArray)->int: pass

  def save_encrypted_pass(self, path:str, password:str)->int: pass

  def clear(self)->None: pass


