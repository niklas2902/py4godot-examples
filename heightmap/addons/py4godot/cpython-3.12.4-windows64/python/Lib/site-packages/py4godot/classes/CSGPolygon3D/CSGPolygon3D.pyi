from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.CSGPolygon3D.CSGPolygon3D as __csgpolygon3d__
import py4godot.classes.ShaderMaterial.ShaderMaterial as __shadermaterial__
import py4godot.classes.CSGPrimitive3D.CSGPrimitive3D as __csgprimitive3d__
import py4godot.classes.Material.Material as __material__


class CSGPolygon3D(__csgprimitive3d__.CSGPrimitive3D):

  @staticmethod
  def constructor()->CSGPolygon3D:pass



  @staticmethod
  def cast(other:__object__.Object)->CSGPolygon3D:pass


  @property
  def polygon(self)->__core__.PackedVector2Array: pass
  @polygon.setter
  def polygon(self,  value:__core__.PackedVector2Array)->None: pass
  @property
  def mode(self)->int: pass
  @mode.setter
  def mode(self,  value:int)->None: pass
  @property
  def depth(self)->float: pass
  @depth.setter
  def depth(self,  value:float)->None: pass
  @property
  def spin_degrees(self)->float: pass
  @spin_degrees.setter
  def spin_degrees(self,  value:float)->None: pass
  @property
  def spin_sides(self)->int: pass
  @spin_sides.setter
  def spin_sides(self,  value:int)->None: pass
  @property
  def path_node(self)->__core__.NodePath: pass
  @path_node.setter
  def path_node(self,  value:__core__.NodePath)->None: pass
  @property
  def path_interval_type(self)->int: pass
  @path_interval_type.setter
  def path_interval_type(self,  value:int)->None: pass
  @property
  def path_interval(self)->float: pass
  @path_interval.setter
  def path_interval(self,  value:float)->None: pass
  @property
  def path_simplify_angle(self)->float: pass
  @path_simplify_angle.setter
  def path_simplify_angle(self,  value:float)->None: pass
  @property
  def path_rotation(self)->int: pass
  @path_rotation.setter
  def path_rotation(self,  value:int)->None: pass
  @property
  def path_local(self)->bool: pass
  @path_local.setter
  def path_local(self,  value:bool)->None: pass
  @property
  def path_continuous_u(self)->bool: pass
  @path_continuous_u.setter
  def path_continuous_u(self,  value:bool)->None: pass
  @property
  def path_u_distance(self)->float: pass
  @path_u_distance.setter
  def path_u_distance(self,  value:float)->None: pass
  @property
  def path_joined(self)->bool: pass
  @path_joined.setter
  def path_joined(self,  value:bool)->None: pass
  @property
  def smooth_faces(self)->bool: pass
  @smooth_faces.setter
  def smooth_faces(self,  value:bool)->None: pass
  @property
  def material(self)->BaseMaterial3D,ShaderMaterial: pass
  @material.setter
  def material(self,  value:__shadermaterial__.ShaderMaterial)->None: pass
  def set_polygon(self, polygon:__core__.PackedVector2Array)->None: pass

  def get_polygon(self)->__core__.PackedVector2Array: pass

  def set_mode(self, mode:int )->None: pass

  def get_mode(self)->int: pass

  def set_depth(self, depth:float)->None: pass

  def get_depth(self)->float: pass

  def set_spin_degrees(self, degrees:float)->None: pass

  def get_spin_degrees(self)->float: pass

  def set_spin_sides(self, spin_sides:int)->None: pass

  def get_spin_sides(self)->int: pass

  def set_path_node(self, path:__core__.NodePath)->None: pass

  def get_path_node(self)->__core__.NodePath: pass

  def set_path_interval_type(self, interval_type:int )->None: pass

  def get_path_interval_type(self)->int: pass

  def set_path_interval(self, interval:float)->None: pass

  def get_path_interval(self)->float: pass

  def set_path_simplify_angle(self, degrees:float)->None: pass

  def get_path_simplify_angle(self)->float: pass

  def set_path_rotation(self, path_rotation:int )->None: pass

  def get_path_rotation(self)->int: pass

  def set_path_local(self, enable:bool)->None: pass

  def is_path_local(self)->bool: pass

  def set_path_continuous_u(self, enable:bool)->None: pass

  def is_path_continuous_u(self)->bool: pass

  def set_path_u_distance(self, distance:float)->None: pass

  def get_path_u_distance(self)->float: pass

  def set_path_joined(self, enable:bool)->None: pass

  def is_path_joined(self)->bool: pass

  def set_material(self, material:__material__.Material)->None: pass

  def get_material(self)->__material__.Material: pass

  def set_smooth_faces(self, smooth_faces:bool)->None: pass

  def get_smooth_faces(self)->bool: pass


