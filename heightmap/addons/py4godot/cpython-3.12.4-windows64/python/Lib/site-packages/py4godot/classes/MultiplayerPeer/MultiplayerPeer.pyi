from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.PacketPeer.PacketPeer as __packetpeer__
import py4godot.classes.MultiplayerPeer.MultiplayerPeer as __multiplayerpeer__


class MultiplayerPeer(__packetpeer__.PacketPeer):
  peer_connected: BuiltinSignal
  peer_disconnected: BuiltinSignal

  @staticmethod
  def constructor()->MultiplayerPeer:pass



  @staticmethod
  def cast(other:__object__.Object)->MultiplayerPeer:pass


  @property
  def refuse_new_connections(self)->bool: pass
  @refuse_new_connections.setter
  def refuse_new_connections(self,  value:bool)->None: pass
  @property
  def transfer_mode(self)->int: pass
  @transfer_mode.setter
  def transfer_mode(self,  value:int)->None: pass
  @property
  def transfer_channel(self)->int: pass
  @transfer_channel.setter
  def transfer_channel(self,  value:int)->None: pass
  def set_transfer_channel(self, channel:int)->None: pass

  def get_transfer_channel(self)->int: pass

  def set_transfer_mode(self, mode:int )->None: pass

  def get_transfer_mode(self)->int: pass

  def set_target_peer(self, id:int)->None: pass

  def get_packet_peer(self)->int: pass

  def get_packet_channel(self)->int: pass

  def get_packet_mode(self)->int: pass

  def poll(self)->None: pass

  def close(self)->None: pass

  def disconnect_peer(self, peer:int, force:bool=False)->None: pass

  def get_connection_status(self)->int: pass

  def get_unique_id(self)->int: pass

  def generate_unique_id(self)->int: pass

  def set_refuse_new_connections(self, enable:bool)->None: pass

  def is_refusing_new_connections(self)->bool: pass

  def is_server_relay_supported(self)->bool: pass


