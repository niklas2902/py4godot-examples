from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.ReflectionProbe.ReflectionProbe as __reflectionprobe__
import py4godot.classes.VisualInstance3D.VisualInstance3D as __visualinstance3d__


class ReflectionProbe(__visualinstance3d__.VisualInstance3D):

  @staticmethod
  def constructor()->ReflectionProbe:pass



  @staticmethod
  def cast(other:__object__.Object)->ReflectionProbe:pass


  @property
  def update_mode(self)->int: pass
  @update_mode.setter
  def update_mode(self,  value:int)->None: pass
  @property
  def intensity(self)->float: pass
  @intensity.setter
  def intensity(self,  value:float)->None: pass
  @property
  def max_distance(self)->float: pass
  @max_distance.setter
  def max_distance(self,  value:float)->None: pass
  @property
  def size(self)->__core__.Vector3: pass
  @size.setter
  def size(self,  value:__core__.Vector3)->None: pass
  @property
  def origin_offset(self)->__core__.Vector3: pass
  @origin_offset.setter
  def origin_offset(self,  value:__core__.Vector3)->None: pass
  @property
  def box_projection(self)->bool: pass
  @box_projection.setter
  def box_projection(self,  value:bool)->None: pass
  @property
  def interior(self)->bool: pass
  @interior.setter
  def interior(self,  value:bool)->None: pass
  @property
  def enable_shadows(self)->bool: pass
  @enable_shadows.setter
  def enable_shadows(self,  value:bool)->None: pass
  @property
  def cull_mask(self)->int: pass
  @cull_mask.setter
  def cull_mask(self,  value:int)->None: pass
  @property
  def reflection_mask(self)->int: pass
  @reflection_mask.setter
  def reflection_mask(self,  value:int)->None: pass
  @property
  def mesh_lod_threshold(self)->float: pass
  @mesh_lod_threshold.setter
  def mesh_lod_threshold(self,  value:float)->None: pass
  @property
  def ambient_mode(self)->int: pass
  @ambient_mode.setter
  def ambient_mode(self,  value:int)->None: pass
  @property
  def ambient_color(self)->__core__.Color: pass
  @ambient_color.setter
  def ambient_color(self,  value:__core__.Color)->None: pass
  @property
  def ambient_color_energy(self)->float: pass
  @ambient_color_energy.setter
  def ambient_color_energy(self,  value:float)->None: pass
  def set_intensity(self, intensity:float)->None: pass

  def get_intensity(self)->float: pass

  def set_ambient_mode(self, ambient:int )->None: pass

  def get_ambient_mode(self)->int: pass

  def set_ambient_color(self, ambient:__core__.Color)->None: pass

  def get_ambient_color(self)->__core__.Color: pass

  def set_ambient_color_energy(self, ambient_energy:float)->None: pass

  def get_ambient_color_energy(self)->float: pass

  def set_max_distance(self, max_distance:float)->None: pass

  def get_max_distance(self)->float: pass

  def set_mesh_lod_threshold(self, ratio:float)->None: pass

  def get_mesh_lod_threshold(self)->float: pass

  def set_size(self, size:__core__.Vector3)->None: pass

  def get_size(self)->__core__.Vector3: pass

  def set_origin_offset(self, origin_offset:__core__.Vector3)->None: pass

  def get_origin_offset(self)->__core__.Vector3: pass

  def set_as_interior(self, enable:bool)->None: pass

  def is_set_as_interior(self)->bool: pass

  def set_enable_box_projection(self, enable:bool)->None: pass

  def is_box_projection_enabled(self)->bool: pass

  def set_enable_shadows(self, enable:bool)->None: pass

  def are_shadows_enabled(self)->bool: pass

  def set_cull_mask(self, layers:int)->None: pass

  def get_cull_mask(self)->int: pass

  def set_reflection_mask(self, layers:int)->None: pass

  def get_reflection_mask(self)->int: pass

  def set_update_mode(self, mode:int )->None: pass

  def get_update_mode(self)->int: pass


