from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.TLSOptions.TLSOptions as __tlsoptions__
import py4godot.classes.Node.Node as __node__
import py4godot.classes.HTTPClient.HTTPClient as __httpclient__


class HTTPRequest(__node__.Node):
  request_completed: BuiltinSignal

  @staticmethod
  def constructor()->HTTPRequest:pass



  @staticmethod
  def cast(other:__object__.Object)->HTTPRequest:pass


  @property
  def download_file(self)->str: pass
  @download_file.setter
  def download_file(self,  value:str)->None: pass
  @property
  def download_chunk_size(self)->int: pass
  @download_chunk_size.setter
  def download_chunk_size(self,  value:int)->None: pass
  @property
  def use_threads(self)->bool: pass
  @use_threads.setter
  def use_threads(self,  value:bool)->None: pass
  @property
  def accept_gzip(self)->bool: pass
  @accept_gzip.setter
  def accept_gzip(self,  value:bool)->None: pass
  @property
  def body_size_limit(self)->int: pass
  @body_size_limit.setter
  def body_size_limit(self,  value:int)->None: pass
  @property
  def max_redirects(self)->int: pass
  @max_redirects.setter
  def max_redirects(self,  value:int)->None: pass
  @property
  def timeout(self)->float: pass
  @timeout.setter
  def timeout(self,  value:float)->None: pass
  def request(self, url:str, custom_headers:__core__.PackedStringArray= __core__.PackedStringArray.new0(), method:int =0, request_data:str= __core__.String.new0())->int: pass

  def request_raw(self, url:str, custom_headers:__core__.PackedStringArray= __core__.PackedStringArray.new0(), method:int =0, request_data_raw:__core__.PackedByteArray= __core__.PackedByteArray.new0())->int: pass

  def cancel_request(self)->None: pass

  def set_tls_options(self, client_options:__tlsoptions__.TLSOptions)->None: pass

  def get_http_client_status(self)->int: pass

  def set_use_threads(self, enable:bool)->None: pass

  def is_using_threads(self)->bool: pass

  def set_accept_gzip(self, enable:bool)->None: pass

  def is_accepting_gzip(self)->bool: pass

  def set_body_size_limit(self, bytes:int)->None: pass

  def get_body_size_limit(self)->int: pass

  def set_max_redirects(self, amount:int)->None: pass

  def get_max_redirects(self)->int: pass

  def set_download_file(self, path:str)->None: pass

  def get_download_file(self)->str: pass

  def get_downloaded_bytes(self)->int: pass

  def get_body_size(self)->int: pass

  def set_timeout(self, timeout:float)->None: pass

  def get_timeout(self)->float: pass

  def set_download_chunk_size(self, chunk_size:int)->None: pass

  def get_download_chunk_size(self)->int: pass

  def set_http_proxy(self, host:str, port:int)->None: pass

  def set_https_proxy(self, host:str, port:int)->None: pass


