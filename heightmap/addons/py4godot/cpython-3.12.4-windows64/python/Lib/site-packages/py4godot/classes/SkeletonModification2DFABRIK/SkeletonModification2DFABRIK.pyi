from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.SkeletonModification2D.SkeletonModification2D as __skeletonmodification2d__


class SkeletonModification2DFABRIK(__skeletonmodification2d__.SkeletonModification2D):

  @staticmethod
  def constructor()->SkeletonModification2DFABRIK:pass



  @staticmethod
  def cast(other:__object__.Object)->SkeletonModification2DFABRIK:pass


  @property
  def target_nodepath(self)->__core__.NodePath: pass
  @target_nodepath.setter
  def target_nodepath(self,  value:__core__.NodePath)->None: pass
  @property
  def fabrik_data_chain_length(self)->int: pass
  @fabrik_data_chain_length.setter
  def fabrik_data_chain_length(self,  value:int)->None: pass
  def set_target_node(self, target_nodepath:__core__.NodePath)->None: pass

  def get_target_node(self)->__core__.NodePath: pass

  def set_fabrik_data_chain_length(self, length:int)->None: pass

  def get_fabrik_data_chain_length(self)->int: pass

  def set_fabrik_joint_bone2d_node(self, joint_idx:int, bone2d_nodepath:__core__.NodePath)->None: pass

  def get_fabrik_joint_bone2d_node(self, joint_idx:int)->__core__.NodePath: pass

  def set_fabrik_joint_bone_index(self, joint_idx:int, bone_idx:int)->None: pass

  def get_fabrik_joint_bone_index(self, joint_idx:int)->int: pass

  def set_fabrik_joint_magnet_position(self, joint_idx:int, magnet_position:__core__.Vector2)->None: pass

  def get_fabrik_joint_magnet_position(self, joint_idx:int)->__core__.Vector2: pass

  def set_fabrik_joint_use_target_rotation(self, joint_idx:int, use_target_rotation:bool)->None: pass

  def get_fabrik_joint_use_target_rotation(self, joint_idx:int)->bool: pass


