from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.CanvasItem.CanvasItem as __canvasitem__
import py4godot.classes.Node.Node as __node__
import py4godot.classes.CanvasLayer.CanvasLayer as __canvaslayer__
import py4godot.classes.TextServer.TextServer as __textserver__
import py4godot.classes.Material.Material as __material__
import py4godot.classes.Font.Font as __font__
import py4godot.classes.ShaderMaterial.ShaderMaterial as __shadermaterial__
import py4godot.classes.StyleBox.StyleBox as __stylebox__
import py4godot.classes.Mesh.Mesh as __mesh__
import py4godot.classes.Texture2D.Texture2D as __texture2d__
import py4godot.classes.World2D.World2D as __world2d__
import py4godot.classes.MultiMesh.MultiMesh as __multimesh__
import py4godot.classes.InputEvent.InputEvent as __inputevent__


class CanvasItem(__node__.Node):
  draw: BuiltinSignal
  visibility_changed: BuiltinSignal
  hidden: BuiltinSignal
  item_rect_changed: BuiltinSignal

  @staticmethod
  def constructor()->CanvasItem:pass



  @staticmethod
  def cast(other:__object__.Object)->CanvasItem:pass


  @property
  def visible(self)->bool: pass
  @visible.setter
  def visible(self,  value:bool)->None: pass
  @property
  def modulate(self)->__core__.Color: pass
  @modulate.setter
  def modulate(self,  value:__core__.Color)->None: pass
  @property
  def self_modulate(self)->__core__.Color: pass
  @self_modulate.setter
  def self_modulate(self,  value:__core__.Color)->None: pass
  @property
  def show_behind_parent(self)->bool: pass
  @show_behind_parent.setter
  def show_behind_parent(self,  value:bool)->None: pass
  @property
  def top_level(self)->bool: pass
  @top_level.setter
  def top_level(self,  value:bool)->None: pass
  @property
  def clip_children(self)->int: pass
  @clip_children.setter
  def clip_children(self,  value:int)->None: pass
  @property
  def light_mask(self)->int: pass
  @light_mask.setter
  def light_mask(self,  value:int)->None: pass
  @property
  def visibility_layer(self)->int: pass
  @visibility_layer.setter
  def visibility_layer(self,  value:int)->None: pass
  @property
  def z_index(self)->int: pass
  @z_index.setter
  def z_index(self,  value:int)->None: pass
  @property
  def z_as_relative(self)->bool: pass
  @z_as_relative.setter
  def z_as_relative(self,  value:bool)->None: pass
  @property
  def y_sort_enabled(self)->bool: pass
  @y_sort_enabled.setter
  def y_sort_enabled(self,  value:bool)->None: pass
  @property
  def texture_filter(self)->int: pass
  @texture_filter.setter
  def texture_filter(self,  value:int)->None: pass
  @property
  def texture_repeat(self)->int: pass
  @texture_repeat.setter
  def texture_repeat(self,  value:int)->None: pass
  @property
  def material(self)->CanvasItemMaterial,ShaderMaterial: pass
  @material.setter
  def material(self,  value:__shadermaterial__.ShaderMaterial)->None: pass
  @property
  def use_parent_material(self)->bool: pass
  @use_parent_material.setter
  def use_parent_material(self,  value:bool)->None: pass
  def _draw(self)->None: pass

  def get_canvas_item(self)->__core__.RID: pass

  def set_visible(self, visible:bool)->None: pass

  def is_visible(self)->bool: pass

  def is_visible_in_tree(self)->bool: pass

  def show(self)->None: pass

  def hide(self)->None: pass

  def queue_redraw(self)->None: pass

  def move_to_front(self)->None: pass

  def set_as_top_level(self, enable:bool)->None: pass

  def is_set_as_top_level(self)->bool: pass

  def set_light_mask(self, light_mask:int)->None: pass

  def get_light_mask(self)->int: pass

  def set_modulate(self, modulate:__core__.Color)->None: pass

  def get_modulate(self)->__core__.Color: pass

  def set_self_modulate(self, self_modulate:__core__.Color)->None: pass

  def get_self_modulate(self)->__core__.Color: pass

  def set_z_index(self, z_index:int)->None: pass

  def get_z_index(self)->int: pass

  def set_z_as_relative(self, enable:bool)->None: pass

  def is_z_relative(self)->bool: pass

  def set_y_sort_enabled(self, enabled:bool)->None: pass

  def is_y_sort_enabled(self)->bool: pass

  def set_draw_behind_parent(self, enable:bool)->None: pass

  def is_draw_behind_parent_enabled(self)->bool: pass

  def draw_line(self, from_:__core__.Vector2, to:__core__.Vector2, color:__core__.Color, width:float=-1.0, antialiased:bool=False)->None: pass

  def draw_dashed_line(self, from_:__core__.Vector2, to:__core__.Vector2, color:__core__.Color, width:float=-1.0, dash:float=2.0, aligned:bool=True, antialiased:bool=False)->None: pass

  def draw_polyline(self, points:__core__.PackedVector2Array, color:__core__.Color, width:float=-1.0, antialiased:bool=False)->None: pass

  def draw_polyline_colors(self, points:__core__.PackedVector2Array, colors:__core__.PackedColorArray, width:float=-1.0, antialiased:bool=False)->None: pass

  def draw_arc(self, center:__core__.Vector2, radius:float, start_angle:float, end_angle:float, point_count:int, color:__core__.Color, width:float=-1.0, antialiased:bool=False)->None: pass

  def draw_multiline(self, points:__core__.PackedVector2Array, color:__core__.Color, width:float=-1.0, antialiased:bool=False)->None: pass

  def draw_multiline_colors(self, points:__core__.PackedVector2Array, colors:__core__.PackedColorArray, width:float=-1.0, antialiased:bool=False)->None: pass

  def draw_rect(self, rect:__core__.Rect2, color:__core__.Color, filled:bool=True, width:float=-1.0, antialiased:bool=False)->None: pass

  def draw_circle(self, position:__core__.Vector2, radius:float, color:__core__.Color, filled:bool=True, width:float=-1.0, antialiased:bool=False)->None: pass

  def draw_texture(self, texture:__texture2d__.Texture2D, position:__core__.Vector2, modulate:__core__.Color= __core__.Color.new0())->None: pass

  def draw_texture_rect(self, texture:__texture2d__.Texture2D, rect:__core__.Rect2, tile:bool, modulate:__core__.Color= __core__.Color.new0(), transpose:bool=False)->None: pass

  def draw_texture_rect_region(self, texture:__texture2d__.Texture2D, rect:__core__.Rect2, src_rect:__core__.Rect2, modulate:__core__.Color= __core__.Color.new0(), transpose:bool=False, clip_uv:bool=True)->None: pass

  def draw_msdf_texture_rect_region(self, texture:__texture2d__.Texture2D, rect:__core__.Rect2, src_rect:__core__.Rect2, modulate:__core__.Color= __core__.Color.new0(), outline:float=0.0, pixel_range:float=4.0, scale:float=1.0)->None: pass

  def draw_lcd_texture_rect_region(self, texture:__texture2d__.Texture2D, rect:__core__.Rect2, src_rect:__core__.Rect2, modulate:__core__.Color= __core__.Color.new0())->None: pass

  def draw_style_box(self, style_box:__stylebox__.StyleBox, rect:__core__.Rect2)->None: pass

  def draw_primitive(self, points:__core__.PackedVector2Array, colors:__core__.PackedColorArray, uvs:__core__.PackedVector2Array, texture:__texture2d__.Texture2D= __texture2d__.Texture2D.constructor())->None: pass

  def draw_polygon(self, points:__core__.PackedVector2Array, colors:__core__.PackedColorArray, uvs:__core__.PackedVector2Array= __core__.PackedVector2Array.new0(), texture:__texture2d__.Texture2D= __texture2d__.Texture2D.constructor())->None: pass

  def draw_colored_polygon(self, points:__core__.PackedVector2Array, color:__core__.Color, uvs:__core__.PackedVector2Array= __core__.PackedVector2Array.new0(), texture:__texture2d__.Texture2D= __texture2d__.Texture2D.constructor())->None: pass

  def draw_string(self, font:__font__.Font, pos:__core__.Vector2, text:str, alignment:int =0, width:float=-1, font_size:int=16, modulate:__core__.Color= __core__.Color.new0(), justification_flags:int=3, direction:int =0, orientation:int =0)->None: pass

  def draw_multiline_string(self, font:__font__.Font, pos:__core__.Vector2, text:str, alignment:int =0, width:float=-1, font_size:int=16, max_lines:int=-1, modulate:__core__.Color= __core__.Color.new0(), brk_flags:int=3, justification_flags:int=3, direction:int =0, orientation:int =0)->None: pass

  def draw_string_outline(self, font:__font__.Font, pos:__core__.Vector2, text:str, alignment:int =0, width:float=-1, font_size:int=16, size:int=1, modulate:__core__.Color= __core__.Color.new0(), justification_flags:int=3, direction:int =0, orientation:int =0)->None: pass

  def draw_multiline_string_outline(self, font:__font__.Font, pos:__core__.Vector2, text:str, alignment:int =0, width:float=-1, font_size:int=16, max_lines:int=-1, size:int=1, modulate:__core__.Color= __core__.Color.new0(), brk_flags:int=3, justification_flags:int=3, direction:int =0, orientation:int =0)->None: pass

  def draw_char(self, font:__font__.Font, pos:__core__.Vector2, char:str, font_size:int=16, modulate:__core__.Color= __core__.Color.new0())->None: pass

  def draw_char_outline(self, font:__font__.Font, pos:__core__.Vector2, char:str, font_size:int=16, size:int=-1, modulate:__core__.Color= __core__.Color.new0())->None: pass

  def draw_mesh(self, mesh:__mesh__.Mesh, texture:__texture2d__.Texture2D, transform:__core__.Transform2D= __core__.Transform2D.new0(), modulate:__core__.Color= __core__.Color.new0())->None: pass

  def draw_multimesh(self, multimesh:__multimesh__.MultiMesh, texture:__texture2d__.Texture2D)->None: pass

  def draw_set_transform(self, position:__core__.Vector2, rotation:float=0.0, scale:__core__.Vector2= __core__.Vector2.new0())->None: pass

  def draw_set_transform_matrix(self, xform:__core__.Transform2D)->None: pass

  def draw_animation_slice(self, animation_length:float, slice_begin:float, slice_end:float, offset:float=0.0)->None: pass

  def draw_end_animation(self)->None: pass

  def get_transform(self)->__core__.Transform2D: pass

  def get_global_transform(self)->__core__.Transform2D: pass

  def get_global_transform_with_canvas(self)->__core__.Transform2D: pass

  def get_viewport_transform(self)->__core__.Transform2D: pass

  def get_viewport_rect(self)->__core__.Rect2: pass

  def get_canvas_transform(self)->__core__.Transform2D: pass

  def get_screen_transform(self)->__core__.Transform2D: pass

  def get_local_mouse_position(self)->__core__.Vector2: pass

  def get_global_mouse_position(self)->__core__.Vector2: pass

  def get_canvas(self)->__core__.RID: pass

  def get_canvas_layer_node(self)->__canvaslayer__.CanvasLayer: pass

  def get_world_2d(self)->__world2d__.World2D: pass

  def set_material(self, material:__material__.Material)->None: pass

  def get_material(self)->__material__.Material: pass

  def set_use_parent_material(self, enable:bool)->None: pass

  def get_use_parent_material(self)->bool: pass

  def set_notify_local_transform(self, enable:bool)->None: pass

  def is_local_transform_notification_enabled(self)->bool: pass

  def set_notify_transform(self, enable:bool)->None: pass

  def is_transform_notification_enabled(self)->bool: pass

  def force_update_transform(self)->None: pass

  def make_canvas_position_local(self, screen_point:__core__.Vector2)->__core__.Vector2: pass

  def make_input_local(self, event:__inputevent__.InputEvent)->__inputevent__.InputEvent: pass

  def set_visibility_layer(self, layer:int)->None: pass

  def get_visibility_layer(self)->int: pass

  def set_visibility_layer_bit(self, layer:int, enabled:bool)->None: pass

  def get_visibility_layer_bit(self, layer:int)->bool: pass

  def set_texture_filter(self, mode:int )->None: pass

  def get_texture_filter(self)->int: pass

  def set_texture_repeat(self, mode:int )->None: pass

  def get_texture_repeat(self)->int: pass

  def set_clip_children_mode(self, mode:int )->None: pass

  def get_clip_children_mode(self)->int: pass


