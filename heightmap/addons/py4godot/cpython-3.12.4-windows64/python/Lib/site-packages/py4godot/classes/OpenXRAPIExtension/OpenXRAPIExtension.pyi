from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.OpenXRAPIExtension.OpenXRAPIExtension as __openxrapiextension__
import py4godot.classes.OpenXRExtensionWrapperExtension.OpenXRExtensionWrapperExtension as __openxrextensionwrapperextension__
import py4godot.classes.RefCounted.RefCounted as __refcounted__


class OpenXRAPIExtension(__refcounted__.RefCounted):

  @staticmethod
  def constructor()->OpenXRAPIExtension:pass



  @staticmethod
  def cast(other:__object__.Object)->OpenXRAPIExtension:pass


  def get_instance(self)->int: pass

  def get_system_id(self)->int: pass

  def get_session(self)->int: pass

  def xr_result(self, result:int, format:str, args:__core__.Array)->bool: pass

  @staticmethod
  def openxr_is_enabled(check_run_in_editor:bool)->bool: pass

  def get_instance_proc_addr(self, name:str)->int: pass

  def get_error_string(self, result:int)->str: pass

  def get_swapchain_format_name(self, swapchain_format:int)->str: pass

  def is_initialized(self)->bool: pass

  def is_running(self)->bool: pass

  def get_play_space(self)->int: pass

  def get_predicted_display_time(self)->int: pass

  def get_next_frame_time(self)->int: pass

  def can_render(self)->bool: pass

  def get_hand_tracker(self, hand_index:int)->int: pass

  def register_composition_layer_provider(self, extension:__openxrextensionwrapperextension__.OpenXRExtensionWrapperExtension)->None: pass

  def unregister_composition_layer_provider(self, extension:__openxrextensionwrapperextension__.OpenXRExtensionWrapperExtension)->None: pass

  def set_emulate_environment_blend_mode_alpha_blend(self, enabled:bool)->None: pass

  def is_environment_blend_mode_alpha_supported(self)->int: pass


