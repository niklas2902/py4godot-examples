from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.SkeletonModificationStack2D.SkeletonModificationStack2D as __skeletonmodificationstack2d__
import py4godot.classes.Resource.Resource as __resource__


class SkeletonModification2D(__resource__.Resource):

  @staticmethod
  def constructor()->SkeletonModification2D:pass



  @staticmethod
  def cast(other:__object__.Object)->SkeletonModification2D:pass


  @property
  def enabled(self)->bool: pass
  @enabled.setter
  def enabled(self,  value:bool)->None: pass
  @property
  def execution_mode(self)->int: pass
  @execution_mode.setter
  def execution_mode(self,  value:int)->None: pass
  def _execute(self, delta:float)->None: pass

  def _setup_modification(self, modification_stack:__skeletonmodificationstack2d__.SkeletonModificationStack2D)->None: pass

  def _draw_editor_gizmo(self)->None: pass

  def set_enabled(self, enabled:bool)->None: pass

  def get_enabled(self)->bool: pass

  def get_modification_stack(self)->__skeletonmodificationstack2d__.SkeletonModificationStack2D: pass

  def set_is_setup(self, is_setup:bool)->None: pass

  def get_is_setup(self)->bool: pass

  def set_execution_mode(self, execution_mode:int)->None: pass

  def get_execution_mode(self)->int: pass

  def clamp_angle(self, angle:float, min:float, max:float, invert:bool)->float: pass

  def set_editor_draw_gizmo(self, draw_gizmo:bool)->None: pass

  def get_editor_draw_gizmo(self)->bool: pass


