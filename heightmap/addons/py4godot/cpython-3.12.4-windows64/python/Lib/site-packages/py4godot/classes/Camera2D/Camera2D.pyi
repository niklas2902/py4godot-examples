from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Camera2D.Camera2D as __camera2d__
import py4godot.classes.Viewport.Viewport as __viewport__
import py4godot.classes.Node.Node as __node__
import py4godot.classes.Node2D.Node2D as __node2d__


class Camera2D(__node2d__.Node2D):

  @staticmethod
  def constructor()->Camera2D:pass



  @staticmethod
  def cast(other:__object__.Object)->Camera2D:pass


  @property
  def offset(self)->__core__.Vector2: pass
  @offset.setter
  def offset(self,  value:__core__.Vector2)->None: pass
  @property
  def anchor_mode(self)->int: pass
  @anchor_mode.setter
  def anchor_mode(self,  value:int)->None: pass
  @property
  def ignore_rotation(self)->bool: pass
  @ignore_rotation.setter
  def ignore_rotation(self,  value:bool)->None: pass
  @property
  def enabled(self)->bool: pass
  @enabled.setter
  def enabled(self,  value:bool)->None: pass
  @property
  def zoom(self)->__core__.Vector2: pass
  @zoom.setter
  def zoom(self,  value:__core__.Vector2)->None: pass
  @property
  def custom_viewport(self)->__viewport__.Viewport: pass
  @custom_viewport.setter
  def custom_viewport(self,  value:__viewport__.Viewport)->None: pass
  @property
  def process_callback(self)->int: pass
  @process_callback.setter
  def process_callback(self,  value:int)->None: pass
  @property
  def limit_left(self)->int: pass
  @limit_left.setter
  def limit_left(self,  value:int)->None: pass
  @property
  def limit_top(self)->int: pass
  @limit_top.setter
  def limit_top(self,  value:int)->None: pass
  @property
  def limit_right(self)->int: pass
  @limit_right.setter
  def limit_right(self,  value:int)->None: pass
  @property
  def limit_bottom(self)->int: pass
  @limit_bottom.setter
  def limit_bottom(self,  value:int)->None: pass
  @property
  def limit_smoothed(self)->bool: pass
  @limit_smoothed.setter
  def limit_smoothed(self,  value:bool)->None: pass
  @property
  def position_smoothing_enabled(self)->bool: pass
  @position_smoothing_enabled.setter
  def position_smoothing_enabled(self,  value:bool)->None: pass
  @property
  def position_smoothing_speed(self)->float: pass
  @position_smoothing_speed.setter
  def position_smoothing_speed(self,  value:float)->None: pass
  @property
  def rotation_smoothing_enabled(self)->bool: pass
  @rotation_smoothing_enabled.setter
  def rotation_smoothing_enabled(self,  value:bool)->None: pass
  @property
  def rotation_smoothing_speed(self)->float: pass
  @rotation_smoothing_speed.setter
  def rotation_smoothing_speed(self,  value:float)->None: pass
  @property
  def drag_horizontal_enabled(self)->bool: pass
  @drag_horizontal_enabled.setter
  def drag_horizontal_enabled(self,  value:bool)->None: pass
  @property
  def drag_vertical_enabled(self)->bool: pass
  @drag_vertical_enabled.setter
  def drag_vertical_enabled(self,  value:bool)->None: pass
  @property
  def drag_horizontal_offset(self)->float: pass
  @drag_horizontal_offset.setter
  def drag_horizontal_offset(self,  value:float)->None: pass
  @property
  def drag_vertical_offset(self)->float: pass
  @drag_vertical_offset.setter
  def drag_vertical_offset(self,  value:float)->None: pass
  @property
  def drag_left_margin(self)->float: pass
  @drag_left_margin.setter
  def drag_left_margin(self,  value:float)->None: pass
  @property
  def drag_top_margin(self)->float: pass
  @drag_top_margin.setter
  def drag_top_margin(self,  value:float)->None: pass
  @property
  def drag_right_margin(self)->float: pass
  @drag_right_margin.setter
  def drag_right_margin(self,  value:float)->None: pass
  @property
  def drag_bottom_margin(self)->float: pass
  @drag_bottom_margin.setter
  def drag_bottom_margin(self,  value:float)->None: pass
  @property
  def editor_draw_screen(self)->bool: pass
  @editor_draw_screen.setter
  def editor_draw_screen(self,  value:bool)->None: pass
  @property
  def editor_draw_limits(self)->bool: pass
  @editor_draw_limits.setter
  def editor_draw_limits(self,  value:bool)->None: pass
  @property
  def editor_draw_drag_margin(self)->bool: pass
  @editor_draw_drag_margin.setter
  def editor_draw_drag_margin(self,  value:bool)->None: pass
  def set_offset(self, offset:__core__.Vector2)->None: pass

  def get_offset(self)->__core__.Vector2: pass

  def set_anchor_mode(self, anchor_mode:int )->None: pass

  def get_anchor_mode(self)->int: pass

  def set_ignore_rotation(self, ignore:bool)->None: pass

  def is_ignoring_rotation(self)->bool: pass

  def set_process_callback(self, mode:int )->None: pass

  def get_process_callback(self)->int: pass

  def set_enabled(self, enabled:bool)->None: pass

  def is_enabled(self)->bool: pass

  def make_current(self)->None: pass

  def is_current(self)->bool: pass

  def set_limit(self, margin:int , limit:int)->None: pass

  def get_limit(self, margin:int )->int: pass

  def set_limit_smoothing_enabled(self, limit_smoothing_enabled:bool)->None: pass

  def is_limit_smoothing_enabled(self)->bool: pass

  def set_drag_vertical_enabled(self, enabled:bool)->None: pass

  def is_drag_vertical_enabled(self)->bool: pass

  def set_drag_horizontal_enabled(self, enabled:bool)->None: pass

  def is_drag_horizontal_enabled(self)->bool: pass

  def set_drag_vertical_offset(self, offset:float)->None: pass

  def get_drag_vertical_offset(self)->float: pass

  def set_drag_horizontal_offset(self, offset:float)->None: pass

  def get_drag_horizontal_offset(self)->float: pass

  def set_drag_margin(self, margin:int , drag_margin:float)->None: pass

  def get_drag_margin(self, margin:int )->float: pass

  def get_target_position(self)->__core__.Vector2: pass

  def get_screen_center_position(self)->__core__.Vector2: pass

  def set_zoom(self, zoom:__core__.Vector2)->None: pass

  def get_zoom(self)->__core__.Vector2: pass

  def set_custom_viewport(self, viewport:__node__.Node)->None: pass

  def get_custom_viewport(self)->__node__.Node: pass

  def set_position_smoothing_speed(self, position_smoothing_speed:float)->None: pass

  def get_position_smoothing_speed(self)->float: pass

  def set_position_smoothing_enabled(self, position_smoothing_speed:bool)->None: pass

  def is_position_smoothing_enabled(self)->bool: pass

  def set_rotation_smoothing_enabled(self, enabled:bool)->None: pass

  def is_rotation_smoothing_enabled(self)->bool: pass

  def set_rotation_smoothing_speed(self, speed:float)->None: pass

  def get_rotation_smoothing_speed(self)->float: pass

  def force_update_scroll(self)->None: pass

  def reset_smoothing(self)->None: pass

  def align(self)->None: pass

  def set_screen_drawing_enabled(self, screen_drawing_enabled:bool)->None: pass

  def is_screen_drawing_enabled(self)->bool: pass

  def set_limit_drawing_enabled(self, limit_drawing_enabled:bool)->None: pass

  def is_limit_drawing_enabled(self)->bool: pass

  def set_margin_drawing_enabled(self, margin_drawing_enabled:bool)->None: pass

  def is_margin_drawing_enabled(self)->bool: pass


