from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Material.Material as __material__
import py4godot.classes.ArrayMesh.ArrayMesh as __arraymesh__
import py4godot.classes.Mesh.Mesh as __mesh__
import py4godot.classes.Resource.Resource as __resource__


class ImporterMesh(__resource__.Resource):

  @staticmethod
  def constructor()->ImporterMesh:pass



  @staticmethod
  def cast(other:__object__.Object)->ImporterMesh:pass


  def add_blend_shape(self, name:str)->None: pass

  def get_blend_shape_count(self)->int: pass

  def get_blend_shape_name(self, blend_shape_idx:int)->str: pass

  def set_blend_shape_mode(self, mode:int )->None: pass

  def get_blend_shape_mode(self)->int: pass

  def add_surface(self, primitive:int , arrays:__core__.Array, blend_shapes:__core__.Array=Array[Array]([]), lods:__core__.Dictionary= __core__.Dictionary.new0(), material:__material__.Material= __material__.Material.constructor(), name:str= __core__.String.new0(), flags:int=0)->None: pass

  def get_surface_count(self)->int: pass

  def get_surface_primitive_type(self, surface_idx:int)->int: pass

  def get_surface_name(self, surface_idx:int)->str: pass

  def get_surface_arrays(self, surface_idx:int)->__core__.Array: pass

  def get_surface_blend_shape_arrays(self, surface_idx:int, blend_shape_idx:int)->__core__.Array: pass

  def get_surface_lod_count(self, surface_idx:int)->int: pass

  def get_surface_lod_size(self, surface_idx:int, lod_idx:int)->float: pass

  def get_surface_lod_indices(self, surface_idx:int, lod_idx:int)->__core__.PackedInt32Array: pass

  def get_surface_material(self, surface_idx:int)->__material__.Material: pass

  def get_surface_format(self, surface_idx:int)->int: pass

  def set_surface_name(self, surface_idx:int, name:str)->None: pass

  def set_surface_material(self, surface_idx:int, material:__material__.Material)->None: pass

  def generate_lods(self, normal_merge_angle:float, normal_split_angle:float, bone_transform_array:__core__.Array)->None: pass

  def get_mesh(self, base_mesh:__arraymesh__.ArrayMesh= __arraymesh__.ArrayMesh.constructor())->__arraymesh__.ArrayMesh: pass

  def clear(self)->None: pass

  def set_lightmap_size_hint(self, size:__core__.Vector2i)->None: pass

  def get_lightmap_size_hint(self)->__core__.Vector2i: pass


