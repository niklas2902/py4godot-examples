from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Node.Node as __node__
import py4godot.classes.CollisionObject2D.CollisionObject2D as __collisionobject2d__
import py4godot.classes.Area2D.Area2D as __area2d__


class Area2D(__collisionobject2d__.CollisionObject2D):
  body_shape_entered: BuiltinSignal
  body_shape_exited: BuiltinSignal
  body_entered: BuiltinSignal
  body_exited: BuiltinSignal
  area_shape_entered: BuiltinSignal
  area_shape_exited: BuiltinSignal
  area_entered: BuiltinSignal
  area_exited: BuiltinSignal

  @staticmethod
  def constructor()->Area2D:pass



  @staticmethod
  def cast(other:__object__.Object)->Area2D:pass


  @property
  def monitoring(self)->bool: pass
  @monitoring.setter
  def monitoring(self,  value:bool)->None: pass
  @property
  def monitorable(self)->bool: pass
  @monitorable.setter
  def monitorable(self,  value:bool)->None: pass
  @property
  def priority(self)->int: pass
  @priority.setter
  def priority(self,  value:int)->None: pass
  @property
  def gravity_space_override(self)->int: pass
  @gravity_space_override.setter
  def gravity_space_override(self,  value:int)->None: pass
  @property
  def gravity_point(self)->bool: pass
  @gravity_point.setter
  def gravity_point(self,  value:bool)->None: pass
  @property
  def gravity_point_unit_distance(self)->float: pass
  @gravity_point_unit_distance.setter
  def gravity_point_unit_distance(self,  value:float)->None: pass
  @property
  def gravity_point_center(self)->__core__.Vector2: pass
  @gravity_point_center.setter
  def gravity_point_center(self,  value:__core__.Vector2)->None: pass
  @property
  def gravity_direction(self)->__core__.Vector2: pass
  @gravity_direction.setter
  def gravity_direction(self,  value:__core__.Vector2)->None: pass
  @property
  def gravity(self)->float: pass
  @gravity.setter
  def gravity(self,  value:float)->None: pass
  @property
  def linear_damp_space_override(self)->int: pass
  @linear_damp_space_override.setter
  def linear_damp_space_override(self,  value:int)->None: pass
  @property
  def linear_damp(self)->float: pass
  @linear_damp.setter
  def linear_damp(self,  value:float)->None: pass
  @property
  def angular_damp_space_override(self)->int: pass
  @angular_damp_space_override.setter
  def angular_damp_space_override(self,  value:int)->None: pass
  @property
  def angular_damp(self)->float: pass
  @angular_damp.setter
  def angular_damp(self,  value:float)->None: pass
  @property
  def audio_bus_override(self)->bool: pass
  @audio_bus_override.setter
  def audio_bus_override(self,  value:bool)->None: pass
  @property
  def audio_bus_name(self)->__core__.StringName: pass
  @audio_bus_name.setter
  def audio_bus_name(self,  value:__core__.StringName)->None: pass
  def set_gravity_space_override_mode(self, space_override_mode:int )->None: pass

  def get_gravity_space_override_mode(self)->int: pass

  def set_gravity_is_point(self, enable:bool)->None: pass

  def is_gravity_a_point(self)->bool: pass

  def set_gravity_point_unit_distance(self, distance_scale:float)->None: pass

  def get_gravity_point_unit_distance(self)->float: pass

  def set_gravity_point_center(self, center:__core__.Vector2)->None: pass

  def get_gravity_point_center(self)->__core__.Vector2: pass

  def set_gravity_direction(self, direction:__core__.Vector2)->None: pass

  def get_gravity_direction(self)->__core__.Vector2: pass

  def set_gravity(self, gravity:float)->None: pass

  def get_gravity(self)->float: pass

  def set_linear_damp_space_override_mode(self, space_override_mode:int )->None: pass

  def get_linear_damp_space_override_mode(self)->int: pass

  def set_angular_damp_space_override_mode(self, space_override_mode:int )->None: pass

  def get_angular_damp_space_override_mode(self)->int: pass

  def set_linear_damp(self, linear_damp:float)->None: pass

  def get_linear_damp(self)->float: pass

  def set_angular_damp(self, angular_damp:float)->None: pass

  def get_angular_damp(self)->float: pass

  def set_priority(self, priority:int)->None: pass

  def get_priority(self)->int: pass

  def set_monitoring(self, enable:bool)->None: pass

  def is_monitoring(self)->bool: pass

  def set_monitorable(self, enable:bool)->None: pass

  def is_monitorable(self)->bool: pass

  def get_overlapping_bodies(self)->__core__.Array: pass

  def get_overlapping_areas(self)->__core__.Array: pass

  def has_overlapping_bodies(self)->bool: pass

  def has_overlapping_areas(self)->bool: pass

  def overlaps_body(self, body:__node__.Node)->bool: pass

  def overlaps_area(self, area:__node__.Node)->bool: pass

  def set_audio_bus_name(self, name:__core__.StringName)->None: pass

  def get_audio_bus_name(self)->__core__.StringName: pass

  def set_audio_bus_override(self, enable:bool)->None: pass

  def is_overriding_audio_bus(self)->bool: pass


