from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Shape2D.Shape2D as __shape2d__
import py4godot.classes.Node2D.Node2D as __node2d__


class CollisionShape2D(__node2d__.Node2D):

  @staticmethod
  def constructor()->CollisionShape2D:pass



  @staticmethod
  def cast(other:__object__.Object)->CollisionShape2D:pass


  @property
  def shape(self)->__shape2d__.Shape2D: pass
  @shape.setter
  def shape(self,  value:__shape2d__.Shape2D)->None: pass
  @property
  def disabled(self)->bool: pass
  @disabled.setter
  def disabled(self,  value:bool)->None: pass
  @property
  def one_way_collision(self)->bool: pass
  @one_way_collision.setter
  def one_way_collision(self,  value:bool)->None: pass
  @property
  def one_way_collision_margin(self)->float: pass
  @one_way_collision_margin.setter
  def one_way_collision_margin(self,  value:float)->None: pass
  @property
  def debug_color(self)->__core__.Color: pass
  @debug_color.setter
  def debug_color(self,  value:__core__.Color)->None: pass
  def set_shape(self, shape:__shape2d__.Shape2D)->None: pass

  def get_shape(self)->__shape2d__.Shape2D: pass

  def set_disabled(self, disabled:bool)->None: pass

  def is_disabled(self)->bool: pass

  def set_one_way_collision(self, enabled:bool)->None: pass

  def is_one_way_collision_enabled(self)->bool: pass

  def set_one_way_collision_margin(self, margin:float)->None: pass

  def get_one_way_collision_margin(self)->float: pass

  def set_debug_color(self, color:__core__.Color)->None: pass

  def get_debug_color(self)->__core__.Color: pass


