from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.RefCounted.RefCounted as __refcounted__


class NavigationPathQueryResult3D(__refcounted__.RefCounted):

  @staticmethod
  def constructor()->NavigationPathQueryResult3D:pass



  @staticmethod
  def cast(other:__object__.Object)->NavigationPathQueryResult3D:pass


  @property
  def path(self)->__core__.PackedVector3Array: pass
  @path.setter
  def path(self,  value:__core__.PackedVector3Array)->None: pass
  @property
  def path_types(self)->__core__.PackedInt32Array: pass
  @path_types.setter
  def path_types(self,  value:__core__.PackedInt32Array)->None: pass
  @property
  def path_rids(self)->typedarray::RID: pass
  @path_rids.setter
  def path_rids(self,  value:__core__.Array)->None: pass
  @property
  def path_owner_ids(self)->__core__.PackedInt64Array: pass
  @path_owner_ids.setter
  def path_owner_ids(self,  value:__core__.PackedInt64Array)->None: pass
  def set_path(self, path:__core__.PackedVector3Array)->None: pass

  def get_path(self)->__core__.PackedVector3Array: pass

  def set_path_types(self, path_types:__core__.PackedInt32Array)->None: pass

  def get_path_types(self)->__core__.PackedInt32Array: pass

  def set_path_rids(self, path_rids:__core__.Array)->None: pass

  def get_path_rids(self)->__core__.Array: pass

  def set_path_owner_ids(self, path_owner_ids:__core__.PackedInt64Array)->None: pass

  def get_path_owner_ids(self)->__core__.PackedInt64Array: pass

  def reset(self)->None: pass


