from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.PacketPeer.PacketPeer as __packetpeer__
import py4godot.classes.StreamPeer.StreamPeer as __streampeer__


class PacketPeerStream(__packetpeer__.PacketPeer):

  @staticmethod
  def constructor()->PacketPeerStream:pass



  @staticmethod
  def cast(other:__object__.Object)->PacketPeerStream:pass


  @property
  def input_buffer_max_size(self)->int: pass
  @input_buffer_max_size.setter
  def input_buffer_max_size(self,  value:int)->None: pass
  @property
  def output_buffer_max_size(self)->int: pass
  @output_buffer_max_size.setter
  def output_buffer_max_size(self,  value:int)->None: pass
  @property
  def stream_peer(self)->__streampeer__.StreamPeer: pass
  @stream_peer.setter
  def stream_peer(self,  value:__streampeer__.StreamPeer)->None: pass
  def set_stream_peer(self, peer:__streampeer__.StreamPeer)->None: pass

  def get_stream_peer(self)->__streampeer__.StreamPeer: pass

  def set_input_buffer_max_size(self, max_size_bytes:int)->None: pass

  def set_output_buffer_max_size(self, max_size_bytes:int)->None: pass

  def get_input_buffer_max_size(self)->int: pass

  def get_output_buffer_max_size(self)->int: pass


