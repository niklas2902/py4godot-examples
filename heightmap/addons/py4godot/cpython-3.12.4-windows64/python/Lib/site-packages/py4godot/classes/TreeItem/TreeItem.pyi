from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Tree.Tree as __tree__
import py4godot.classes.Object.Object as __object__
import py4godot.classes.TextServer.TextServer as __textserver__
import py4godot.classes.Font.Font as __font__
import py4godot.classes.Control.Control as __control__
import py4godot.classes.TreeItem.TreeItem as __treeitem__
import py4godot.classes.Texture2D.Texture2D as __texture2d__


class TreeItem(__object__.Object):

  @staticmethod
  def constructor()->TreeItem:pass



  @staticmethod
  def cast(other:__object__.Object)->TreeItem:pass


  @property
  def collapsed(self)->bool: pass
  @collapsed.setter
  def collapsed(self,  value:bool)->None: pass
  @property
  def visible(self)->bool: pass
  @visible.setter
  def visible(self,  value:bool)->None: pass
  @property
  def disable_folding(self)->bool: pass
  @disable_folding.setter
  def disable_folding(self,  value:bool)->None: pass
  @property
  def custom_minimum_height(self)->int: pass
  @custom_minimum_height.setter
  def custom_minimum_height(self,  value:int)->None: pass
  def set_cell_mode(self, column:int, mode:int )->None: pass

  def get_cell_mode(self, column:int)->int: pass

  def set_edit_multiline(self, column:int, multiline:bool)->None: pass

  def is_edit_multiline(self, column:int)->bool: pass

  def set_checked(self, column:int, checked:bool)->None: pass

  def set_indeterminate(self, column:int, indeterminate:bool)->None: pass

  def is_checked(self, column:int)->bool: pass

  def is_indeterminate(self, column:int)->bool: pass

  def propagate_check(self, column:int, emit_signal:bool=True)->None: pass

  def set_text(self, column:int, text:str)->None: pass

  def get_text(self, column:int)->str: pass

  def set_text_direction(self, column:int, direction:int )->None: pass

  def get_text_direction(self, column:int)->int: pass

  def set_autowrap_mode(self, column:int, autowrap_mode:int )->None: pass

  def get_autowrap_mode(self, column:int)->int: pass

  def set_text_overrun_behavior(self, column:int, overrun_behavior:int )->None: pass

  def get_text_overrun_behavior(self, column:int)->int: pass

  def set_structured_text_bidi_override(self, column:int, parser:int )->None: pass

  def get_structured_text_bidi_override(self, column:int)->int: pass

  def set_structured_text_bidi_override_options(self, column:int, args:__core__.Array)->None: pass

  def get_structured_text_bidi_override_options(self, column:int)->__core__.Array: pass

  def set_language(self, column:int, language:str)->None: pass

  def get_language(self, column:int)->str: pass

  def set_suffix(self, column:int, text:str)->None: pass

  def get_suffix(self, column:int)->str: pass

  def set_icon(self, column:int, texture:__texture2d__.Texture2D)->None: pass

  def get_icon(self, column:int)->__texture2d__.Texture2D: pass

  def set_icon_region(self, column:int, region:__core__.Rect2)->None: pass

  def get_icon_region(self, column:int)->__core__.Rect2: pass

  def set_icon_max_width(self, column:int, width:int)->None: pass

  def get_icon_max_width(self, column:int)->int: pass

  def set_icon_modulate(self, column:int, modulate:__core__.Color)->None: pass

  def get_icon_modulate(self, column:int)->__core__.Color: pass

  def set_range(self, column:int, value:float)->None: pass

  def get_range(self, column:int)->float: pass

  def set_range_config(self, column:int, min:float, max:float, step:float, expr:bool=False)->None: pass

  def get_range_config(self, column:int)->__core__.Dictionary: pass

  def set_metadata(self, column:int, meta:object)->None: pass

  def get_metadata(self, column:int)->object: pass

  def set_custom_draw(self, column:int, object:__object__.Object, callback:__core__.StringName)->None: pass

  def set_custom_draw_callback(self, column:int, callback:__core__.Callable)->None: pass

  def get_custom_draw_callback(self, column:int)->__core__.Callable: pass

  def set_collapsed(self, enable:bool)->None: pass

  def is_collapsed(self)->bool: pass

  def set_collapsed_recursive(self, enable:bool)->None: pass

  def is_any_collapsed(self, only_visible:bool=False)->bool: pass

  def set_visible(self, enable:bool)->None: pass

  def is_visible(self)->bool: pass

  def is_visible_in_tree(self)->bool: pass

  def uncollapse_tree(self)->None: pass

  def set_custom_minimum_height(self, height:int)->None: pass

  def get_custom_minimum_height(self)->int: pass

  def set_selectable(self, column:int, selectable:bool)->None: pass

  def is_selectable(self, column:int)->bool: pass

  def is_selected(self, column:int)->bool: pass

  def select(self, column:int)->None: pass

  def deselect(self, column:int)->None: pass

  def set_editable(self, column:int, enabled:bool)->None: pass

  def is_editable(self, column:int)->bool: pass

  def set_custom_color(self, column:int, color:__core__.Color)->None: pass

  def get_custom_color(self, column:int)->__core__.Color: pass

  def clear_custom_color(self, column:int)->None: pass

  def set_custom_font(self, column:int, font:__font__.Font)->None: pass

  def get_custom_font(self, column:int)->__font__.Font: pass

  def set_custom_font_size(self, column:int, font_size:int)->None: pass

  def get_custom_font_size(self, column:int)->int: pass

  def set_custom_bg_color(self, column:int, color:__core__.Color, just_outline:bool=False)->None: pass

  def clear_custom_bg_color(self, column:int)->None: pass

  def get_custom_bg_color(self, column:int)->__core__.Color: pass

  def set_custom_as_button(self, column:int, enable:bool)->None: pass

  def is_custom_set_as_button(self, column:int)->bool: pass

  def add_button(self, column:int, button:__texture2d__.Texture2D, id:int=-1, disabled:bool=False, tooltip_text:str= __core__.String.new0())->None: pass

  def get_button_count(self, column:int)->int: pass

  def get_button_tooltip_text(self, column:int, button_index:int)->str: pass

  def get_button_id(self, column:int, button_index:int)->int: pass

  def get_button_by_id(self, column:int, id:int)->int: pass

  def get_button_color(self, column:int, id:int)->__core__.Color: pass

  def get_button(self, column:int, button_index:int)->__texture2d__.Texture2D: pass

  def set_button_tooltip_text(self, column:int, button_index:int, tooltip:str)->None: pass

  def set_button(self, column:int, button_index:int, button:__texture2d__.Texture2D)->None: pass

  def erase_button(self, column:int, button_index:int)->None: pass

  def set_button_disabled(self, column:int, button_index:int, disabled:bool)->None: pass

  def set_button_color(self, column:int, button_index:int, color:__core__.Color)->None: pass

  def is_button_disabled(self, column:int, button_index:int)->bool: pass

  def set_tooltip_text(self, column:int, tooltip:str)->None: pass

  def get_tooltip_text(self, column:int)->str: pass

  def set_text_alignment(self, column:int, text_alignment:int )->None: pass

  def get_text_alignment(self, column:int)->int: pass

  def set_expand_right(self, column:int, enable:bool)->None: pass

  def get_expand_right(self, column:int)->bool: pass

  def set_disable_folding(self, disable:bool)->None: pass

  def is_folding_disabled(self)->bool: pass

  def create_child(self, index:int=-1)->__treeitem__.TreeItem: pass

  def add_child(self, child:__treeitem__.TreeItem)->None: pass

  def remove_child(self, child:__treeitem__.TreeItem)->None: pass

  def get_tree(self)->__tree__.Tree: pass

  def get_next(self)->__treeitem__.TreeItem: pass

  def get_prev(self)->__treeitem__.TreeItem: pass

  def get_parent(self)->__treeitem__.TreeItem: pass

  def get_first_child(self)->__treeitem__.TreeItem: pass

  def get_next_in_tree(self, wrap:bool=False)->__treeitem__.TreeItem: pass

  def get_prev_in_tree(self, wrap:bool=False)->__treeitem__.TreeItem: pass

  def get_next_visible(self, wrap:bool=False)->__treeitem__.TreeItem: pass

  def get_prev_visible(self, wrap:bool=False)->__treeitem__.TreeItem: pass

  def get_child(self, index:int)->__treeitem__.TreeItem: pass

  def get_child_count(self)->int: pass

  def get_children(self)->__core__.Array: pass

  def get_index(self)->int: pass

  def move_before(self, item:__treeitem__.TreeItem)->None: pass

  def move_after(self, item:__treeitem__.TreeItem)->None: pass

  def call_recursive(self, method:__core__.StringName)->None: pass


