from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.VisualInstance3D.VisualInstance3D as __visualinstance3d__
import py4godot.classes.Light3D.Light3D as __light3d__
import py4godot.classes.Texture2D.Texture2D as __texture2d__


class Light3D(__visualinstance3d__.VisualInstance3D):

  @staticmethod
  def constructor()->Light3D:pass



  @staticmethod
  def cast(other:__object__.Object)->Light3D:pass


  @property
  def light_intensity_lumens(self)->float: pass
  @light_intensity_lumens.setter
  def light_intensity_lumens(self,  value:float)->None: pass
  @property
  def light_intensity_lux(self)->float: pass
  @light_intensity_lux.setter
  def light_intensity_lux(self,  value:float)->None: pass
  @property
  def light_temperature(self)->float: pass
  @light_temperature.setter
  def light_temperature(self,  value:float)->None: pass
  @property
  def light_color(self)->__core__.Color: pass
  @light_color.setter
  def light_color(self,  value:__core__.Color)->None: pass
  @property
  def light_energy(self)->float: pass
  @light_energy.setter
  def light_energy(self,  value:float)->None: pass
  @property
  def light_indirect_energy(self)->float: pass
  @light_indirect_energy.setter
  def light_indirect_energy(self,  value:float)->None: pass
  @property
  def light_volumetric_fog_energy(self)->float: pass
  @light_volumetric_fog_energy.setter
  def light_volumetric_fog_energy(self,  value:float)->None: pass
  @property
  def light_projector(self)->__texture2d__.Texture2D: pass
  @light_projector.setter
  def light_projector(self,  value:__texture2d__.Texture2D)->None: pass
  @property
  def light_size(self)->float: pass
  @light_size.setter
  def light_size(self,  value:float)->None: pass
  @property
  def light_angular_distance(self)->float: pass
  @light_angular_distance.setter
  def light_angular_distance(self,  value:float)->None: pass
  @property
  def light_negative(self)->bool: pass
  @light_negative.setter
  def light_negative(self,  value:bool)->None: pass
  @property
  def light_specular(self)->float: pass
  @light_specular.setter
  def light_specular(self,  value:float)->None: pass
  @property
  def light_bake_mode(self)->int: pass
  @light_bake_mode.setter
  def light_bake_mode(self,  value:int)->None: pass
  @property
  def light_cull_mask(self)->int: pass
  @light_cull_mask.setter
  def light_cull_mask(self,  value:int)->None: pass
  @property
  def shadow_enabled(self)->bool: pass
  @shadow_enabled.setter
  def shadow_enabled(self,  value:bool)->None: pass
  @property
  def shadow_bias(self)->float: pass
  @shadow_bias.setter
  def shadow_bias(self,  value:float)->None: pass
  @property
  def shadow_normal_bias(self)->float: pass
  @shadow_normal_bias.setter
  def shadow_normal_bias(self,  value:float)->None: pass
  @property
  def shadow_reverse_cull_face(self)->bool: pass
  @shadow_reverse_cull_face.setter
  def shadow_reverse_cull_face(self,  value:bool)->None: pass
  @property
  def shadow_transmittance_bias(self)->float: pass
  @shadow_transmittance_bias.setter
  def shadow_transmittance_bias(self,  value:float)->None: pass
  @property
  def shadow_opacity(self)->float: pass
  @shadow_opacity.setter
  def shadow_opacity(self,  value:float)->None: pass
  @property
  def shadow_blur(self)->float: pass
  @shadow_blur.setter
  def shadow_blur(self,  value:float)->None: pass
  @property
  def distance_fade_enabled(self)->bool: pass
  @distance_fade_enabled.setter
  def distance_fade_enabled(self,  value:bool)->None: pass
  @property
  def distance_fade_begin(self)->float: pass
  @distance_fade_begin.setter
  def distance_fade_begin(self,  value:float)->None: pass
  @property
  def distance_fade_shadow(self)->float: pass
  @distance_fade_shadow.setter
  def distance_fade_shadow(self,  value:float)->None: pass
  @property
  def distance_fade_length(self)->float: pass
  @distance_fade_length.setter
  def distance_fade_length(self,  value:float)->None: pass
  @property
  def editor_only(self)->bool: pass
  @editor_only.setter
  def editor_only(self,  value:bool)->None: pass
  def set_editor_only(self, editor_only:bool)->None: pass

  def is_editor_only(self)->bool: pass

  def set_param(self, param:int , value:float)->None: pass

  def get_param(self, param:int )->float: pass

  def set_shadow(self, enabled:bool)->None: pass

  def has_shadow(self)->bool: pass

  def set_negative(self, enabled:bool)->None: pass

  def is_negative(self)->bool: pass

  def set_cull_mask(self, cull_mask:int)->None: pass

  def get_cull_mask(self)->int: pass

  def set_enable_distance_fade(self, enable:bool)->None: pass

  def is_distance_fade_enabled(self)->bool: pass

  def set_distance_fade_begin(self, distance:float)->None: pass

  def get_distance_fade_begin(self)->float: pass

  def set_distance_fade_shadow(self, distance:float)->None: pass

  def get_distance_fade_shadow(self)->float: pass

  def set_distance_fade_length(self, distance:float)->None: pass

  def get_distance_fade_length(self)->float: pass

  def set_color(self, color:__core__.Color)->None: pass

  def get_color(self)->__core__.Color: pass

  def set_shadow_reverse_cull_face(self, enable:bool)->None: pass

  def get_shadow_reverse_cull_face(self)->bool: pass

  def set_bake_mode(self, bake_mode:int )->None: pass

  def get_bake_mode(self)->int: pass

  def set_projector(self, projector:__texture2d__.Texture2D)->None: pass

  def get_projector(self)->__texture2d__.Texture2D: pass

  def set_temperature(self, temperature:float)->None: pass

  def get_temperature(self)->float: pass

  def get_correlated_color(self)->__core__.Color: pass


