from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.InputEvent.InputEvent as __inputevent__


class InputEventMIDI(__inputevent__.InputEvent):

  @staticmethod
  def constructor()->InputEventMIDI:pass



  @staticmethod
  def cast(other:__object__.Object)->InputEventMIDI:pass


  @property
  def channel(self)->int: pass
  @channel.setter
  def channel(self,  value:int)->None: pass
  @property
  def message(self)->int: pass
  @message.setter
  def message(self,  value:int)->None: pass
  @property
  def pitch(self)->int: pass
  @pitch.setter
  def pitch(self,  value:int)->None: pass
  @property
  def velocity(self)->int: pass
  @velocity.setter
  def velocity(self,  value:int)->None: pass
  @property
  def instrument(self)->int: pass
  @instrument.setter
  def instrument(self,  value:int)->None: pass
  @property
  def pressure(self)->int: pass
  @pressure.setter
  def pressure(self,  value:int)->None: pass
  @property
  def controller_number(self)->int: pass
  @controller_number.setter
  def controller_number(self,  value:int)->None: pass
  @property
  def controller_value(self)->int: pass
  @controller_value.setter
  def controller_value(self,  value:int)->None: pass
  def set_channel(self, channel:int)->None: pass

  def get_channel(self)->int: pass

  def set_message(self, message:int )->None: pass

  def get_message(self)->int: pass

  def set_pitch(self, pitch:int)->None: pass

  def get_pitch(self)->int: pass

  def set_velocity(self, velocity:int)->None: pass

  def get_velocity(self)->int: pass

  def set_instrument(self, instrument:int)->None: pass

  def get_instrument(self)->int: pass

  def set_pressure(self, pressure:int)->None: pass

  def get_pressure(self)->int: pass

  def set_controller_number(self, controller_number:int)->None: pass

  def get_controller_number(self)->int: pass

  def set_controller_value(self, controller_value:int)->None: pass

  def get_controller_value(self)->int: pass


