from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.InputEventFromWindow.InputEventFromWindow as __inputeventfromwindow__


class InputEventWithModifiers(__inputeventfromwindow__.InputEventFromWindow):

  @staticmethod
  def constructor()->InputEventWithModifiers:pass



  @staticmethod
  def cast(other:__object__.Object)->InputEventWithModifiers:pass


  @property
  def command_or_control_autoremap(self)->bool: pass
  @command_or_control_autoremap.setter
  def command_or_control_autoremap(self,  value:bool)->None: pass
  @property
  def alt_pressed(self)->bool: pass
  @alt_pressed.setter
  def alt_pressed(self,  value:bool)->None: pass
  @property
  def shift_pressed(self)->bool: pass
  @shift_pressed.setter
  def shift_pressed(self,  value:bool)->None: pass
  @property
  def ctrl_pressed(self)->bool: pass
  @ctrl_pressed.setter
  def ctrl_pressed(self,  value:bool)->None: pass
  @property
  def meta_pressed(self)->bool: pass
  @meta_pressed.setter
  def meta_pressed(self,  value:bool)->None: pass
  def set_command_or_control_autoremap(self, enable:bool)->None: pass

  def is_command_or_control_autoremap(self)->bool: pass

  def is_command_or_control_pressed(self)->bool: pass

  def set_alt_pressed(self, pressed:bool)->None: pass

  def is_alt_pressed(self)->bool: pass

  def set_shift_pressed(self, pressed:bool)->None: pass

  def is_shift_pressed(self)->bool: pass

  def set_ctrl_pressed(self, pressed:bool)->None: pass

  def is_ctrl_pressed(self)->bool: pass

  def set_meta_pressed(self, pressed:bool)->None: pass

  def is_meta_pressed(self)->bool: pass

  def get_modifiers_mask(self)->int: pass


