from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.RefCounted.RefCounted as __refcounted__
import py4godot.classes.UPNPDevice.UPNPDevice as __upnpdevice__


class UPNP(__refcounted__.RefCounted):

  @staticmethod
  def constructor()->UPNP:pass



  @staticmethod
  def cast(other:__object__.Object)->UPNP:pass


  @property
  def discover_multicast_if(self)->str: pass
  @discover_multicast_if.setter
  def discover_multicast_if(self,  value:str)->None: pass
  @property
  def discover_local_port(self)->int: pass
  @discover_local_port.setter
  def discover_local_port(self,  value:int)->None: pass
  @property
  def discover_ipv6(self)->bool: pass
  @discover_ipv6.setter
  def discover_ipv6(self,  value:bool)->None: pass
  def get_device_count(self)->int: pass

  def get_device(self, index:int)->__upnpdevice__.UPNPDevice: pass

  def add_device(self, device:__upnpdevice__.UPNPDevice)->None: pass

  def set_device(self, index:int, device:__upnpdevice__.UPNPDevice)->None: pass

  def remove_device(self, index:int)->None: pass

  def clear_devices(self)->None: pass

  def get_gateway(self)->__upnpdevice__.UPNPDevice: pass

  def discover(self, timeout:int=2000, ttl:int=2, device_filter:str= __core__.String.new0())->int: pass

  def query_external_address(self)->str: pass

  def add_port_mapping(self, port:int, port_internal:int=0, desc:str= __core__.String.new0(), proto:str= __core__.String.new0(), duration:int=0)->int: pass

  def delete_port_mapping(self, port:int, proto:str= __core__.String.new0())->int: pass

  def set_discover_multicast_if(self, m_if:str)->None: pass

  def get_discover_multicast_if(self)->str: pass

  def set_discover_local_port(self, port:int)->None: pass

  def get_discover_local_port(self)->int: pass

  def set_discover_ipv6(self, ipv6:bool)->None: pass

  def is_discover_ipv6(self)->bool: pass


