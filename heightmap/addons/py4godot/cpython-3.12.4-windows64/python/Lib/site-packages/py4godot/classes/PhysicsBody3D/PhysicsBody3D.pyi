from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.CollisionObject3D.CollisionObject3D as __collisionobject3d__
import py4godot.classes.KinematicCollision3D.KinematicCollision3D as __kinematiccollision3d__
import py4godot.classes.Node.Node as __node__
import py4godot.classes.PhysicsServer3D.PhysicsServer3D as __physicsserver3d__


class PhysicsBody3D(__collisionobject3d__.CollisionObject3D):

  @staticmethod
  def constructor()->PhysicsBody3D:pass



  @staticmethod
  def cast(other:__object__.Object)->PhysicsBody3D:pass


  @property
  def axis_lock_linear_x(self)->bool: pass
  @axis_lock_linear_x.setter
  def axis_lock_linear_x(self,  value:bool)->None: pass
  @property
  def axis_lock_linear_y(self)->bool: pass
  @axis_lock_linear_y.setter
  def axis_lock_linear_y(self,  value:bool)->None: pass
  @property
  def axis_lock_linear_z(self)->bool: pass
  @axis_lock_linear_z.setter
  def axis_lock_linear_z(self,  value:bool)->None: pass
  @property
  def axis_lock_angular_x(self)->bool: pass
  @axis_lock_angular_x.setter
  def axis_lock_angular_x(self,  value:bool)->None: pass
  @property
  def axis_lock_angular_y(self)->bool: pass
  @axis_lock_angular_y.setter
  def axis_lock_angular_y(self,  value:bool)->None: pass
  @property
  def axis_lock_angular_z(self)->bool: pass
  @axis_lock_angular_z.setter
  def axis_lock_angular_z(self,  value:bool)->None: pass
  def move_and_collide(self, motion:__core__.Vector3, test_only:bool=False, safe_margin:float=0.001, recovery_as_collision:bool=False, max_collisions:int=1)->__kinematiccollision3d__.KinematicCollision3D: pass

  def test_move(self, from_:__core__.Transform3D, motion:__core__.Vector3, collision:__kinematiccollision3d__.KinematicCollision3D= __kinematiccollision3d__.KinematicCollision3D.constructor(), safe_margin:float=0.001, recovery_as_collision:bool=False, max_collisions:int=1)->bool: pass

  def get_gravity(self)->__core__.Vector3: pass

  def set_axis_lock(self, axis:int , lock:bool)->None: pass

  def get_axis_lock(self, axis:int )->bool: pass

  def get_collision_exceptions(self)->__core__.Array: pass

  def add_collision_exception_with(self, body:__node__.Node)->None: pass

  def remove_collision_exception_with(self, body:__node__.Node)->None: pass


