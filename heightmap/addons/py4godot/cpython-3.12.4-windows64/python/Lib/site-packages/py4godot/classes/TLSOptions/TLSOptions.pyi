from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.RefCounted.RefCounted as __refcounted__
import py4godot.classes.TLSOptions.TLSOptions as __tlsoptions__
import py4godot.classes.CryptoKey.CryptoKey as __cryptokey__
import py4godot.classes.X509Certificate.X509Certificate as __x509certificate__


class TLSOptions(__refcounted__.RefCounted):

  @staticmethod
  def constructor()->TLSOptions:pass



  @staticmethod
  def cast(other:__object__.Object)->TLSOptions:pass


  @staticmethod
  def client(trusted_chain:__x509certificate__.X509Certificate= __x509certificate__.X509Certificate.constructor(), common_name_override:str= __core__.String.new0())->__tlsoptions__.TLSOptions: pass

  @staticmethod
  def client_unsafe(trusted_chain:__x509certificate__.X509Certificate= __x509certificate__.X509Certificate.constructor())->__tlsoptions__.TLSOptions: pass

  @staticmethod
  def server(key:__cryptokey__.CryptoKey, certificate:__x509certificate__.X509Certificate)->__tlsoptions__.TLSOptions: pass

  def is_server(self)->bool: pass

  def is_unsafe_client(self)->bool: pass

  def get_common_name_override(self)->str: pass

  def get_trusted_ca_chain(self)->__x509certificate__.X509Certificate: pass

  def get_private_key(self)->__cryptokey__.CryptoKey: pass

  def get_own_certificate(self)->__x509certificate__.X509Certificate: pass


