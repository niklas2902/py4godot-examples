from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.SkeletonModification2D.SkeletonModification2D as __skeletonmodification2d__


class SkeletonModification2DJiggle(__skeletonmodification2d__.SkeletonModification2D):

  @staticmethod
  def constructor()->SkeletonModification2DJiggle:pass



  @staticmethod
  def cast(other:__object__.Object)->SkeletonModification2DJiggle:pass


  @property
  def target_nodepath(self)->__core__.NodePath: pass
  @target_nodepath.setter
  def target_nodepath(self,  value:__core__.NodePath)->None: pass
  @property
  def jiggle_data_chain_length(self)->int: pass
  @jiggle_data_chain_length.setter
  def jiggle_data_chain_length(self,  value:int)->None: pass
  @property
  def stiffness(self)->float: pass
  @stiffness.setter
  def stiffness(self,  value:float)->None: pass
  @property
  def mass(self)->float: pass
  @mass.setter
  def mass(self,  value:float)->None: pass
  @property
  def damping(self)->float: pass
  @damping.setter
  def damping(self,  value:float)->None: pass
  @property
  def use_gravity(self)->bool: pass
  @use_gravity.setter
  def use_gravity(self,  value:bool)->None: pass
  @property
  def gravity(self)->__core__.Vector2: pass
  @gravity.setter
  def gravity(self,  value:__core__.Vector2)->None: pass
  def set_target_node(self, target_nodepath:__core__.NodePath)->None: pass

  def get_target_node(self)->__core__.NodePath: pass

  def set_jiggle_data_chain_length(self, length:int)->None: pass

  def get_jiggle_data_chain_length(self)->int: pass

  def set_stiffness(self, stiffness:float)->None: pass

  def get_stiffness(self)->float: pass

  def set_mass(self, mass:float)->None: pass

  def get_mass(self)->float: pass

  def set_damping(self, damping:float)->None: pass

  def get_damping(self)->float: pass

  def set_use_gravity(self, use_gravity:bool)->None: pass

  def get_use_gravity(self)->bool: pass

  def set_gravity(self, gravity:__core__.Vector2)->None: pass

  def get_gravity(self)->__core__.Vector2: pass

  def set_use_colliders(self, use_colliders:bool)->None: pass

  def get_use_colliders(self)->bool: pass

  def set_collision_mask(self, collision_mask:int)->None: pass

  def get_collision_mask(self)->int: pass

  def set_jiggle_joint_bone2d_node(self, joint_idx:int, bone2d_node:__core__.NodePath)->None: pass

  def get_jiggle_joint_bone2d_node(self, joint_idx:int)->__core__.NodePath: pass

  def set_jiggle_joint_bone_index(self, joint_idx:int, bone_idx:int)->None: pass

  def get_jiggle_joint_bone_index(self, joint_idx:int)->int: pass

  def set_jiggle_joint_override(self, joint_idx:int, override:bool)->None: pass

  def get_jiggle_joint_override(self, joint_idx:int)->bool: pass

  def set_jiggle_joint_stiffness(self, joint_idx:int, stiffness:float)->None: pass

  def get_jiggle_joint_stiffness(self, joint_idx:int)->float: pass

  def set_jiggle_joint_mass(self, joint_idx:int, mass:float)->None: pass

  def get_jiggle_joint_mass(self, joint_idx:int)->float: pass

  def set_jiggle_joint_damping(self, joint_idx:int, damping:float)->None: pass

  def get_jiggle_joint_damping(self, joint_idx:int)->float: pass

  def set_jiggle_joint_use_gravity(self, joint_idx:int, use_gravity:bool)->None: pass

  def get_jiggle_joint_use_gravity(self, joint_idx:int)->bool: pass

  def set_jiggle_joint_gravity(self, joint_idx:int, gravity:__core__.Vector2)->None: pass

  def get_jiggle_joint_gravity(self, joint_idx:int)->__core__.Vector2: pass


