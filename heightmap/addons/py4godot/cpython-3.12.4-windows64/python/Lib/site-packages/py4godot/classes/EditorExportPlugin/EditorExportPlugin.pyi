from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.RefCounted.RefCounted as __refcounted__
import py4godot.classes.Node.Node as __node__
import py4godot.classes.EditorExportPlatform.EditorExportPlatform as __editorexportplatform__
import py4godot.classes.Resource.Resource as __resource__


class EditorExportPlugin(__refcounted__.RefCounted):

  @staticmethod
  def constructor()->EditorExportPlugin:pass



  @staticmethod
  def cast(other:__object__.Object)->EditorExportPlugin:pass


  def _export_file(self, path:str, type:str, features:__core__.PackedStringArray)->None: pass

  def _export_begin(self, features:__core__.PackedStringArray, is_debug:bool, path:str, flags:int)->None: pass

  def _export_end(self)->None: pass

  def _begin_customize_resources(self, platform:__editorexportplatform__.EditorExportPlatform, features:__core__.PackedStringArray)->bool: pass

  def _customize_resource(self, resource:__resource__.Resource, path:str)->__resource__.Resource: pass

  def _begin_customize_scenes(self, platform:__editorexportplatform__.EditorExportPlatform, features:__core__.PackedStringArray)->bool: pass

  def _customize_scene(self, scene:__node__.Node, path:str)->__node__.Node: pass

  def _get_customization_configuration_hash(self)->int: pass

  def _end_customize_scenes(self)->None: pass

  def _end_customize_resources(self)->None: pass

  def _get_export_options(self, platform:__editorexportplatform__.EditorExportPlatform)->__core__.Array: pass

  def _get_export_options_overrides(self, platform:__editorexportplatform__.EditorExportPlatform)->__core__.Dictionary: pass

  def _should_update_export_options(self, platform:__editorexportplatform__.EditorExportPlatform)->bool: pass

  def _get_export_option_warning(self, platform:__editorexportplatform__.EditorExportPlatform, option:str)->str: pass

  def _get_export_features(self, platform:__editorexportplatform__.EditorExportPlatform, debug:bool)->__core__.PackedStringArray: pass

  def _get_name(self)->str: pass

  def _supports_platform(self, platform:__editorexportplatform__.EditorExportPlatform)->bool: pass

  def _get_android_dependencies(self, platform:__editorexportplatform__.EditorExportPlatform, debug:bool)->__core__.PackedStringArray: pass

  def _get_android_dependencies_maven_repos(self, platform:__editorexportplatform__.EditorExportPlatform, debug:bool)->__core__.PackedStringArray: pass

  def _get_android_libraries(self, platform:__editorexportplatform__.EditorExportPlatform, debug:bool)->__core__.PackedStringArray: pass

  def _get_android_manifest_activity_element_contents(self, platform:__editorexportplatform__.EditorExportPlatform, debug:bool)->str: pass

  def _get_android_manifest_application_element_contents(self, platform:__editorexportplatform__.EditorExportPlatform, debug:bool)->str: pass

  def _get_android_manifest_element_contents(self, platform:__editorexportplatform__.EditorExportPlatform, debug:bool)->str: pass

  def add_shared_object(self, path:str, tags:__core__.PackedStringArray, target:str)->None: pass

  def add_ios_project_static_lib(self, path:str)->None: pass

  def add_file(self, path:str, file:__core__.PackedByteArray, remap:bool)->None: pass

  def add_ios_framework(self, path:str)->None: pass

  def add_ios_embedded_framework(self, path:str)->None: pass

  def add_ios_plist_content(self, plist_content:str)->None: pass

  def add_ios_linker_flags(self, flags:str)->None: pass

  def add_ios_bundle_file(self, path:str)->None: pass

  def add_ios_cpp_code(self, code:str)->None: pass

  def add_macos_plugin_file(self, path:str)->None: pass

  def skip(self)->None: pass

  def get_option(self, name:__core__.StringName)->object: pass


