from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Object.Object as __object__
import py4godot.classes.PhysicsDirectSpaceState3D.PhysicsDirectSpaceState3D as __physicsdirectspacestate3d__


class PhysicsDirectBodyState3D(__object__.Object):

  @staticmethod
  def constructor()->PhysicsDirectBodyState3D:pass



  @staticmethod
  def cast(other:__object__.Object)->PhysicsDirectBodyState3D:pass


  @property
  def step(self)->float: pass
  @property
  def inverse_mass(self)->float: pass
  @property
  def total_angular_damp(self)->float: pass
  @property
  def total_linear_damp(self)->float: pass
  @property
  def inverse_inertia(self)->__core__.Vector3: pass
  @property
  def inverse_inertia_tensor(self)->__core__.Basis: pass
  @property
  def total_gravity(self)->__core__.Vector3: pass
  @property
  def center_of_mass(self)->__core__.Vector3: pass
  @property
  def center_of_mass_local(self)->__core__.Vector3: pass
  @property
  def principal_inertia_axes(self)->__core__.Basis: pass
  @property
  def angular_velocity(self)->__core__.Vector3: pass
  @angular_velocity.setter
  def angular_velocity(self,  value:__core__.Vector3)->None: pass
  @property
  def linear_velocity(self)->__core__.Vector3: pass
  @linear_velocity.setter
  def linear_velocity(self,  value:__core__.Vector3)->None: pass
  @property
  def sleeping(self)->bool: pass
  @sleeping.setter
  def sleeping(self,  value:bool)->None: pass
  @property
  def transform(self)->__core__.Transform3D: pass
  @transform.setter
  def transform(self,  value:__core__.Transform3D)->None: pass
  def get_total_gravity(self)->__core__.Vector3: pass

  def get_total_linear_damp(self)->float: pass

  def get_total_angular_damp(self)->float: pass

  def get_center_of_mass(self)->__core__.Vector3: pass

  def get_center_of_mass_local(self)->__core__.Vector3: pass

  def get_principal_inertia_axes(self)->__core__.Basis: pass

  def get_inverse_mass(self)->float: pass

  def get_inverse_inertia(self)->__core__.Vector3: pass

  def get_inverse_inertia_tensor(self)->__core__.Basis: pass

  def set_linear_velocity(self, velocity:__core__.Vector3)->None: pass

  def get_linear_velocity(self)->__core__.Vector3: pass

  def set_angular_velocity(self, velocity:__core__.Vector3)->None: pass

  def get_angular_velocity(self)->__core__.Vector3: pass

  def set_transform(self, transform:__core__.Transform3D)->None: pass

  def get_transform(self)->__core__.Transform3D: pass

  def get_velocity_at_local_position(self, local_position:__core__.Vector3)->__core__.Vector3: pass

  def apply_central_impulse(self, impulse:__core__.Vector3= __core__.Vector3.new0())->None: pass

  def apply_impulse(self, impulse:__core__.Vector3, position:__core__.Vector3= __core__.Vector3.new0())->None: pass

  def apply_torque_impulse(self, impulse:__core__.Vector3)->None: pass

  def apply_central_force(self, force:__core__.Vector3= __core__.Vector3.new0())->None: pass

  def apply_force(self, force:__core__.Vector3, position:__core__.Vector3= __core__.Vector3.new0())->None: pass

  def apply_torque(self, torque:__core__.Vector3)->None: pass

  def add_constant_central_force(self, force:__core__.Vector3= __core__.Vector3.new0())->None: pass

  def add_constant_force(self, force:__core__.Vector3, position:__core__.Vector3= __core__.Vector3.new0())->None: pass

  def add_constant_torque(self, torque:__core__.Vector3)->None: pass

  def set_constant_force(self, force:__core__.Vector3)->None: pass

  def get_constant_force(self)->__core__.Vector3: pass

  def set_constant_torque(self, torque:__core__.Vector3)->None: pass

  def get_constant_torque(self)->__core__.Vector3: pass

  def set_sleep_state(self, enabled:bool)->None: pass

  def is_sleeping(self)->bool: pass

  def get_contact_count(self)->int: pass

  def get_contact_local_position(self, contact_idx:int)->__core__.Vector3: pass

  def get_contact_local_normal(self, contact_idx:int)->__core__.Vector3: pass

  def get_contact_impulse(self, contact_idx:int)->__core__.Vector3: pass

  def get_contact_local_shape(self, contact_idx:int)->int: pass

  def get_contact_local_velocity_at_position(self, contact_idx:int)->__core__.Vector3: pass

  def get_contact_collider(self, contact_idx:int)->__core__.RID: pass

  def get_contact_collider_position(self, contact_idx:int)->__core__.Vector3: pass

  def get_contact_collider_id(self, contact_idx:int)->int: pass

  def get_contact_collider_object(self, contact_idx:int)->__object__.Object: pass

  def get_contact_collider_shape(self, contact_idx:int)->int: pass

  def get_contact_collider_velocity_at_position(self, contact_idx:int)->__core__.Vector3: pass

  def get_step(self)->float: pass

  def integrate_forces(self)->None: pass

  def get_space_state(self)->__physicsdirectspacestate3d__.PhysicsDirectSpaceState3D: pass


