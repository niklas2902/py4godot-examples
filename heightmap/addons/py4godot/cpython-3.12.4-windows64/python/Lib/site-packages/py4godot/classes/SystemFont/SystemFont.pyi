from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Font.Font as __font__
import py4godot.classes.TextServer.TextServer as __textserver__


class SystemFont(__font__.Font):

  @staticmethod
  def constructor()->SystemFont:pass



  @staticmethod
  def cast(other:__object__.Object)->SystemFont:pass


  @property
  def font_names(self)->__core__.PackedStringArray: pass
  @font_names.setter
  def font_names(self,  value:__core__.PackedStringArray)->None: pass
  @property
  def font_italic(self)->bool: pass
  @font_italic.setter
  def font_italic(self,  value:bool)->None: pass
  @property
  def font_weight(self)->int: pass
  @font_weight.setter
  def font_weight(self,  value:int)->None: pass
  @property
  def font_stretch(self)->int: pass
  @font_stretch.setter
  def font_stretch(self,  value:int)->None: pass
  @property
  def antialiasing(self)->int: pass
  @antialiasing.setter
  def antialiasing(self,  value:int)->None: pass
  @property
  def generate_mipmaps(self)->bool: pass
  @generate_mipmaps.setter
  def generate_mipmaps(self,  value:bool)->None: pass
  @property
  def disable_embedded_bitmaps(self)->bool: pass
  @disable_embedded_bitmaps.setter
  def disable_embedded_bitmaps(self,  value:bool)->None: pass
  @property
  def allow_system_fallback(self)->bool: pass
  @allow_system_fallback.setter
  def allow_system_fallback(self,  value:bool)->None: pass
  @property
  def force_autohinter(self)->bool: pass
  @force_autohinter.setter
  def force_autohinter(self,  value:bool)->None: pass
  @property
  def hinting(self)->int: pass
  @hinting.setter
  def hinting(self,  value:int)->None: pass
  @property
  def subpixel_positioning(self)->int: pass
  @subpixel_positioning.setter
  def subpixel_positioning(self,  value:int)->None: pass
  @property
  def multichannel_signed_distance_field(self)->bool: pass
  @multichannel_signed_distance_field.setter
  def multichannel_signed_distance_field(self,  value:bool)->None: pass
  @property
  def msdf_pixel_range(self)->int: pass
  @msdf_pixel_range.setter
  def msdf_pixel_range(self,  value:int)->None: pass
  @property
  def msdf_size(self)->int: pass
  @msdf_size.setter
  def msdf_size(self,  value:int)->None: pass
  @property
  def oversampling(self)->float: pass
  @oversampling.setter
  def oversampling(self,  value:float)->None: pass
  def set_antialiasing(self, antialiasing:int )->None: pass

  def get_antialiasing(self)->int: pass

  def set_disable_embedded_bitmaps(self, disable_embedded_bitmaps:bool)->None: pass

  def get_disable_embedded_bitmaps(self)->bool: pass

  def set_generate_mipmaps(self, generate_mipmaps:bool)->None: pass

  def get_generate_mipmaps(self)->bool: pass

  def set_allow_system_fallback(self, allow_system_fallback:bool)->None: pass

  def is_allow_system_fallback(self)->bool: pass

  def set_force_autohinter(self, force_autohinter:bool)->None: pass

  def is_force_autohinter(self)->bool: pass

  def set_hinting(self, hinting:int )->None: pass

  def get_hinting(self)->int: pass

  def set_subpixel_positioning(self, subpixel_positioning:int )->None: pass

  def get_subpixel_positioning(self)->int: pass

  def set_multichannel_signed_distance_field(self, msdf:bool)->None: pass

  def is_multichannel_signed_distance_field(self)->bool: pass

  def set_msdf_pixel_range(self, msdf_pixel_range:int)->None: pass

  def get_msdf_pixel_range(self)->int: pass

  def set_msdf_size(self, msdf_size:int)->None: pass

  def get_msdf_size(self)->int: pass

  def set_oversampling(self, oversampling:float)->None: pass

  def get_oversampling(self)->float: pass

  def get_font_names(self)->__core__.PackedStringArray: pass

  def set_font_names(self, names:__core__.PackedStringArray)->None: pass

  def get_font_italic(self)->bool: pass

  def set_font_italic(self, italic:bool)->None: pass

  def set_font_weight(self, weight:int)->None: pass

  def set_font_stretch(self, stretch:int)->None: pass


