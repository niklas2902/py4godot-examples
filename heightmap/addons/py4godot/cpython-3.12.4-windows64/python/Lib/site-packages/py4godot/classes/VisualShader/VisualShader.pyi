from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Shader.Shader as __shader__
import py4godot.classes.VisualShader.VisualShader as __visualshader__
import py4godot.classes.VisualShaderNode.VisualShaderNode as __visualshadernode__


class VisualShader(__shader__.Shader):

  @staticmethod
  def constructor()->VisualShader:pass



  @staticmethod
  def cast(other:__object__.Object)->VisualShader:pass


  @property
  def graph_offset(self)->__core__.Vector2: pass
  @graph_offset.setter
  def graph_offset(self,  value:__core__.Vector2)->None: pass
  def set_mode(self, mode:int )->None: pass

  def add_node(self, type:int , node:__visualshadernode__.VisualShaderNode, position:__core__.Vector2, id:int)->None: pass

  def get_node(self, type:int , id:int)->__visualshadernode__.VisualShaderNode: pass

  def set_node_position(self, type:int , id:int, position:__core__.Vector2)->None: pass

  def get_node_position(self, type:int , id:int)->__core__.Vector2: pass

  def get_node_list(self, type:int )->__core__.PackedInt32Array: pass

  def get_valid_node_id(self, type:int )->int: pass

  def remove_node(self, type:int , id:int)->None: pass

  def replace_node(self, type:int , id:int, new_class:__core__.StringName)->None: pass

  def is_node_connection(self, type:int , from_node:int, from_port:int, to_node:int, to_port:int)->bool: pass

  def can_connect_nodes(self, type:int , from_node:int, from_port:int, to_node:int, to_port:int)->bool: pass

  def connect_nodes(self, type:int , from_node:int, from_port:int, to_node:int, to_port:int)->int: pass

  def disconnect_nodes(self, type:int , from_node:int, from_port:int, to_node:int, to_port:int)->None: pass

  def connect_nodes_forced(self, type:int , from_node:int, from_port:int, to_node:int, to_port:int)->None: pass

  def get_node_connections(self, type:int )->__core__.Array: pass

  def set_graph_offset(self, offset:__core__.Vector2)->None: pass

  def get_graph_offset(self)->__core__.Vector2: pass

  def attach_node_to_frame(self, type:int , id:int, frame:int)->None: pass

  def detach_node_from_frame(self, type:int , id:int)->None: pass

  def add_varying(self, name:str, mode:int , type:int )->None: pass

  def remove_varying(self, name:str)->None: pass

  def has_varying(self, name:str)->bool: pass


