from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.ImporterMesh.ImporterMesh as __importermesh__
import py4godot.classes.Resource.Resource as __resource__
import py4godot.classes.Object.Object as __object__


class GLTFMesh(__resource__.Resource):

  @staticmethod
  def constructor()->GLTFMesh:pass



  @staticmethod
  def cast(other:__object__.Object)->GLTFMesh:pass


  @property
  def original_name(self)->str: pass
  @original_name.setter
  def original_name(self,  value:str)->None: pass
  @property
  def mesh(self)->__object__.Object: pass
  @mesh.setter
  def mesh(self,  value:__object__.Object)->None: pass
  @property
  def blend_weights(self)->__core__.PackedFloat32Array: pass
  @blend_weights.setter
  def blend_weights(self,  value:__core__.PackedFloat32Array)->None: pass
  @property
  def instance_materials(self)->__core__.Array: pass
  @instance_materials.setter
  def instance_materials(self,  value:__core__.Array)->None: pass
  def get_original_name(self)->str: pass

  def set_original_name(self, original_name:str)->None: pass

  def get_mesh(self)->__importermesh__.ImporterMesh: pass

  def set_mesh(self, mesh:__importermesh__.ImporterMesh)->None: pass

  def get_blend_weights(self)->__core__.PackedFloat32Array: pass

  def set_blend_weights(self, blend_weights:__core__.PackedFloat32Array)->None: pass

  def get_instance_materials(self)->__core__.Array: pass

  def set_instance_materials(self, instance_materials:__core__.Array)->None: pass

  def get_additional_data(self, extension_name:__core__.StringName)->object: pass

  def set_additional_data(self, extension_name:__core__.StringName, additional_data:object)->None: pass


