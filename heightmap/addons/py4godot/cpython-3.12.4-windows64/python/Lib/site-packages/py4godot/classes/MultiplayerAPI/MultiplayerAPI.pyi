from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Object.Object as __object__
import py4godot.classes.RefCounted.RefCounted as __refcounted__
import py4godot.classes.MultiplayerAPI.MultiplayerAPI as __multiplayerapi__
import py4godot.classes.MultiplayerPeer.MultiplayerPeer as __multiplayerpeer__


class MultiplayerAPI(__refcounted__.RefCounted):
  peer_connected: BuiltinSignal
  peer_disconnected: BuiltinSignal
  connected_to_server: BuiltinSignal
  connection_failed: BuiltinSignal
  server_disconnected: BuiltinSignal

  @staticmethod
  def constructor()->MultiplayerAPI:pass



  @staticmethod
  def cast(other:__object__.Object)->MultiplayerAPI:pass


  @property
  def multiplayer_peer(self)->__multiplayerpeer__.MultiplayerPeer: pass
  @multiplayer_peer.setter
  def multiplayer_peer(self,  value:__multiplayerpeer__.MultiplayerPeer)->None: pass
  def has_multiplayer_peer(self)->bool: pass

  def get_multiplayer_peer(self)->__multiplayerpeer__.MultiplayerPeer: pass

  def set_multiplayer_peer(self, peer:__multiplayerpeer__.MultiplayerPeer)->None: pass

  def get_unique_id(self)->int: pass

  def is_server(self)->bool: pass

  def get_remote_sender_id(self)->int: pass

  def poll(self)->int: pass

  def rpc(self, peer:int, object:__object__.Object, method:__core__.StringName, arguments:__core__.Array= __core__.Array.new0())->int: pass

  def object_configuration_add(self, object:__object__.Object, configuration:object)->int: pass

  def object_configuration_remove(self, object:__object__.Object, configuration:object)->int: pass

  def get_peers(self)->__core__.PackedInt32Array: pass

  @staticmethod
  def set_default_interface(interface_name:__core__.StringName)->None: pass

  @staticmethod
  def get_default_interface()->__core__.StringName: pass

  @staticmethod
  def create_default_interface()->__multiplayerapi__.MultiplayerAPI: pass


