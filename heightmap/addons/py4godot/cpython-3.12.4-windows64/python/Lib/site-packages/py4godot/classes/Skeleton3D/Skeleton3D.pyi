from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.SkinReference.SkinReference as __skinreference__
import py4godot.classes.Skeleton3D.Skeleton3D as __skeleton3d__
import py4godot.classes.Node3D.Node3D as __node3d__
import py4godot.classes.Skin.Skin as __skin__


class Skeleton3D(__node3d__.Node3D):
  pose_updated: BuiltinSignal
  skeleton_updated: BuiltinSignal
  bone_enabled_changed: BuiltinSignal
  bone_list_changed: BuiltinSignal
  show_rest_only_changed: BuiltinSignal

  @staticmethod
  def constructor()->Skeleton3D:pass



  @staticmethod
  def cast(other:__object__.Object)->Skeleton3D:pass


  @property
  def motion_scale(self)->float: pass
  @motion_scale.setter
  def motion_scale(self,  value:float)->None: pass
  @property
  def show_rest_only(self)->bool: pass
  @show_rest_only.setter
  def show_rest_only(self,  value:bool)->None: pass
  @property
  def modifier_callback_mode_process(self)->int: pass
  @modifier_callback_mode_process.setter
  def modifier_callback_mode_process(self,  value:int)->None: pass
  @property
  def animate_physical_bones(self)->bool: pass
  @animate_physical_bones.setter
  def animate_physical_bones(self,  value:bool)->None: pass
  def add_bone(self, name:str)->int: pass

  def find_bone(self, name:str)->int: pass

  def get_bone_name(self, bone_idx:int)->str: pass

  def set_bone_name(self, bone_idx:int, name:str)->None: pass

  def get_concatenated_bone_names(self)->__core__.StringName: pass

  def get_bone_parent(self, bone_idx:int)->int: pass

  def set_bone_parent(self, bone_idx:int, parent_idx:int)->None: pass

  def get_bone_count(self)->int: pass

  def get_version(self)->int: pass

  def unparent_bone_and_rest(self, bone_idx:int)->None: pass

  def get_bone_children(self, bone_idx:int)->__core__.PackedInt32Array: pass

  def get_parentless_bones(self)->__core__.PackedInt32Array: pass

  def get_bone_rest(self, bone_idx:int)->__core__.Transform3D: pass

  def set_bone_rest(self, bone_idx:int, rest:__core__.Transform3D)->None: pass

  def get_bone_global_rest(self, bone_idx:int)->__core__.Transform3D: pass

  def create_skin_from_rest_transforms(self)->__skin__.Skin: pass

  def register_skin(self, skin:__skin__.Skin)->__skinreference__.SkinReference: pass

  def localize_rests(self)->None: pass

  def clear_bones(self)->None: pass

  def get_bone_pose(self, bone_idx:int)->__core__.Transform3D: pass

  def set_bone_pose(self, bone_idx:int, pose:__core__.Transform3D)->None: pass

  def set_bone_pose_position(self, bone_idx:int, position:__core__.Vector3)->None: pass

  def set_bone_pose_rotation(self, bone_idx:int, rotation:__core__.Quaternion)->None: pass

  def set_bone_pose_scale(self, bone_idx:int, scale:__core__.Vector3)->None: pass

  def get_bone_pose_position(self, bone_idx:int)->__core__.Vector3: pass

  def get_bone_pose_rotation(self, bone_idx:int)->__core__.Quaternion: pass

  def get_bone_pose_scale(self, bone_idx:int)->__core__.Vector3: pass

  def reset_bone_pose(self, bone_idx:int)->None: pass

  def reset_bone_poses(self)->None: pass

  def is_bone_enabled(self, bone_idx:int)->bool: pass

  def set_bone_enabled(self, bone_idx:int, enabled:bool=True)->None: pass

  def get_bone_global_pose(self, bone_idx:int)->__core__.Transform3D: pass

  def set_bone_global_pose(self, bone_idx:int, pose:__core__.Transform3D)->None: pass

  def force_update_all_bone_transforms(self)->None: pass

  def force_update_bone_child_transform(self, bone_idx:int)->None: pass

  def set_motion_scale(self, motion_scale:float)->None: pass

  def get_motion_scale(self)->float: pass

  def set_show_rest_only(self, enabled:bool)->None: pass

  def is_show_rest_only(self)->bool: pass

  def set_modifier_callback_mode_process(self, mode:int )->None: pass

  def get_modifier_callback_mode_process(self)->int: pass

  def clear_bones_global_pose_override(self)->None: pass

  def set_bone_global_pose_override(self, bone_idx:int, pose:__core__.Transform3D, amount:float, persistent:bool=False)->None: pass

  def get_bone_global_pose_override(self, bone_idx:int)->__core__.Transform3D: pass

  def get_bone_global_pose_no_override(self, bone_idx:int)->__core__.Transform3D: pass

  def set_animate_physical_bones(self, enabled:bool)->None: pass

  def get_animate_physical_bones(self)->bool: pass

  def physical_bones_stop_simulation(self)->None: pass

  def physical_bones_start_simulation(self, bones:__core__.Array=[])->None: pass

  def physical_bones_add_collision_exception(self, exception:__core__.RID)->None: pass

  def physical_bones_remove_collision_exception(self, exception:__core__.RID)->None: pass


