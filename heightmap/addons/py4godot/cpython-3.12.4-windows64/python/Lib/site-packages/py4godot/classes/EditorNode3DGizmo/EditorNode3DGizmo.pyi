from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Node3DGizmo.Node3DGizmo as __node3dgizmo__
import py4godot.classes.SkinReference.SkinReference as __skinreference__
import py4godot.classes.Node.Node as __node__
import py4godot.classes.EditorNode3DGizmoPlugin.EditorNode3DGizmoPlugin as __editornode3dgizmoplugin__
import py4godot.classes.Node3D.Node3D as __node3d__
import py4godot.classes.Material.Material as __material__
import py4godot.classes.Camera3D.Camera3D as __camera3d__
import py4godot.classes.Mesh.Mesh as __mesh__
import py4godot.classes.TriangleMesh.TriangleMesh as __trianglemesh__


class EditorNode3DGizmo(__node3dgizmo__.Node3DGizmo):

  @staticmethod
  def constructor()->EditorNode3DGizmo:pass



  @staticmethod
  def cast(other:__object__.Object)->EditorNode3DGizmo:pass


  def _redraw(self)->None: pass

  def _get_handle_name(self, id:int, secondary:bool)->str: pass

  def _is_handle_highlighted(self, id:int, secondary:bool)->bool: pass

  def _get_handle_value(self, id:int, secondary:bool)->object: pass

  def _begin_handle_action(self, id:int, secondary:bool)->None: pass

  def _set_handle(self, id:int, secondary:bool, camera:__camera3d__.Camera3D, point:__core__.Vector2)->None: pass

  def _commit_handle(self, id:int, secondary:bool, restore:object, cancel:bool)->None: pass

  def _subgizmos_intersect_ray(self, camera:__camera3d__.Camera3D, point:__core__.Vector2)->int: pass

  def _subgizmos_intersect_frustum(self, camera:__camera3d__.Camera3D, frustum:__core__.Array)->__core__.PackedInt32Array: pass

  def _set_subgizmo_transform(self, id:int, transform:__core__.Transform3D)->None: pass

  def _get_subgizmo_transform(self, id:int)->__core__.Transform3D: pass

  def _commit_subgizmos(self, ids:__core__.PackedInt32Array, restores:__core__.Array, cancel:bool)->None: pass

  def add_lines(self, lines:__core__.PackedVector3Array, material:__material__.Material, billboard:bool=False, modulate:__core__.Color= __core__.Color.new0())->None: pass

  def add_mesh(self, mesh:__mesh__.Mesh, material:__material__.Material= __material__.Material.constructor(), transform:__core__.Transform3D= __core__.Transform3D.new0(), skeleton:__skinreference__.SkinReference= __skinreference__.SkinReference.constructor())->None: pass

  def add_collision_segments(self, segments:__core__.PackedVector3Array)->None: pass

  def add_collision_triangles(self, triangles:__trianglemesh__.TriangleMesh)->None: pass

  def add_unscaled_billboard(self, material:__material__.Material, default_scale:float=1, modulate:__core__.Color= __core__.Color.new0())->None: pass

  def add_handles(self, handles:__core__.PackedVector3Array, material:__material__.Material, ids:__core__.PackedInt32Array, billboard:bool=False, secondary:bool=False)->None: pass

  def set_node_3d(self, node:__node__.Node)->None: pass

  def get_node_3d(self)->__node3d__.Node3D: pass

  def get_plugin(self)->__editornode3dgizmoplugin__.EditorNode3DGizmoPlugin: pass

  def clear(self)->None: pass

  def set_hidden(self, hidden:bool)->None: pass

  def is_subgizmo_selected(self, id:int)->bool: pass

  def get_subgizmo_selection(self)->__core__.PackedInt32Array: pass


