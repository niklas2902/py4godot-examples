from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.OpenXRAPIExtension.OpenXRAPIExtension as __openxrapiextension__
import py4godot.classes.Object.Object as __object__


class OpenXRExtensionWrapperExtension(__object__.Object):

  @staticmethod
  def constructor()->OpenXRExtensionWrapperExtension:pass



  @staticmethod
  def cast(other:__object__.Object)->OpenXRExtensionWrapperExtension:pass


  def _get_requested_extensions(self)->__core__.Dictionary: pass

  def _get_composition_layer_count(self)->int: pass

  def _get_composition_layer(self, index:int)->int: pass

  def _get_composition_layer_order(self, index:int)->int: pass

  def _get_suggested_tracker_names(self)->__core__.PackedStringArray: pass

  def _on_register_metadata(self)->None: pass

  def _on_before_instance_created(self)->None: pass

  def _on_instance_created(self, instance:int)->None: pass

  def _on_instance_destroyed(self)->None: pass

  def _on_session_created(self, session:int)->None: pass

  def _on_process(self)->None: pass

  def _on_pre_render(self)->None: pass

  def _on_main_swapchains_created(self)->None: pass

  def _on_session_destroyed(self)->None: pass

  def _on_state_idle(self)->None: pass

  def _on_state_ready(self)->None: pass

  def _on_state_synchronized(self)->None: pass

  def _on_state_visible(self)->None: pass

  def _on_state_focused(self)->None: pass

  def _on_state_stopping(self)->None: pass

  def _on_state_loss_pending(self)->None: pass

  def _on_state_exiting(self)->None: pass

  def _get_viewport_composition_layer_extension_properties(self)->__core__.Array: pass

  def _get_viewport_composition_layer_extension_property_defaults(self)->__core__.Dictionary: pass

  def get_openxr_api(self)->__openxrapiextension__.OpenXRAPIExtension: pass

  def register_extension_wrapper(self)->None: pass


