from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Object.Object as __object__
import py4godot.classes.ResourceLoader.ResourceLoader as __resourceloader__
import py4godot.classes.ResourceFormatLoader.ResourceFormatLoader as __resourceformatloader__
import py4godot.classes.Resource.Resource as __resource__


class ResourceLoader(__object__.Object):



  @staticmethod
  def cast(other:__object__.Object)->ResourceLoader:pass

  @staticmethod
  def get_instance()->ResourceLoader:pass

  def load_threaded_request(self, path:str, type_hint:str= __core__.String.new0(), use_sub_threads:bool=False, cache_mode:int =1)->int: pass

  def load_threaded_get_status(self, path:str, progress:__core__.Array= __core__.Array.new0())->int: pass

  def load_threaded_get(self, path:str)->__resource__.Resource: pass

  def load(self, path:str, type_hint:str= __core__.String.new0(), cache_mode:int =1)->__resource__.Resource: pass

  def get_recognized_extensions_for_type(self, type:str)->__core__.PackedStringArray: pass

  def add_resource_format_loader(self, format_loader:__resourceformatloader__.ResourceFormatLoader, at_front:bool=False)->None: pass

  def remove_resource_format_loader(self, format_loader:__resourceformatloader__.ResourceFormatLoader)->None: pass

  def set_abort_on_missing_resources(self, abort:bool)->None: pass

  def get_dependencies(self, path:str)->__core__.PackedStringArray: pass

  def has_cached(self, path:str)->bool: pass

  def exists(self, path:str, type_hint:str= __core__.String.new0())->bool: pass

  def get_resource_uid(self, path:str)->int: pass


