from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.TextServer.TextServer as __textserver__
import py4godot.classes.Image.Image as __image__


class TextServerExtension(__textserver__.TextServer):

  @staticmethod
  def constructor()->TextServerExtension:pass



  @staticmethod
  def cast(other:__object__.Object)->TextServerExtension:pass


  def _has_feature(self, feature:int )->bool: pass

  def _get_name(self)->str: pass

  def _get_features(self)->int: pass

  def _free_rid(self, rid:__core__.RID)->None: pass

  def _has(self, rid:__core__.RID)->bool: pass

  def _load_support_data(self, filename:str)->bool: pass

  def _get_support_data_filename(self)->str: pass

  def _get_support_data_info(self)->str: pass

  def _save_support_data(self, filename:str)->bool: pass

  def _is_locale_right_to_left(self, locale:str)->bool: pass

  def _name_to_tag(self, name:str)->int: pass

  def _tag_to_name(self, tag:int)->str: pass

  def _create_font(self)->__core__.RID: pass

  def _create_font_linked_variation(self, font_rid:__core__.RID)->__core__.RID: pass

  def _font_set_data(self, font_rid:__core__.RID, data:__core__.PackedByteArray)->None: pass

  def _font_set_face_index(self, font_rid:__core__.RID, face_index:int)->None: pass

  def _font_get_face_index(self, font_rid:__core__.RID)->int: pass

  def _font_get_face_count(self, font_rid:__core__.RID)->int: pass

  def _font_set_style(self, font_rid:__core__.RID, style:int)->None: pass

  def _font_get_style(self, font_rid:__core__.RID)->int: pass

  def _font_set_name(self, font_rid:__core__.RID, name:str)->None: pass

  def _font_get_name(self, font_rid:__core__.RID)->str: pass

  def _font_get_ot_name_strings(self, font_rid:__core__.RID)->__core__.Dictionary: pass

  def _font_set_style_name(self, font_rid:__core__.RID, name_style:str)->None: pass

  def _font_get_style_name(self, font_rid:__core__.RID)->str: pass

  def _font_set_weight(self, font_rid:__core__.RID, weight:int)->None: pass

  def _font_get_weight(self, font_rid:__core__.RID)->int: pass

  def _font_set_stretch(self, font_rid:__core__.RID, stretch:int)->None: pass

  def _font_get_stretch(self, font_rid:__core__.RID)->int: pass

  def _font_set_antialiasing(self, font_rid:__core__.RID, antialiasing:int )->None: pass

  def _font_get_antialiasing(self, font_rid:__core__.RID)->int: pass

  def _font_set_disable_embedded_bitmaps(self, font_rid:__core__.RID, disable_embedded_bitmaps:bool)->None: pass

  def _font_get_disable_embedded_bitmaps(self, font_rid:__core__.RID)->bool: pass

  def _font_set_generate_mipmaps(self, font_rid:__core__.RID, generate_mipmaps:bool)->None: pass

  def _font_get_generate_mipmaps(self, font_rid:__core__.RID)->bool: pass

  def _font_set_multichannel_signed_distance_field(self, font_rid:__core__.RID, msdf:bool)->None: pass

  def _font_is_multichannel_signed_distance_field(self, font_rid:__core__.RID)->bool: pass

  def _font_set_msdf_pixel_range(self, font_rid:__core__.RID, msdf_pixel_range:int)->None: pass

  def _font_get_msdf_pixel_range(self, font_rid:__core__.RID)->int: pass

  def _font_set_msdf_size(self, font_rid:__core__.RID, msdf_size:int)->None: pass

  def _font_get_msdf_size(self, font_rid:__core__.RID)->int: pass

  def _font_set_fixed_size(self, font_rid:__core__.RID, fixed_size:int)->None: pass

  def _font_get_fixed_size(self, font_rid:__core__.RID)->int: pass

  def _font_set_fixed_size_scale_mode(self, font_rid:__core__.RID, fixed_size_scale_mode:int )->None: pass

  def _font_get_fixed_size_scale_mode(self, font_rid:__core__.RID)->int: pass

  def _font_set_allow_system_fallback(self, font_rid:__core__.RID, allow_system_fallback:bool)->None: pass

  def _font_is_allow_system_fallback(self, font_rid:__core__.RID)->bool: pass

  def _font_set_force_autohinter(self, font_rid:__core__.RID, force_autohinter:bool)->None: pass

  def _font_is_force_autohinter(self, font_rid:__core__.RID)->bool: pass

  def _font_set_hinting(self, font_rid:__core__.RID, hinting:int )->None: pass

  def _font_get_hinting(self, font_rid:__core__.RID)->int: pass

  def _font_set_subpixel_positioning(self, font_rid:__core__.RID, subpixel_positioning:int )->None: pass

  def _font_get_subpixel_positioning(self, font_rid:__core__.RID)->int: pass

  def _font_set_embolden(self, font_rid:__core__.RID, strength:float)->None: pass

  def _font_get_embolden(self, font_rid:__core__.RID)->float: pass

  def _font_set_spacing(self, font_rid:__core__.RID, spacing:int , value:int)->None: pass

  def _font_get_spacing(self, font_rid:__core__.RID, spacing:int )->int: pass

  def _font_set_baseline_offset(self, font_rid:__core__.RID, baseline_offset:float)->None: pass

  def _font_get_baseline_offset(self, font_rid:__core__.RID)->float: pass

  def _font_set_transform(self, font_rid:__core__.RID, transform:__core__.Transform2D)->None: pass

  def _font_get_transform(self, font_rid:__core__.RID)->__core__.Transform2D: pass

  def _font_set_variation_coordinates(self, font_rid:__core__.RID, variation_coordinates:__core__.Dictionary)->None: pass

  def _font_get_variation_coordinates(self, font_rid:__core__.RID)->__core__.Dictionary: pass

  def _font_set_oversampling(self, font_rid:__core__.RID, oversampling:float)->None: pass

  def _font_get_oversampling(self, font_rid:__core__.RID)->float: pass

  def _font_get_size_cache_list(self, font_rid:__core__.RID)->__core__.Array: pass

  def _font_clear_size_cache(self, font_rid:__core__.RID)->None: pass

  def _font_remove_size_cache(self, font_rid:__core__.RID, size:__core__.Vector2i)->None: pass

  def _font_set_ascent(self, font_rid:__core__.RID, size:int, ascent:float)->None: pass

  def _font_get_ascent(self, font_rid:__core__.RID, size:int)->float: pass

  def _font_set_descent(self, font_rid:__core__.RID, size:int, descent:float)->None: pass

  def _font_get_descent(self, font_rid:__core__.RID, size:int)->float: pass

  def _font_set_underline_position(self, font_rid:__core__.RID, size:int, underline_position:float)->None: pass

  def _font_get_underline_position(self, font_rid:__core__.RID, size:int)->float: pass

  def _font_set_underline_thickness(self, font_rid:__core__.RID, size:int, underline_thickness:float)->None: pass

  def _font_get_underline_thickness(self, font_rid:__core__.RID, size:int)->float: pass

  def _font_set_scale(self, font_rid:__core__.RID, size:int, scale:float)->None: pass

  def _font_get_scale(self, font_rid:__core__.RID, size:int)->float: pass

  def _font_get_texture_count(self, font_rid:__core__.RID, size:__core__.Vector2i)->int: pass

  def _font_clear_textures(self, font_rid:__core__.RID, size:__core__.Vector2i)->None: pass

  def _font_remove_texture(self, font_rid:__core__.RID, size:__core__.Vector2i, texture_index:int)->None: pass

  def _font_set_texture_image(self, font_rid:__core__.RID, size:__core__.Vector2i, texture_index:int, image:__image__.Image)->None: pass

  def _font_get_texture_image(self, font_rid:__core__.RID, size:__core__.Vector2i, texture_index:int)->__image__.Image: pass

  def _font_set_texture_offsets(self, font_rid:__core__.RID, size:__core__.Vector2i, texture_index:int, offset:__core__.PackedInt32Array)->None: pass

  def _font_get_texture_offsets(self, font_rid:__core__.RID, size:__core__.Vector2i, texture_index:int)->__core__.PackedInt32Array: pass

  def _font_get_glyph_list(self, font_rid:__core__.RID, size:__core__.Vector2i)->__core__.PackedInt32Array: pass

  def _font_clear_glyphs(self, font_rid:__core__.RID, size:__core__.Vector2i)->None: pass

  def _font_remove_glyph(self, font_rid:__core__.RID, size:__core__.Vector2i, glyph:int)->None: pass

  def _font_get_glyph_advance(self, font_rid:__core__.RID, size:int, glyph:int)->__core__.Vector2: pass

  def _font_set_glyph_advance(self, font_rid:__core__.RID, size:int, glyph:int, advance:__core__.Vector2)->None: pass

  def _font_get_glyph_offset(self, font_rid:__core__.RID, size:__core__.Vector2i, glyph:int)->__core__.Vector2: pass

  def _font_set_glyph_offset(self, font_rid:__core__.RID, size:__core__.Vector2i, glyph:int, offset:__core__.Vector2)->None: pass

  def _font_get_glyph_size(self, font_rid:__core__.RID, size:__core__.Vector2i, glyph:int)->__core__.Vector2: pass

  def _font_set_glyph_size(self, font_rid:__core__.RID, size:__core__.Vector2i, glyph:int, gl_size:__core__.Vector2)->None: pass

  def _font_get_glyph_uv_rect(self, font_rid:__core__.RID, size:__core__.Vector2i, glyph:int)->__core__.Rect2: pass

  def _font_set_glyph_uv_rect(self, font_rid:__core__.RID, size:__core__.Vector2i, glyph:int, uv_rect:__core__.Rect2)->None: pass

  def _font_get_glyph_texture_idx(self, font_rid:__core__.RID, size:__core__.Vector2i, glyph:int)->int: pass

  def _font_set_glyph_texture_idx(self, font_rid:__core__.RID, size:__core__.Vector2i, glyph:int, texture_idx:int)->None: pass

  def _font_get_glyph_texture_rid(self, font_rid:__core__.RID, size:__core__.Vector2i, glyph:int)->__core__.RID: pass

  def _font_get_glyph_texture_size(self, font_rid:__core__.RID, size:__core__.Vector2i, glyph:int)->__core__.Vector2: pass

  def _font_get_glyph_contours(self, font_rid:__core__.RID, size:int, index:int)->__core__.Dictionary: pass

  def _font_get_kerning_list(self, font_rid:__core__.RID, size:int)->__core__.Array: pass

  def _font_clear_kerning_map(self, font_rid:__core__.RID, size:int)->None: pass

  def _font_remove_kerning(self, font_rid:__core__.RID, size:int, glyph_pair:__core__.Vector2i)->None: pass

  def _font_set_kerning(self, font_rid:__core__.RID, size:int, glyph_pair:__core__.Vector2i, kerning:__core__.Vector2)->None: pass

  def _font_get_kerning(self, font_rid:__core__.RID, size:int, glyph_pair:__core__.Vector2i)->__core__.Vector2: pass

  def _font_get_glyph_index(self, font_rid:__core__.RID, size:int, char:int, variation_selector:int)->int: pass

  def _font_get_char_from_glyph_index(self, font_rid:__core__.RID, size:int, glyph_index:int)->int: pass

  def _font_has_char(self, font_rid:__core__.RID, char:int)->bool: pass

  def _font_get_supported_chars(self, font_rid:__core__.RID)->str: pass

  def _font_render_range(self, font_rid:__core__.RID, size:__core__.Vector2i, start:int, end:int)->None: pass

  def _font_render_glyph(self, font_rid:__core__.RID, size:__core__.Vector2i, index:int)->None: pass

  def _font_draw_glyph(self, font_rid:__core__.RID, canvas:__core__.RID, size:int, pos:__core__.Vector2, index:int, color:__core__.Color)->None: pass

  def _font_draw_glyph_outline(self, font_rid:__core__.RID, canvas:__core__.RID, size:int, outline_size:int, pos:__core__.Vector2, index:int, color:__core__.Color)->None: pass

  def _font_is_language_supported(self, font_rid:__core__.RID, language:str)->bool: pass

  def _font_set_language_support_override(self, font_rid:__core__.RID, language:str, supported:bool)->None: pass

  def _font_get_language_support_override(self, font_rid:__core__.RID, language:str)->bool: pass

  def _font_remove_language_support_override(self, font_rid:__core__.RID, language:str)->None: pass

  def _font_get_language_support_overrides(self, font_rid:__core__.RID)->__core__.PackedStringArray: pass

  def _font_is_script_supported(self, font_rid:__core__.RID, script:str)->bool: pass

  def _font_set_script_support_override(self, font_rid:__core__.RID, script:str, supported:bool)->None: pass

  def _font_get_script_support_override(self, font_rid:__core__.RID, script:str)->bool: pass

  def _font_remove_script_support_override(self, font_rid:__core__.RID, script:str)->None: pass

  def _font_get_script_support_overrides(self, font_rid:__core__.RID)->__core__.PackedStringArray: pass

  def _font_set_opentype_feature_overrides(self, font_rid:__core__.RID, overrides:__core__.Dictionary)->None: pass

  def _font_get_opentype_feature_overrides(self, font_rid:__core__.RID)->__core__.Dictionary: pass

  def _font_supported_feature_list(self, font_rid:__core__.RID)->__core__.Dictionary: pass

  def _font_supported_variation_list(self, font_rid:__core__.RID)->__core__.Dictionary: pass

  def _font_get_global_oversampling(self)->float: pass

  def _font_set_global_oversampling(self, oversampling:float)->None: pass

  def _get_hex_code_box_size(self, size:int, index:int)->__core__.Vector2: pass

  def _draw_hex_code_box(self, canvas:__core__.RID, size:int, pos:__core__.Vector2, index:int, color:__core__.Color)->None: pass

  def _create_shaped_text(self, direction:int , orientation:int )->__core__.RID: pass

  def _shaped_text_clear(self, shaped:__core__.RID)->None: pass

  def _shaped_text_set_direction(self, shaped:__core__.RID, direction:int )->None: pass

  def _shaped_text_get_direction(self, shaped:__core__.RID)->int: pass

  def _shaped_text_get_inferred_direction(self, shaped:__core__.RID)->int: pass

  def _shaped_text_set_bidi_override(self, shaped:__core__.RID, override:__core__.Array)->None: pass

  def _shaped_text_set_custom_punctuation(self, shaped:__core__.RID, punct:str)->None: pass

  def _shaped_text_get_custom_punctuation(self, shaped:__core__.RID)->str: pass

  def _shaped_text_set_custom_ellipsis(self, shaped:__core__.RID, char:int)->None: pass

  def _shaped_text_get_custom_ellipsis(self, shaped:__core__.RID)->int: pass

  def _shaped_text_set_orientation(self, shaped:__core__.RID, orientation:int )->None: pass

  def _shaped_text_get_orientation(self, shaped:__core__.RID)->int: pass

  def _shaped_text_set_preserve_invalid(self, shaped:__core__.RID, enabled:bool)->None: pass

  def _shaped_text_get_preserve_invalid(self, shaped:__core__.RID)->bool: pass

  def _shaped_text_set_preserve_control(self, shaped:__core__.RID, enabled:bool)->None: pass

  def _shaped_text_get_preserve_control(self, shaped:__core__.RID)->bool: pass

  def _shaped_text_set_spacing(self, shaped:__core__.RID, spacing:int , value:int)->None: pass

  def _shaped_text_get_spacing(self, shaped:__core__.RID, spacing:int )->int: pass

  def _shaped_text_add_string(self, shaped:__core__.RID, text:str, fonts:__core__.Array, size:int, opentype_features:__core__.Dictionary, language:str, meta:object)->bool: pass

  def _shaped_text_add_object(self, shaped:__core__.RID, key:object, size:__core__.Vector2, inline_align:int , length:int, baseline:float)->bool: pass

  def _shaped_text_resize_object(self, shaped:__core__.RID, key:object, size:__core__.Vector2, inline_align:int , baseline:float)->bool: pass

  def _shaped_get_span_count(self, shaped:__core__.RID)->int: pass

  def _shaped_get_span_meta(self, shaped:__core__.RID, index:int)->object: pass

  def _shaped_set_span_update_font(self, shaped:__core__.RID, index:int, fonts:__core__.Array, size:int, opentype_features:__core__.Dictionary)->None: pass

  def _shaped_text_substr(self, shaped:__core__.RID, start:int, length:int)->__core__.RID: pass

  def _shaped_text_get_parent(self, shaped:__core__.RID)->__core__.RID: pass

  def _shaped_text_fit_to_width(self, shaped:__core__.RID, width:float, justification_flags:int)->float: pass

  def _shaped_text_tab_align(self, shaped:__core__.RID, tab_stops:__core__.PackedFloat32Array)->float: pass

  def _shaped_text_shape(self, shaped:__core__.RID)->bool: pass

  def _shaped_text_update_breaks(self, shaped:__core__.RID)->bool: pass

  def _shaped_text_update_justification_ops(self, shaped:__core__.RID)->bool: pass

  def _shaped_text_is_ready(self, shaped:__core__.RID)->bool: pass

  def _shaped_text_get_glyphs(self, shaped:__core__.RID)->const Glyph*: pass

  def _shaped_text_sort_logical(self, shaped:__core__.RID)->const Glyph*: pass

  def _shaped_text_get_glyph_count(self, shaped:__core__.RID)->int: pass

  def _shaped_text_get_range(self, shaped:__core__.RID)->__core__.Vector2i: pass

  def _shaped_text_get_line_breaks_adv(self, shaped:__core__.RID, width:__core__.PackedFloat32Array, start:int, once:bool, break_flags:int)->__core__.PackedInt32Array: pass

  def _shaped_text_get_line_breaks(self, shaped:__core__.RID, width:float, start:int, break_flags:int)->__core__.PackedInt32Array: pass

  def _shaped_text_get_word_breaks(self, shaped:__core__.RID, grapheme_flags:int, skip_grapheme_flags:int)->__core__.PackedInt32Array: pass

  def _shaped_text_get_trim_pos(self, shaped:__core__.RID)->int: pass

  def _shaped_text_get_ellipsis_pos(self, shaped:__core__.RID)->int: pass

  def _shaped_text_get_ellipsis_glyph_count(self, shaped:__core__.RID)->int: pass

  def _shaped_text_get_ellipsis_glyphs(self, shaped:__core__.RID)->const Glyph*: pass

  def _shaped_text_overrun_trim_to_width(self, shaped:__core__.RID, width:float, trim_flags:int)->None: pass

  def _shaped_text_get_objects(self, shaped:__core__.RID)->__core__.Array: pass

  def _shaped_text_get_object_rect(self, shaped:__core__.RID, key:object)->__core__.Rect2: pass

  def _shaped_text_get_object_range(self, shaped:__core__.RID, key:object)->__core__.Vector2i: pass

  def _shaped_text_get_object_glyph(self, shaped:__core__.RID, key:object)->int: pass

  def _shaped_text_get_size(self, shaped:__core__.RID)->__core__.Vector2: pass

  def _shaped_text_get_ascent(self, shaped:__core__.RID)->float: pass

  def _shaped_text_get_descent(self, shaped:__core__.RID)->float: pass

  def _shaped_text_get_width(self, shaped:__core__.RID)->float: pass

  def _shaped_text_get_underline_position(self, shaped:__core__.RID)->float: pass

  def _shaped_text_get_underline_thickness(self, shaped:__core__.RID)->float: pass

  def _shaped_text_get_dominant_direction_in_range(self, shaped:__core__.RID, start:int, end:int)->int: pass

  def _shaped_text_get_selection(self, shaped:__core__.RID, start:int, end:int)->__core__.PackedVector2Array: pass

  def _shaped_text_hit_test_grapheme(self, shaped:__core__.RID, coord:float)->int: pass

  def _shaped_text_hit_test_position(self, shaped:__core__.RID, coord:float)->int: pass

  def _shaped_text_draw(self, shaped:__core__.RID, canvas:__core__.RID, pos:__core__.Vector2, clip_l:float, clip_r:float, color:__core__.Color)->None: pass

  def _shaped_text_draw_outline(self, shaped:__core__.RID, canvas:__core__.RID, pos:__core__.Vector2, clip_l:float, clip_r:float, outline_size:int, color:__core__.Color)->None: pass

  def _shaped_text_get_grapheme_bounds(self, shaped:__core__.RID, pos:int)->__core__.Vector2: pass

  def _shaped_text_next_grapheme_pos(self, shaped:__core__.RID, pos:int)->int: pass

  def _shaped_text_prev_grapheme_pos(self, shaped:__core__.RID, pos:int)->int: pass

  def _shaped_text_get_character_breaks(self, shaped:__core__.RID)->__core__.PackedInt32Array: pass

  def _shaped_text_next_character_pos(self, shaped:__core__.RID, pos:int)->int: pass

  def _shaped_text_prev_character_pos(self, shaped:__core__.RID, pos:int)->int: pass

  def _shaped_text_closest_character_pos(self, shaped:__core__.RID, pos:int)->int: pass

  def _format_number(self, number:str, language:str)->str: pass

  def _parse_number(self, number:str, language:str)->str: pass

  def _percent_sign(self, language:str)->str: pass

  def _strip_diacritics(self, string:str)->str: pass

  def _is_valid_identifier(self, string:str)->bool: pass

  def _is_valid_letter(self, unicode:int)->bool: pass

  def _string_get_word_breaks(self, string:str, language:str, chars_per_line:int)->__core__.PackedInt32Array: pass

  def _string_get_character_breaks(self, string:str, language:str)->__core__.PackedInt32Array: pass

  def _is_confusable(self, string:str, dict:__core__.PackedStringArray)->int: pass

  def _spoof_check(self, string:str)->bool: pass

  def _string_to_upper(self, string:str, language:str)->str: pass

  def _string_to_lower(self, string:str, language:str)->str: pass

  def _string_to_title(self, string:str, language:str)->str: pass

  def _parse_structured_text(self, parser_type:int , args:__core__.Array, text:str)->__core__.Array: pass

  def _cleanup(self)->None: pass


