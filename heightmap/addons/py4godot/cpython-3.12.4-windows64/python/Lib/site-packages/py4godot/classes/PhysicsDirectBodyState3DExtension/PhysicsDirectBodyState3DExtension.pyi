from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Object.Object as __object__
import py4godot.classes.PhysicsDirectSpaceState3D.PhysicsDirectSpaceState3D as __physicsdirectspacestate3d__
import py4godot.classes.PhysicsDirectBodyState3D.PhysicsDirectBodyState3D as __physicsdirectbodystate3d__


class PhysicsDirectBodyState3DExtension(__physicsdirectbodystate3d__.PhysicsDirectBodyState3D):

  @staticmethod
  def constructor()->PhysicsDirectBodyState3DExtension:pass



  @staticmethod
  def cast(other:__object__.Object)->PhysicsDirectBodyState3DExtension:pass


  def _get_total_gravity(self)->__core__.Vector3: pass

  def _get_total_linear_damp(self)->float: pass

  def _get_total_angular_damp(self)->float: pass

  def _get_center_of_mass(self)->__core__.Vector3: pass

  def _get_center_of_mass_local(self)->__core__.Vector3: pass

  def _get_principal_inertia_axes(self)->__core__.Basis: pass

  def _get_inverse_mass(self)->float: pass

  def _get_inverse_inertia(self)->__core__.Vector3: pass

  def _get_inverse_inertia_tensor(self)->__core__.Basis: pass

  def _set_linear_velocity(self, velocity:__core__.Vector3)->None: pass

  def _get_linear_velocity(self)->__core__.Vector3: pass

  def _set_angular_velocity(self, velocity:__core__.Vector3)->None: pass

  def _get_angular_velocity(self)->__core__.Vector3: pass

  def _set_transform(self, transform:__core__.Transform3D)->None: pass

  def _get_transform(self)->__core__.Transform3D: pass

  def _get_velocity_at_local_position(self, local_position:__core__.Vector3)->__core__.Vector3: pass

  def _apply_central_impulse(self, impulse:__core__.Vector3)->None: pass

  def _apply_impulse(self, impulse:__core__.Vector3, position:__core__.Vector3)->None: pass

  def _apply_torque_impulse(self, impulse:__core__.Vector3)->None: pass

  def _apply_central_force(self, force:__core__.Vector3)->None: pass

  def _apply_force(self, force:__core__.Vector3, position:__core__.Vector3)->None: pass

  def _apply_torque(self, torque:__core__.Vector3)->None: pass

  def _add_constant_central_force(self, force:__core__.Vector3)->None: pass

  def _add_constant_force(self, force:__core__.Vector3, position:__core__.Vector3)->None: pass

  def _add_constant_torque(self, torque:__core__.Vector3)->None: pass

  def _set_constant_force(self, force:__core__.Vector3)->None: pass

  def _get_constant_force(self)->__core__.Vector3: pass

  def _set_constant_torque(self, torque:__core__.Vector3)->None: pass

  def _get_constant_torque(self)->__core__.Vector3: pass

  def _set_sleep_state(self, enabled:bool)->None: pass

  def _is_sleeping(self)->bool: pass

  def _get_contact_count(self)->int: pass

  def _get_contact_local_position(self, contact_idx:int)->__core__.Vector3: pass

  def _get_contact_local_normal(self, contact_idx:int)->__core__.Vector3: pass

  def _get_contact_impulse(self, contact_idx:int)->__core__.Vector3: pass

  def _get_contact_local_shape(self, contact_idx:int)->int: pass

  def _get_contact_local_velocity_at_position(self, contact_idx:int)->__core__.Vector3: pass

  def _get_contact_collider(self, contact_idx:int)->__core__.RID: pass

  def _get_contact_collider_position(self, contact_idx:int)->__core__.Vector3: pass

  def _get_contact_collider_id(self, contact_idx:int)->int: pass

  def _get_contact_collider_object(self, contact_idx:int)->__object__.Object: pass

  def _get_contact_collider_shape(self, contact_idx:int)->int: pass

  def _get_contact_collider_velocity_at_position(self, contact_idx:int)->__core__.Vector3: pass

  def _get_step(self)->float: pass

  def _integrate_forces(self)->None: pass

  def _get_space_state(self)->__physicsdirectspacestate3d__.PhysicsDirectSpaceState3D: pass


