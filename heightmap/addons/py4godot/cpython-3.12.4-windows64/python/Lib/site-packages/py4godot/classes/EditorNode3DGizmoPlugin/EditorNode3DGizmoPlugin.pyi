from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.EditorNode3DGizmo.EditorNode3DGizmo as __editornode3dgizmo__
import py4godot.classes.Resource.Resource as __resource__
import py4godot.classes.Node3D.Node3D as __node3d__
import py4godot.classes.Camera3D.Camera3D as __camera3d__
import py4godot.classes.Texture2D.Texture2D as __texture2d__
import py4godot.classes.StandardMaterial3D.StandardMaterial3D as __standardmaterial3d__


class EditorNode3DGizmoPlugin(__resource__.Resource):

  @staticmethod
  def constructor()->EditorNode3DGizmoPlugin:pass



  @staticmethod
  def cast(other:__object__.Object)->EditorNode3DGizmoPlugin:pass


  def _has_gizmo(self, for_node_3d:__node3d__.Node3D)->bool: pass

  def _create_gizmo(self, for_node_3d:__node3d__.Node3D)->__editornode3dgizmo__.EditorNode3DGizmo: pass

  def _get_gizmo_name(self)->str: pass

  def _get_priority(self)->int: pass

  def _can_be_hidden(self)->bool: pass

  def _is_selectable_when_hidden(self)->bool: pass

  def _redraw(self, gizmo:__editornode3dgizmo__.EditorNode3DGizmo)->None: pass

  def _get_handle_name(self, gizmo:__editornode3dgizmo__.EditorNode3DGizmo, handle_id:int, secondary:bool)->str: pass

  def _is_handle_highlighted(self, gizmo:__editornode3dgizmo__.EditorNode3DGizmo, handle_id:int, secondary:bool)->bool: pass

  def _get_handle_value(self, gizmo:__editornode3dgizmo__.EditorNode3DGizmo, handle_id:int, secondary:bool)->object: pass

  def _begin_handle_action(self, gizmo:__editornode3dgizmo__.EditorNode3DGizmo, handle_id:int, secondary:bool)->None: pass

  def _set_handle(self, gizmo:__editornode3dgizmo__.EditorNode3DGizmo, handle_id:int, secondary:bool, camera:__camera3d__.Camera3D, screen_pos:__core__.Vector2)->None: pass

  def _commit_handle(self, gizmo:__editornode3dgizmo__.EditorNode3DGizmo, handle_id:int, secondary:bool, restore:object, cancel:bool)->None: pass

  def _subgizmos_intersect_ray(self, gizmo:__editornode3dgizmo__.EditorNode3DGizmo, camera:__camera3d__.Camera3D, screen_pos:__core__.Vector2)->int: pass

  def _subgizmos_intersect_frustum(self, gizmo:__editornode3dgizmo__.EditorNode3DGizmo, camera:__camera3d__.Camera3D, frustum_planes:__core__.Array)->__core__.PackedInt32Array: pass

  def _get_subgizmo_transform(self, gizmo:__editornode3dgizmo__.EditorNode3DGizmo, subgizmo_id:int)->__core__.Transform3D: pass

  def _set_subgizmo_transform(self, gizmo:__editornode3dgizmo__.EditorNode3DGizmo, subgizmo_id:int, transform:__core__.Transform3D)->None: pass

  def _commit_subgizmos(self, gizmo:__editornode3dgizmo__.EditorNode3DGizmo, ids:__core__.PackedInt32Array, restores:__core__.Array, cancel:bool)->None: pass

  def create_material(self, name:str, color:__core__.Color, billboard:bool=False, on_top:bool=False, use_vertex_color:bool=False)->None: pass

  def create_icon_material(self, name:str, texture:__texture2d__.Texture2D, on_top:bool=False, color:__core__.Color= __core__.Color.new0())->None: pass

  def create_handle_material(self, name:str, billboard:bool=False, texture:__texture2d__.Texture2D= __texture2d__.Texture2D.constructor())->None: pass

  def add_material(self, name:str, material:__standardmaterial3d__.StandardMaterial3D)->None: pass

  def get_material(self, name:str, gizmo:__editornode3dgizmo__.EditorNode3DGizmo= __editornode3dgizmo__.EditorNode3DGizmo.constructor())->__standardmaterial3d__.StandardMaterial3D: pass


