from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.CSGShape3D.CSGShape3D as __csgshape3d__
import py4godot.classes.GeometryInstance3D.GeometryInstance3D as __geometryinstance3d__


class CSGShape3D(__geometryinstance3d__.GeometryInstance3D):

  @staticmethod
  def constructor()->CSGShape3D:pass



  @staticmethod
  def cast(other:__object__.Object)->CSGShape3D:pass


  @property
  def operation(self)->int: pass
  @operation.setter
  def operation(self,  value:int)->None: pass
  @property
  def snap(self)->float: pass
  @snap.setter
  def snap(self,  value:float)->None: pass
  @property
  def calculate_tangents(self)->bool: pass
  @calculate_tangents.setter
  def calculate_tangents(self,  value:bool)->None: pass
  @property
  def use_collision(self)->bool: pass
  @use_collision.setter
  def use_collision(self,  value:bool)->None: pass
  @property
  def collision_layer(self)->int: pass
  @collision_layer.setter
  def collision_layer(self,  value:int)->None: pass
  @property
  def collision_mask(self)->int: pass
  @collision_mask.setter
  def collision_mask(self,  value:int)->None: pass
  @property
  def collision_priority(self)->float: pass
  @collision_priority.setter
  def collision_priority(self,  value:float)->None: pass
  def is_root_shape(self)->bool: pass

  def set_operation(self, operation:int )->None: pass

  def get_operation(self)->int: pass

  def set_snap(self, snap:float)->None: pass

  def get_snap(self)->float: pass

  def set_use_collision(self, operation:bool)->None: pass

  def is_using_collision(self)->bool: pass

  def set_collision_layer(self, layer:int)->None: pass

  def get_collision_layer(self)->int: pass

  def set_collision_mask(self, mask:int)->None: pass

  def get_collision_mask(self)->int: pass

  def set_collision_mask_value(self, layer_number:int, value:bool)->None: pass

  def get_collision_mask_value(self, layer_number:int)->bool: pass

  def set_collision_layer_value(self, layer_number:int, value:bool)->None: pass

  def get_collision_layer_value(self, layer_number:int)->bool: pass

  def set_collision_priority(self, priority:float)->None: pass

  def get_collision_priority(self)->float: pass

  def set_calculate_tangents(self, enabled:bool)->None: pass

  def is_calculating_tangents(self)->bool: pass

  def get_meshes(self)->__core__.Array: pass


