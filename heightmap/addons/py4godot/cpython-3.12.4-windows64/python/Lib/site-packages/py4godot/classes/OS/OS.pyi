from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Object.Object as __object__
import py4godot.classes.OS.OS as __os__


class OS(__object__.Object):



  @staticmethod
  def cast(other:__object__.Object)->OS:pass

  @staticmethod
  def get_instance()->OS:pass

  @property
  def low_processor_usage_mode(self)->bool: pass
  @low_processor_usage_mode.setter
  def low_processor_usage_mode(self,  value:bool)->None: pass
  @property
  def low_processor_usage_mode_sleep_usec(self)->int: pass
  @low_processor_usage_mode_sleep_usec.setter
  def low_processor_usage_mode_sleep_usec(self,  value:int)->None: pass
  @property
  def delta_smoothing(self)->bool: pass
  @delta_smoothing.setter
  def delta_smoothing(self,  value:bool)->None: pass
  def get_entropy(self, size:int)->__core__.PackedByteArray: pass

  def get_system_ca_certificates(self)->str: pass

  def get_connected_midi_inputs(self)->__core__.PackedStringArray: pass

  def open_midi_inputs(self)->None: pass

  def close_midi_inputs(self)->None: pass

  def alert(self, text:str, title:str= __core__.String.new0())->None: pass

  def crash(self, message:str)->None: pass

  def set_low_processor_usage_mode(self, enable:bool)->None: pass

  def is_in_low_processor_usage_mode(self)->bool: pass

  def set_low_processor_usage_mode_sleep_usec(self, usec:int)->None: pass

  def get_low_processor_usage_mode_sleep_usec(self)->int: pass

  def set_delta_smoothing(self, delta_smoothing_enabled:bool)->None: pass

  def is_delta_smoothing_enabled(self)->bool: pass

  def get_processor_count(self)->int: pass

  def get_processor_name(self)->str: pass

  def get_system_fonts(self)->__core__.PackedStringArray: pass

  def get_system_font_path(self, font_name:str, weight:int=400, stretch:int=100, italic:bool=False)->str: pass

  def get_system_font_path_for_text(self, font_name:str, text:str, locale:str= __core__.String.new0(), script:str= __core__.String.new0(), weight:int=400, stretch:int=100, italic:bool=False)->__core__.PackedStringArray: pass

  def get_executable_path(self)->str: pass

  def read_string_from_stdin(self)->str: pass

  def execute(self, path:str, arguments:__core__.PackedStringArray, output:__core__.Array= __core__.Array.new0(), read_stderr:bool=False, open_console:bool=False)->int: pass

  def execute_with_pipe(self, path:str, arguments:__core__.PackedStringArray)->__core__.Dictionary: pass

  def create_process(self, path:str, arguments:__core__.PackedStringArray, open_console:bool=False)->int: pass

  def create_instance(self, arguments:__core__.PackedStringArray)->int: pass

  def kill(self, pid:int)->int: pass

  def shell_open(self, uri:str)->int: pass

  def shell_show_in_file_manager(self, file_or_dir_path:str, open_folder:bool=True)->int: pass

  def is_process_running(self, pid:int)->bool: pass

  def get_process_exit_code(self, pid:int)->int: pass

  def get_process_id(self)->int: pass

  def has_environment(self, variable:str)->bool: pass

  def get_environment(self, variable:str)->str: pass

  def set_environment(self, variable:str, value:str)->None: pass

  def unset_environment(self, variable:str)->None: pass

  def get_name(self)->str: pass

  def get_distribution_name(self)->str: pass

  def get_version(self)->str: pass

  def get_cmdline_args(self)->__core__.PackedStringArray: pass

  def get_cmdline_user_args(self)->__core__.PackedStringArray: pass

  def get_video_adapter_driver_info(self)->__core__.PackedStringArray: pass

  def set_restart_on_exit(self, restart:bool, arguments:__core__.PackedStringArray= __core__.PackedStringArray.new0())->None: pass

  def is_restart_on_exit_set(self)->bool: pass

  def get_restart_on_exit_arguments(self)->__core__.PackedStringArray: pass

  def delay_usec(self, usec:int)->None: pass

  def delay_msec(self, msec:int)->None: pass

  def get_locale(self)->str: pass

  def get_locale_language(self)->str: pass

  def get_model_name(self)->str: pass

  def is_userfs_persistent(self)->bool: pass

  def is_stdout_verbose(self)->bool: pass

  def is_debug_build(self)->bool: pass

  def get_static_memory_usage(self)->int: pass

  def get_static_memory_peak_usage(self)->int: pass

  def get_memory_info(self)->__core__.Dictionary: pass

  def move_to_trash(self, path:str)->int: pass

  def get_user_data_dir(self)->str: pass

  def get_system_dir(self, dir:int , shared_storage:bool=True)->str: pass

  def get_config_dir(self)->str: pass

  def get_data_dir(self)->str: pass

  def get_cache_dir(self)->str: pass

  def get_unique_id(self)->str: pass

  def get_keycode_string(self, code:int )->str: pass

  def is_keycode_unicode(self, code:int)->bool: pass

  def find_keycode_from_string(self, string:str)->int: pass

  def set_use_file_access_save_and_swap(self, enabled:bool)->None: pass

  def set_thread_name(self, name:str)->int: pass

  def get_thread_caller_id(self)->int: pass

  def get_main_thread_id(self)->int: pass

  def has_feature(self, tag_name:str)->bool: pass

  def is_sandboxed(self)->bool: pass

  def request_permission(self, name:str)->bool: pass

  def request_permissions(self)->bool: pass

  def get_granted_permissions(self)->__core__.PackedStringArray: pass

  def revoke_granted_permissions(self)->None: pass


