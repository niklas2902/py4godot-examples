from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.RefCounted.RefCounted as __refcounted__
import py4godot.classes.AStarGrid2D.AStarGrid2D as __astargrid2d__


class AStarGrid2D(__refcounted__.RefCounted):

  @staticmethod
  def constructor()->AStarGrid2D:pass



  @staticmethod
  def cast(other:__object__.Object)->AStarGrid2D:pass


  @property
  def region(self)->__core__.Rect2i: pass
  @region.setter
  def region(self,  value:__core__.Rect2i)->None: pass
  @property
  def size(self)->__core__.Vector2i: pass
  @size.setter
  def size(self,  value:__core__.Vector2i)->None: pass
  @property
  def offset(self)->__core__.Vector2: pass
  @offset.setter
  def offset(self,  value:__core__.Vector2)->None: pass
  @property
  def cell_size(self)->__core__.Vector2: pass
  @cell_size.setter
  def cell_size(self,  value:__core__.Vector2)->None: pass
  @property
  def cell_shape(self)->int: pass
  @cell_shape.setter
  def cell_shape(self,  value:int)->None: pass
  @property
  def jumping_enabled(self)->bool: pass
  @jumping_enabled.setter
  def jumping_enabled(self,  value:bool)->None: pass
  @property
  def default_compute_heuristic(self)->int: pass
  @default_compute_heuristic.setter
  def default_compute_heuristic(self,  value:int)->None: pass
  @property
  def default_estimate_heuristic(self)->int: pass
  @default_estimate_heuristic.setter
  def default_estimate_heuristic(self,  value:int)->None: pass
  @property
  def diagonal_mode(self)->int: pass
  @diagonal_mode.setter
  def diagonal_mode(self,  value:int)->None: pass
  def _estimate_cost(self, from_id:__core__.Vector2i, to_id:__core__.Vector2i)->float: pass

  def _compute_cost(self, from_id:__core__.Vector2i, to_id:__core__.Vector2i)->float: pass

  def set_region(self, region:__core__.Rect2i)->None: pass

  def get_region(self)->__core__.Rect2i: pass

  def set_size(self, size:__core__.Vector2i)->None: pass

  def get_size(self)->__core__.Vector2i: pass

  def set_offset(self, offset:__core__.Vector2)->None: pass

  def get_offset(self)->__core__.Vector2: pass

  def set_cell_size(self, cell_size:__core__.Vector2)->None: pass

  def get_cell_size(self)->__core__.Vector2: pass

  def set_cell_shape(self, cell_shape:int )->None: pass

  def get_cell_shape(self)->int: pass

  def is_in_bounds(self, x:int, y:int)->bool: pass

  def is_in_boundsv(self, id:__core__.Vector2i)->bool: pass

  def is_dirty(self)->bool: pass

  def update(self)->None: pass

  def set_jumping_enabled(self, enabled:bool)->None: pass

  def is_jumping_enabled(self)->bool: pass

  def set_diagonal_mode(self, mode:int )->None: pass

  def get_diagonal_mode(self)->int: pass

  def set_default_compute_heuristic(self, heuristic:int )->None: pass

  def get_default_compute_heuristic(self)->int: pass

  def set_default_estimate_heuristic(self, heuristic:int )->None: pass

  def get_default_estimate_heuristic(self)->int: pass

  def set_point_solid(self, id:__core__.Vector2i, solid:bool=True)->None: pass

  def is_point_solid(self, id:__core__.Vector2i)->bool: pass

  def set_point_weight_scale(self, id:__core__.Vector2i, weight_scale:float)->None: pass

  def get_point_weight_scale(self, id:__core__.Vector2i)->float: pass

  def fill_solid_region(self, region:__core__.Rect2i, solid:bool=True)->None: pass

  def fill_weight_scale_region(self, region:__core__.Rect2i, weight_scale:float)->None: pass

  def clear(self)->None: pass

  def get_point_position(self, id:__core__.Vector2i)->__core__.Vector2: pass

  def get_point_path(self, from_id:__core__.Vector2i, to_id:__core__.Vector2i, allow_partial_path:bool=False)->__core__.PackedVector2Array: pass

  def get_id_path(self, from_id:__core__.Vector2i, to_id:__core__.Vector2i, allow_partial_path:bool=False)->__core__.Array: pass


