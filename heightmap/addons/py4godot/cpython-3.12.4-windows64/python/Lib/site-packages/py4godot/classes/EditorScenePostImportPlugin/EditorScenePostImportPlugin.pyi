from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.RefCounted.RefCounted as __refcounted__
import py4godot.classes.Node.Node as __node__
import py4godot.classes.Resource.Resource as __resource__


class EditorScenePostImportPlugin(__refcounted__.RefCounted):

  @staticmethod
  def constructor()->EditorScenePostImportPlugin:pass



  @staticmethod
  def cast(other:__object__.Object)->EditorScenePostImportPlugin:pass


  def _get_internal_import_options(self, category:int)->None: pass

  def _get_internal_option_visibility(self, category:int, for_animation:bool, option:str)->object: pass

  def _get_internal_option_update_view_required(self, category:int, option:str)->object: pass

  def _internal_process(self, category:int, base_node:__node__.Node, node:__node__.Node, resource:__resource__.Resource)->None: pass

  def _get_import_options(self, path:str)->None: pass

  def _get_option_visibility(self, path:str, for_animation:bool, option:str)->object: pass

  def _pre_process(self, scene:__node__.Node)->None: pass

  def _post_process(self, scene:__node__.Node)->None: pass

  def get_option_value(self, name:__core__.StringName)->object: pass

  def add_import_option(self, name:str, value:object)->None: pass

  def add_import_option_advanced(self, type:int , name:str, default_value:object, hint:int =0, hint_string:str= __core__.String.new0(), usage_flags:int=6)->None: pass


