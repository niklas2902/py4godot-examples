from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Node.Node as __node__
import py4godot.classes.AudioStream.AudioStream as __audiostream__
import py4godot.classes.AudioStreamPlayback.AudioStreamPlayback as __audiostreamplayback__
import py4godot.classes.AudioServer.AudioServer as __audioserver__
import py4godot.classes.AudioStreamPlayer.AudioStreamPlayer as __audiostreamplayer__


class AudioStreamPlayer(__node__.Node):
  finished: BuiltinSignal

  @staticmethod
  def constructor()->AudioStreamPlayer:pass



  @staticmethod
  def cast(other:__object__.Object)->AudioStreamPlayer:pass


  @property
  def stream(self)->__audiostream__.AudioStream: pass
  @stream.setter
  def stream(self,  value:__audiostream__.AudioStream)->None: pass
  @property
  def volume_db(self)->float: pass
  @volume_db.setter
  def volume_db(self,  value:float)->None: pass
  @property
  def pitch_scale(self)->float: pass
  @pitch_scale.setter
  def pitch_scale(self,  value:float)->None: pass
  @property
  def playing(self)->bool: pass
  @playing.setter
  def playing(self,  value:bool)->None: pass
  @property
  def autoplay(self)->bool: pass
  @autoplay.setter
  def autoplay(self,  value:bool)->None: pass
  @property
  def stream_paused(self)->bool: pass
  @stream_paused.setter
  def stream_paused(self,  value:bool)->None: pass
  @property
  def mix_target(self)->int: pass
  @mix_target.setter
  def mix_target(self,  value:int)->None: pass
  @property
  def max_polyphony(self)->int: pass
  @max_polyphony.setter
  def max_polyphony(self,  value:int)->None: pass
  @property
  def bus(self)->__core__.StringName: pass
  @bus.setter
  def bus(self,  value:__core__.StringName)->None: pass
  @property
  def playback_type(self)->int: pass
  @playback_type.setter
  def playback_type(self,  value:int)->None: pass
  def set_stream(self, stream:__audiostream__.AudioStream)->None: pass

  def get_stream(self)->__audiostream__.AudioStream: pass

  def set_volume_db(self, volume_db:float)->None: pass

  def get_volume_db(self)->float: pass

  def set_pitch_scale(self, pitch_scale:float)->None: pass

  def get_pitch_scale(self)->float: pass

  def play(self, from_position:float=0.0)->None: pass

  def seek(self, to_position:float)->None: pass

  def stop(self)->None: pass

  def is_playing(self)->bool: pass

  def get_playback_position(self)->float: pass

  def set_bus(self, bus:__core__.StringName)->None: pass

  def get_bus(self)->__core__.StringName: pass

  def set_autoplay(self, enable:bool)->None: pass

  def is_autoplay_enabled(self)->bool: pass

  def set_mix_target(self, mix_target:int )->None: pass

  def get_mix_target(self)->int: pass

  def set_stream_paused(self, pause:bool)->None: pass

  def get_stream_paused(self)->bool: pass

  def set_max_polyphony(self, max_polyphony:int)->None: pass

  def get_max_polyphony(self)->int: pass

  def has_stream_playback(self)->bool: pass

  def get_stream_playback(self)->__audiostreamplayback__.AudioStreamPlayback: pass

  def set_playback_type(self, playback_type:int )->None: pass

  def get_playback_type(self)->int: pass


