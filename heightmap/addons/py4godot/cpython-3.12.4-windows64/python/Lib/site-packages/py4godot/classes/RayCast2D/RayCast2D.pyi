from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Object.Object as __object__
import py4godot.classes.CollisionObject2D.CollisionObject2D as __collisionobject2d__
import py4godot.classes.Node2D.Node2D as __node2d__


class RayCast2D(__node2d__.Node2D):

  @staticmethod
  def constructor()->RayCast2D:pass



  @staticmethod
  def cast(other:__object__.Object)->RayCast2D:pass


  @property
  def enabled(self)->bool: pass
  @enabled.setter
  def enabled(self,  value:bool)->None: pass
  @property
  def exclude_parent(self)->bool: pass
  @exclude_parent.setter
  def exclude_parent(self,  value:bool)->None: pass
  @property
  def target_position(self)->__core__.Vector2: pass
  @target_position.setter
  def target_position(self,  value:__core__.Vector2)->None: pass
  @property
  def collision_mask(self)->int: pass
  @collision_mask.setter
  def collision_mask(self,  value:int)->None: pass
  @property
  def hit_from_inside(self)->bool: pass
  @hit_from_inside.setter
  def hit_from_inside(self,  value:bool)->None: pass
  @property
  def collide_with_areas(self)->bool: pass
  @collide_with_areas.setter
  def collide_with_areas(self,  value:bool)->None: pass
  @property
  def collide_with_bodies(self)->bool: pass
  @collide_with_bodies.setter
  def collide_with_bodies(self,  value:bool)->None: pass
  def set_enabled(self, enabled:bool)->None: pass

  def is_enabled(self)->bool: pass

  def set_target_position(self, local_point:__core__.Vector2)->None: pass

  def get_target_position(self)->__core__.Vector2: pass

  def is_colliding(self)->bool: pass

  def force_raycast_update(self)->None: pass

  def get_collider(self)->__object__.Object: pass

  def get_collider_rid(self)->__core__.RID: pass

  def get_collider_shape(self)->int: pass

  def get_collision_point(self)->__core__.Vector2: pass

  def get_collision_normal(self)->__core__.Vector2: pass

  def add_exception_rid(self, rid:__core__.RID)->None: pass

  def add_exception(self, node:__collisionobject2d__.CollisionObject2D)->None: pass

  def remove_exception_rid(self, rid:__core__.RID)->None: pass

  def remove_exception(self, node:__collisionobject2d__.CollisionObject2D)->None: pass

  def clear_exceptions(self)->None: pass

  def set_collision_mask(self, mask:int)->None: pass

  def get_collision_mask(self)->int: pass

  def set_collision_mask_value(self, layer_number:int, value:bool)->None: pass

  def get_collision_mask_value(self, layer_number:int)->bool: pass

  def set_exclude_parent_body(self, mask:bool)->None: pass

  def get_exclude_parent_body(self)->bool: pass

  def set_collide_with_areas(self, enable:bool)->None: pass

  def is_collide_with_areas_enabled(self)->bool: pass

  def set_collide_with_bodies(self, enable:bool)->None: pass

  def is_collide_with_bodies_enabled(self)->bool: pass

  def set_hit_from_inside(self, enable:bool)->None: pass

  def is_hit_from_inside_enabled(self)->bool: pass


