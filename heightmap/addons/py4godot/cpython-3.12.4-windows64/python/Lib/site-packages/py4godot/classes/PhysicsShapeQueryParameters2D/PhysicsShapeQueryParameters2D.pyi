from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Shape2D.Shape2D as __shape2d__
import py4godot.classes.RefCounted.RefCounted as __refcounted__
import py4godot.classes.Resource.Resource as __resource__


class PhysicsShapeQueryParameters2D(__refcounted__.RefCounted):

  @staticmethod
  def constructor()->PhysicsShapeQueryParameters2D:pass



  @staticmethod
  def cast(other:__object__.Object)->PhysicsShapeQueryParameters2D:pass


  @property
  def collision_mask(self)->int: pass
  @collision_mask.setter
  def collision_mask(self,  value:int)->None: pass
  @property
  def exclude(self)->typedarray::RID: pass
  @exclude.setter
  def exclude(self,  value:__core__.Array)->None: pass
  @property
  def margin(self)->float: pass
  @margin.setter
  def margin(self,  value:float)->None: pass
  @property
  def motion(self)->__core__.Vector2: pass
  @motion.setter
  def motion(self,  value:__core__.Vector2)->None: pass
  @property
  def shape(self)->__shape2d__.Shape2D: pass
  @shape.setter
  def shape(self,  value:__shape2d__.Shape2D)->None: pass
  @property
  def shape_rid(self)->__core__.RID: pass
  @shape_rid.setter
  def shape_rid(self,  value:__core__.RID)->None: pass
  @property
  def transform(self)->__core__.Transform2D: pass
  @transform.setter
  def transform(self,  value:__core__.Transform2D)->None: pass
  @property
  def collide_with_bodies(self)->bool: pass
  @collide_with_bodies.setter
  def collide_with_bodies(self,  value:bool)->None: pass
  @property
  def collide_with_areas(self)->bool: pass
  @collide_with_areas.setter
  def collide_with_areas(self,  value:bool)->None: pass
  def set_shape(self, shape:__resource__.Resource)->None: pass

  def get_shape(self)->__resource__.Resource: pass

  def set_shape_rid(self, shape:__core__.RID)->None: pass

  def get_shape_rid(self)->__core__.RID: pass

  def set_transform(self, transform:__core__.Transform2D)->None: pass

  def get_transform(self)->__core__.Transform2D: pass

  def set_motion(self, motion:__core__.Vector2)->None: pass

  def get_motion(self)->__core__.Vector2: pass

  def set_margin(self, margin:float)->None: pass

  def get_margin(self)->float: pass

  def set_collision_mask(self, collision_mask:int)->None: pass

  def get_collision_mask(self)->int: pass

  def set_exclude(self, exclude:__core__.Array)->None: pass

  def get_exclude(self)->__core__.Array: pass

  def set_collide_with_bodies(self, enable:bool)->None: pass

  def is_collide_with_bodies_enabled(self)->bool: pass

  def set_collide_with_areas(self, enable:bool)->None: pass

  def is_collide_with_areas_enabled(self)->bool: pass


