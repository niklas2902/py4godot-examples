from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Node.Node as __node__
import py4godot.classes.NavigationPathQueryResult3D.NavigationPathQueryResult3D as __navigationpathqueryresult3d__
import py4godot.classes.NavigationServer3D.NavigationServer3D as __navigationserver3d__
import py4godot.classes.Object.Object as __object__
import py4godot.classes.NavigationPathQueryParameters3D.NavigationPathQueryParameters3D as __navigationpathqueryparameters3d__
import py4godot.classes.NavigationMesh.NavigationMesh as __navigationmesh__
import py4godot.classes.NavigationMeshSourceGeometryData3D.NavigationMeshSourceGeometryData3D as __navigationmeshsourcegeometrydata3d__


class NavigationServer3D(__object__.Object):
  map_changed: BuiltinSignal
  navigation_debug_changed: BuiltinSignal
  avoidance_debug_changed: BuiltinSignal



  @staticmethod
  def cast(other:__object__.Object)->NavigationServer3D:pass

  @staticmethod
  def get_instance()->NavigationServer3D:pass

  def get_maps(self)->__core__.Array: pass

  def map_create(self)->__core__.RID: pass

  def map_set_active(self, map:__core__.RID, active:bool)->None: pass

  def map_is_active(self, map:__core__.RID)->bool: pass

  def map_set_up(self, map:__core__.RID, up:__core__.Vector3)->None: pass

  def map_get_up(self, map:__core__.RID)->__core__.Vector3: pass

  def map_set_cell_size(self, map:__core__.RID, cell_size:float)->None: pass

  def map_get_cell_size(self, map:__core__.RID)->float: pass

  def map_set_cell_height(self, map:__core__.RID, cell_height:float)->None: pass

  def map_get_cell_height(self, map:__core__.RID)->float: pass

  def map_set_merge_rasterizer_cell_scale(self, map:__core__.RID, scale:float)->None: pass

  def map_get_merge_rasterizer_cell_scale(self, map:__core__.RID)->float: pass

  def map_set_use_edge_connections(self, map:__core__.RID, enabled:bool)->None: pass

  def map_get_use_edge_connections(self, map:__core__.RID)->bool: pass

  def map_set_edge_connection_margin(self, map:__core__.RID, margin:float)->None: pass

  def map_get_edge_connection_margin(self, map:__core__.RID)->float: pass

  def map_set_link_connection_radius(self, map:__core__.RID, radius:float)->None: pass

  def map_get_link_connection_radius(self, map:__core__.RID)->float: pass

  def map_get_path(self, map:__core__.RID, origin:__core__.Vector3, destination:__core__.Vector3, optimize:bool, navigation_layers:int=1)->__core__.PackedVector3Array: pass

  def map_get_closest_point_to_segment(self, map:__core__.RID, start:__core__.Vector3, end:__core__.Vector3, use_collision:bool=False)->__core__.Vector3: pass

  def map_get_closest_point(self, map:__core__.RID, to_point:__core__.Vector3)->__core__.Vector3: pass

  def map_get_closest_point_normal(self, map:__core__.RID, to_point:__core__.Vector3)->__core__.Vector3: pass

  def map_get_closest_point_owner(self, map:__core__.RID, to_point:__core__.Vector3)->__core__.RID: pass

  def map_get_links(self, map:__core__.RID)->__core__.Array: pass

  def map_get_regions(self, map:__core__.RID)->__core__.Array: pass

  def map_get_agents(self, map:__core__.RID)->__core__.Array: pass

  def map_get_obstacles(self, map:__core__.RID)->__core__.Array: pass

  def map_force_update(self, map:__core__.RID)->None: pass

  def map_get_iteration_id(self, map:__core__.RID)->int: pass

  def map_get_random_point(self, map:__core__.RID, navigation_layers:int, uniformly:bool)->__core__.Vector3: pass

  def query_path(self, parameters:__navigationpathqueryparameters3d__.NavigationPathQueryParameters3D, result:__navigationpathqueryresult3d__.NavigationPathQueryResult3D)->None: pass

  def region_create(self)->__core__.RID: pass

  def region_set_enabled(self, region:__core__.RID, enabled:bool)->None: pass

  def region_get_enabled(self, region:__core__.RID)->bool: pass

  def region_set_use_edge_connections(self, region:__core__.RID, enabled:bool)->None: pass

  def region_get_use_edge_connections(self, region:__core__.RID)->bool: pass

  def region_set_enter_cost(self, region:__core__.RID, enter_cost:float)->None: pass

  def region_get_enter_cost(self, region:__core__.RID)->float: pass

  def region_set_travel_cost(self, region:__core__.RID, travel_cost:float)->None: pass

  def region_get_travel_cost(self, region:__core__.RID)->float: pass

  def region_set_owner_id(self, region:__core__.RID, owner_id:int)->None: pass

  def region_get_owner_id(self, region:__core__.RID)->int: pass

  def region_owns_point(self, region:__core__.RID, point:__core__.Vector3)->bool: pass

  def region_set_map(self, region:__core__.RID, map:__core__.RID)->None: pass

  def region_get_map(self, region:__core__.RID)->__core__.RID: pass

  def region_set_navigation_layers(self, region:__core__.RID, navigation_layers:int)->None: pass

  def region_get_navigation_layers(self, region:__core__.RID)->int: pass

  def region_set_transform(self, region:__core__.RID, transform:__core__.Transform3D)->None: pass

  def region_get_transform(self, region:__core__.RID)->__core__.Transform3D: pass

  def region_set_navigation_mesh(self, region:__core__.RID, navigation_mesh:__navigationmesh__.NavigationMesh)->None: pass

  def region_bake_navigation_mesh(self, navigation_mesh:__navigationmesh__.NavigationMesh, root_node:__node__.Node)->None: pass

  def region_get_connections_count(self, region:__core__.RID)->int: pass

  def region_get_connection_pathway_start(self, region:__core__.RID, connection:int)->__core__.Vector3: pass

  def region_get_connection_pathway_end(self, region:__core__.RID, connection:int)->__core__.Vector3: pass

  def region_get_random_point(self, region:__core__.RID, navigation_layers:int, uniformly:bool)->__core__.Vector3: pass

  def link_create(self)->__core__.RID: pass

  def link_set_map(self, link:__core__.RID, map:__core__.RID)->None: pass

  def link_get_map(self, link:__core__.RID)->__core__.RID: pass

  def link_set_enabled(self, link:__core__.RID, enabled:bool)->None: pass

  def link_get_enabled(self, link:__core__.RID)->bool: pass

  def link_set_bidirectional(self, link:__core__.RID, bidirectional:bool)->None: pass

  def link_is_bidirectional(self, link:__core__.RID)->bool: pass

  def link_set_navigation_layers(self, link:__core__.RID, navigation_layers:int)->None: pass

  def link_get_navigation_layers(self, link:__core__.RID)->int: pass

  def link_set_start_position(self, link:__core__.RID, position:__core__.Vector3)->None: pass

  def link_get_start_position(self, link:__core__.RID)->__core__.Vector3: pass

  def link_set_end_position(self, link:__core__.RID, position:__core__.Vector3)->None: pass

  def link_get_end_position(self, link:__core__.RID)->__core__.Vector3: pass

  def link_set_enter_cost(self, link:__core__.RID, enter_cost:float)->None: pass

  def link_get_enter_cost(self, link:__core__.RID)->float: pass

  def link_set_travel_cost(self, link:__core__.RID, travel_cost:float)->None: pass

  def link_get_travel_cost(self, link:__core__.RID)->float: pass

  def link_set_owner_id(self, link:__core__.RID, owner_id:int)->None: pass

  def link_get_owner_id(self, link:__core__.RID)->int: pass

  def agent_create(self)->__core__.RID: pass

  def agent_set_avoidance_enabled(self, agent:__core__.RID, enabled:bool)->None: pass

  def agent_get_avoidance_enabled(self, agent:__core__.RID)->bool: pass

  def agent_set_use_3d_avoidance(self, agent:__core__.RID, enabled:bool)->None: pass

  def agent_get_use_3d_avoidance(self, agent:__core__.RID)->bool: pass

  def agent_set_map(self, agent:__core__.RID, map:__core__.RID)->None: pass

  def agent_get_map(self, agent:__core__.RID)->__core__.RID: pass

  def agent_set_paused(self, agent:__core__.RID, paused:bool)->None: pass

  def agent_get_paused(self, agent:__core__.RID)->bool: pass

  def agent_set_neighbor_distance(self, agent:__core__.RID, distance:float)->None: pass

  def agent_get_neighbor_distance(self, agent:__core__.RID)->float: pass

  def agent_set_max_neighbors(self, agent:__core__.RID, count:int)->None: pass

  def agent_get_max_neighbors(self, agent:__core__.RID)->int: pass

  def agent_set_time_horizon_agents(self, agent:__core__.RID, time_horizon:float)->None: pass

  def agent_get_time_horizon_agents(self, agent:__core__.RID)->float: pass

  def agent_set_time_horizon_obstacles(self, agent:__core__.RID, time_horizon:float)->None: pass

  def agent_get_time_horizon_obstacles(self, agent:__core__.RID)->float: pass

  def agent_set_radius(self, agent:__core__.RID, radius:float)->None: pass

  def agent_get_radius(self, agent:__core__.RID)->float: pass

  def agent_set_height(self, agent:__core__.RID, height:float)->None: pass

  def agent_get_height(self, agent:__core__.RID)->float: pass

  def agent_set_max_speed(self, agent:__core__.RID, max_speed:float)->None: pass

  def agent_get_max_speed(self, agent:__core__.RID)->float: pass

  def agent_set_velocity_forced(self, agent:__core__.RID, velocity:__core__.Vector3)->None: pass

  def agent_set_velocity(self, agent:__core__.RID, velocity:__core__.Vector3)->None: pass

  def agent_get_velocity(self, agent:__core__.RID)->__core__.Vector3: pass

  def agent_set_position(self, agent:__core__.RID, position:__core__.Vector3)->None: pass

  def agent_get_position(self, agent:__core__.RID)->__core__.Vector3: pass

  def agent_is_map_changed(self, agent:__core__.RID)->bool: pass

  def agent_set_avoidance_callback(self, agent:__core__.RID, callback:__core__.Callable)->None: pass

  def agent_has_avoidance_callback(self, agent:__core__.RID)->bool: pass

  def agent_set_avoidance_layers(self, agent:__core__.RID, layers:int)->None: pass

  def agent_get_avoidance_layers(self, agent:__core__.RID)->int: pass

  def agent_set_avoidance_mask(self, agent:__core__.RID, mask:int)->None: pass

  def agent_get_avoidance_mask(self, agent:__core__.RID)->int: pass

  def agent_set_avoidance_priority(self, agent:__core__.RID, priority:float)->None: pass

  def agent_get_avoidance_priority(self, agent:__core__.RID)->float: pass

  def obstacle_create(self)->__core__.RID: pass

  def obstacle_set_avoidance_enabled(self, obstacle:__core__.RID, enabled:bool)->None: pass

  def obstacle_get_avoidance_enabled(self, obstacle:__core__.RID)->bool: pass

  def obstacle_set_use_3d_avoidance(self, obstacle:__core__.RID, enabled:bool)->None: pass

  def obstacle_get_use_3d_avoidance(self, obstacle:__core__.RID)->bool: pass

  def obstacle_set_map(self, obstacle:__core__.RID, map:__core__.RID)->None: pass

  def obstacle_get_map(self, obstacle:__core__.RID)->__core__.RID: pass

  def obstacle_set_paused(self, obstacle:__core__.RID, paused:bool)->None: pass

  def obstacle_get_paused(self, obstacle:__core__.RID)->bool: pass

  def obstacle_set_radius(self, obstacle:__core__.RID, radius:float)->None: pass

  def obstacle_get_radius(self, obstacle:__core__.RID)->float: pass

  def obstacle_set_height(self, obstacle:__core__.RID, height:float)->None: pass

  def obstacle_get_height(self, obstacle:__core__.RID)->float: pass

  def obstacle_set_velocity(self, obstacle:__core__.RID, velocity:__core__.Vector3)->None: pass

  def obstacle_get_velocity(self, obstacle:__core__.RID)->__core__.Vector3: pass

  def obstacle_set_position(self, obstacle:__core__.RID, position:__core__.Vector3)->None: pass

  def obstacle_get_position(self, obstacle:__core__.RID)->__core__.Vector3: pass

  def obstacle_set_vertices(self, obstacle:__core__.RID, vertices:__core__.PackedVector3Array)->None: pass

  def obstacle_get_vertices(self, obstacle:__core__.RID)->__core__.PackedVector3Array: pass

  def obstacle_set_avoidance_layers(self, obstacle:__core__.RID, layers:int)->None: pass

  def obstacle_get_avoidance_layers(self, obstacle:__core__.RID)->int: pass

  def parse_source_geometry_data(self, navigation_mesh:__navigationmesh__.NavigationMesh, source_geometry_data:__navigationmeshsourcegeometrydata3d__.NavigationMeshSourceGeometryData3D, root_node:__node__.Node, callback:__core__.Callable= __core__.Callable.new0())->None: pass

  def bake_from_source_geometry_data(self, navigation_mesh:__navigationmesh__.NavigationMesh, source_geometry_data:__navigationmeshsourcegeometrydata3d__.NavigationMeshSourceGeometryData3D, callback:__core__.Callable= __core__.Callable.new0())->None: pass

  def bake_from_source_geometry_data_async(self, navigation_mesh:__navigationmesh__.NavigationMesh, source_geometry_data:__navigationmeshsourcegeometrydata3d__.NavigationMeshSourceGeometryData3D, callback:__core__.Callable= __core__.Callable.new0())->None: pass

  def is_baking_navigation_mesh(self, navigation_mesh:__navigationmesh__.NavigationMesh)->bool: pass

  def source_geometry_parser_create(self)->__core__.RID: pass

  def source_geometry_parser_set_callback(self, parser:__core__.RID, callback:__core__.Callable)->None: pass

  def simplify_path(self, path:__core__.PackedVector3Array, epsilon:float)->__core__.PackedVector3Array: pass

  def free_rid(self, rid:__core__.RID)->None: pass

  def set_active(self, active:bool)->None: pass

  def set_debug_enabled(self, enabled:bool)->None: pass

  def get_debug_enabled(self)->bool: pass

  def get_process_info(self, process_info:int )->int: pass


