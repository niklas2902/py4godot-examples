from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.AnimationNode.AnimationNode as __animationnode__
import py4godot.classes.AnimationRootNode.AnimationRootNode as __animationrootnode__


class AnimationNodeBlendTree(__animationrootnode__.AnimationRootNode):
  node_changed: BuiltinSignal

  @staticmethod
  def constructor()->AnimationNodeBlendTree:pass



  @staticmethod
  def cast(other:__object__.Object)->AnimationNodeBlendTree:pass


  @property
  def graph_offset(self)->__core__.Vector2: pass
  @graph_offset.setter
  def graph_offset(self,  value:__core__.Vector2)->None: pass
  def add_node(self, name:__core__.StringName, node:__animationnode__.AnimationNode, position:__core__.Vector2= __core__.Vector2.new0())->None: pass

  def get_node(self, name:__core__.StringName)->__animationnode__.AnimationNode: pass

  def remove_node(self, name:__core__.StringName)->None: pass

  def rename_node(self, name:__core__.StringName, new_name:__core__.StringName)->None: pass

  def has_node(self, name:__core__.StringName)->bool: pass

  def connect_node(self, input_node:__core__.StringName, input_index:int, output_node:__core__.StringName)->None: pass

  def disconnect_node(self, input_node:__core__.StringName, input_index:int)->None: pass

  def set_node_position(self, name:__core__.StringName, position:__core__.Vector2)->None: pass

  def get_node_position(self, name:__core__.StringName)->__core__.Vector2: pass

  def set_graph_offset(self, offset:__core__.Vector2)->None: pass

  def get_graph_offset(self)->__core__.Vector2: pass


