from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.GraphElement.GraphElement as __graphelement__
import py4godot.classes.HBoxContainer.HBoxContainer as __hboxcontainer__
import py4godot.classes.Texture2D.Texture2D as __texture2d__


class GraphNode(__graphelement__.GraphElement):
  slot_updated: BuiltinSignal

  @staticmethod
  def constructor()->GraphNode:pass



  @staticmethod
  def cast(other:__object__.Object)->GraphNode:pass


  @property
  def title(self)->str: pass
  @title.setter
  def title(self,  value:str)->None: pass
  @property
  def ignore_invalid_connection_type(self)->bool: pass
  @ignore_invalid_connection_type.setter
  def ignore_invalid_connection_type(self,  value:bool)->None: pass
  def _draw_port(self, slot_index:int, position:__core__.Vector2i, left:bool, color:__core__.Color)->None: pass

  def set_title(self, title:str)->None: pass

  def get_title(self)->str: pass

  def get_titlebar_hbox(self)->__hboxcontainer__.HBoxContainer: pass

  def set_slot(self, slot_index:int, enable_left_port:bool, type_left:int, color_left:__core__.Color, enable_right_port:bool, type_right:int, color_right:__core__.Color, custom_icon_left:__texture2d__.Texture2D= __texture2d__.Texture2D.constructor(), custom_icon_right:__texture2d__.Texture2D= __texture2d__.Texture2D.constructor(), draw_stylebox:bool=True)->None: pass

  def clear_slot(self, slot_index:int)->None: pass

  def clear_all_slots(self)->None: pass

  def is_slot_enabled_left(self, slot_index:int)->bool: pass

  def set_slot_enabled_left(self, slot_index:int, enable:bool)->None: pass

  def set_slot_type_left(self, slot_index:int, type:int)->None: pass

  def get_slot_type_left(self, slot_index:int)->int: pass

  def set_slot_color_left(self, slot_index:int, color:__core__.Color)->None: pass

  def get_slot_color_left(self, slot_index:int)->__core__.Color: pass

  def set_slot_custom_icon_left(self, slot_index:int, custom_icon:__texture2d__.Texture2D)->None: pass

  def get_slot_custom_icon_left(self, slot_index:int)->__texture2d__.Texture2D: pass

  def is_slot_enabled_right(self, slot_index:int)->bool: pass

  def set_slot_enabled_right(self, slot_index:int, enable:bool)->None: pass

  def set_slot_type_right(self, slot_index:int, type:int)->None: pass

  def get_slot_type_right(self, slot_index:int)->int: pass

  def set_slot_color_right(self, slot_index:int, color:__core__.Color)->None: pass

  def get_slot_color_right(self, slot_index:int)->__core__.Color: pass

  def set_slot_custom_icon_right(self, slot_index:int, custom_icon:__texture2d__.Texture2D)->None: pass

  def get_slot_custom_icon_right(self, slot_index:int)->__texture2d__.Texture2D: pass

  def is_slot_draw_stylebox(self, slot_index:int)->bool: pass

  def set_slot_draw_stylebox(self, slot_index:int, enable:bool)->None: pass

  def set_ignore_invalid_connection_type(self, ignore:bool)->None: pass

  def is_ignoring_valid_connection_type(self)->bool: pass

  def get_input_port_count(self)->int: pass

  def get_input_port_position(self, port_idx:int)->__core__.Vector2: pass

  def get_input_port_type(self, port_idx:int)->int: pass

  def get_input_port_color(self, port_idx:int)->__core__.Color: pass

  def get_input_port_slot(self, port_idx:int)->int: pass

  def get_output_port_count(self)->int: pass

  def get_output_port_position(self, port_idx:int)->__core__.Vector2: pass

  def get_output_port_type(self, port_idx:int)->int: pass

  def get_output_port_color(self, port_idx:int)->__core__.Color: pass

  def get_output_port_slot(self, port_idx:int)->int: pass


