from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Shader.Shader as __shader__
import py4godot.classes.VisualShaderNode.VisualShaderNode as __visualshadernode__
import py4godot.classes.VisualShader.VisualShader as __visualshader__


class VisualShaderNodeCustom(__visualshadernode__.VisualShaderNode):

  @staticmethod
  def constructor()->VisualShaderNodeCustom:pass



  @staticmethod
  def cast(other:__object__.Object)->VisualShaderNodeCustom:pass


  @property
  def initialized(self)->bool: pass
  @initialized.setter
  def initialized(self,  value:bool)->None: pass
  @property
  def properties(self)->str: pass
  @properties.setter
  def properties(self,  value:str)->None: pass
  def _get_name(self)->str: pass

  def _get_description(self)->str: pass

  def _get_category(self)->str: pass

  def _get_return_icon_type(self)->int: pass

  def _get_input_port_count(self)->int: pass

  def _get_input_port_type(self, port:int)->int: pass

  def _get_input_port_name(self, port:int)->str: pass

  def _get_input_port_default_value(self, port:int)->object: pass

  def _get_default_input_port(self, type:int )->int: pass

  def _get_output_port_count(self)->int: pass

  def _get_output_port_type(self, port:int)->int: pass

  def _get_output_port_name(self, port:int)->str: pass

  def _get_property_count(self)->int: pass

  def _get_property_name(self, index:int)->str: pass

  def _get_property_default_index(self, index:int)->int: pass

  def _get_property_options(self, index:int)->__core__.PackedStringArray: pass

  def _get_code(self, input_vars:__core__.Array, output_vars:__core__.Array, mode:int , type:int )->str: pass

  def _get_func_code(self, mode:int , type:int )->str: pass

  def _get_global_code(self, mode:int )->str: pass

  def _is_highend(self)->bool: pass

  def _is_available(self, mode:int , type:int )->bool: pass

  def get_option_index(self, option:int)->int: pass


