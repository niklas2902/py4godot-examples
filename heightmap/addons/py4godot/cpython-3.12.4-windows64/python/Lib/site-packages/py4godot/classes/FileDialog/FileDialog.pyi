from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.ConfirmationDialog.ConfirmationDialog as __confirmationdialog__
import py4godot.classes.FileDialog.FileDialog as __filedialog__
import py4godot.classes.LineEdit.LineEdit as __lineedit__
import py4godot.classes.VBoxContainer.VBoxContainer as __vboxcontainer__


class FileDialog(__confirmationdialog__.ConfirmationDialog):
  file_selected: BuiltinSignal
  files_selected: BuiltinSignal
  dir_selected: BuiltinSignal

  @staticmethod
  def constructor()->FileDialog:pass



  @staticmethod
  def cast(other:__object__.Object)->FileDialog:pass


  @property
  def mode_overrides_title(self)->bool: pass
  @mode_overrides_title.setter
  def mode_overrides_title(self,  value:bool)->None: pass
  @property
  def file_mode(self)->int: pass
  @file_mode.setter
  def file_mode(self,  value:int)->None: pass
  @property
  def access(self)->int: pass
  @access.setter
  def access(self,  value:int)->None: pass
  @property
  def root_subfolder(self)->str: pass
  @root_subfolder.setter
  def root_subfolder(self,  value:str)->None: pass
  @property
  def filters(self)->__core__.PackedStringArray: pass
  @filters.setter
  def filters(self,  value:__core__.PackedStringArray)->None: pass
  @property
  def option_count(self)->int: pass
  @option_count.setter
  def option_count(self,  value:int)->None: pass
  @property
  def show_hidden_files(self)->bool: pass
  @show_hidden_files.setter
  def show_hidden_files(self,  value:bool)->None: pass
  @property
  def use_native_dialog(self)->bool: pass
  @use_native_dialog.setter
  def use_native_dialog(self,  value:bool)->None: pass
  @property
  def current_dir(self)->str: pass
  @current_dir.setter
  def current_dir(self,  value:str)->None: pass
  @property
  def current_file(self)->str: pass
  @current_file.setter
  def current_file(self,  value:str)->None: pass
  @property
  def current_path(self)->str: pass
  @current_path.setter
  def current_path(self,  value:str)->None: pass
  def clear_filters(self)->None: pass

  def add_filter(self, filter:str, description:str= __core__.String.new0())->None: pass

  def set_filters(self, filters:__core__.PackedStringArray)->None: pass

  def get_filters(self)->__core__.PackedStringArray: pass

  def get_option_name(self, option:int)->str: pass

  def get_option_values(self, option:int)->__core__.PackedStringArray: pass

  def get_option_default(self, option:int)->int: pass

  def set_option_name(self, option:int, name:str)->None: pass

  def set_option_values(self, option:int, values:__core__.PackedStringArray)->None: pass

  def set_option_default(self, option:int, default_value_index:int)->None: pass

  def set_option_count(self, count:int)->None: pass

  def get_option_count(self)->int: pass

  def add_option(self, name:str, values:__core__.PackedStringArray, default_value_index:int)->None: pass

  def get_selected_options(self)->__core__.Dictionary: pass

  def get_current_dir(self)->str: pass

  def get_current_file(self)->str: pass

  def get_current_path(self)->str: pass

  def set_current_dir(self, dir:str)->None: pass

  def set_current_file(self, file:str)->None: pass

  def set_current_path(self, path:str)->None: pass

  def set_mode_overrides_title(self, override:bool)->None: pass

  def is_mode_overriding_title(self)->bool: pass

  def set_file_mode(self, mode:int )->None: pass

  def get_file_mode(self)->int: pass

  def get_vbox(self)->__vboxcontainer__.VBoxContainer: pass

  def get_line_edit(self)->__lineedit__.LineEdit: pass

  def set_access(self, access:int )->None: pass

  def get_access(self)->int: pass

  def set_root_subfolder(self, dir:str)->None: pass

  def get_root_subfolder(self)->str: pass

  def set_show_hidden_files(self, show:bool)->None: pass

  def is_showing_hidden_files(self)->bool: pass

  def set_use_native_dialog(self, native:bool)->None: pass

  def get_use_native_dialog(self)->bool: pass

  def deselect_all(self)->None: pass

  def invalidate(self)->None: pass


