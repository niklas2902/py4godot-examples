from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.RefCounted.RefCounted as __refcounted__


class PhysicsPointQueryParameters2D(__refcounted__.RefCounted):

  @staticmethod
  def constructor()->PhysicsPointQueryParameters2D:pass



  @staticmethod
  def cast(other:__object__.Object)->PhysicsPointQueryParameters2D:pass


  @property
  def position(self)->__core__.Vector2: pass
  @position.setter
  def position(self,  value:__core__.Vector2)->None: pass
  @property
  def canvas_instance_id(self)->int: pass
  @canvas_instance_id.setter
  def canvas_instance_id(self,  value:int)->None: pass
  @property
  def collision_mask(self)->int: pass
  @collision_mask.setter
  def collision_mask(self,  value:int)->None: pass
  @property
  def exclude(self)->typedarray::RID: pass
  @exclude.setter
  def exclude(self,  value:__core__.Array)->None: pass
  @property
  def collide_with_bodies(self)->bool: pass
  @collide_with_bodies.setter
  def collide_with_bodies(self,  value:bool)->None: pass
  @property
  def collide_with_areas(self)->bool: pass
  @collide_with_areas.setter
  def collide_with_areas(self,  value:bool)->None: pass
  def set_position(self, position:__core__.Vector2)->None: pass

  def get_position(self)->__core__.Vector2: pass

  def set_canvas_instance_id(self, canvas_instance_id:int)->None: pass

  def get_canvas_instance_id(self)->int: pass

  def set_collision_mask(self, collision_mask:int)->None: pass

  def get_collision_mask(self)->int: pass

  def set_exclude(self, exclude:__core__.Array)->None: pass

  def get_exclude(self)->__core__.Array: pass

  def set_collide_with_bodies(self, enable:bool)->None: pass

  def is_collide_with_bodies_enabled(self)->bool: pass

  def set_collide_with_areas(self, enable:bool)->None: pass

  def is_collide_with_areas_enabled(self)->bool: pass


