from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.RegEx.RegEx as __regex__
import py4godot.classes.RefCounted.RefCounted as __refcounted__
import py4godot.classes.RegExMatch.RegExMatch as __regexmatch__


class RegEx(__refcounted__.RefCounted):

  @staticmethod
  def constructor()->RegEx:pass



  @staticmethod
  def cast(other:__object__.Object)->RegEx:pass


  @staticmethod
  def create_from_string(pattern:str)->__regex__.RegEx: pass

  def clear(self)->None: pass

  def compile(self, pattern:str)->int: pass

  def search(self, subject:str, offset:int=0, end:int=-1)->__regexmatch__.RegExMatch: pass

  def search_all(self, subject:str, offset:int=0, end:int=-1)->__core__.Array: pass

  def sub(self, subject:str, replacement:str, all:bool=False, offset:int=0, end:int=-1)->str: pass

  def is_valid(self)->bool: pass

  def get_pattern(self)->str: pass

  def get_group_count(self)->int: pass

  def get_names(self)->__core__.PackedStringArray: pass


