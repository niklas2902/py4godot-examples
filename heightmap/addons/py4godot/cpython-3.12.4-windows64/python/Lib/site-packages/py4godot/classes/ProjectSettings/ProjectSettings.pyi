from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Object.Object as __object__


class ProjectSettings(__object__.Object):
  settings_changed: BuiltinSignal



  @staticmethod
  def cast(other:__object__.Object)->ProjectSettings:pass

  @staticmethod
  def get_instance()->ProjectSettings:pass

  def has_setting(self, name:str)->bool: pass

  def set_setting(self, name:str, value:object)->None: pass

  def get_setting(self, name:str, default_value:object=None)->object: pass

  def get_setting_with_override(self, name:__core__.StringName)->object: pass

  def get_global_class_list(self)->__core__.Array: pass

  def set_order(self, name:str, position:int)->None: pass

  def get_order(self, name:str)->int: pass

  def set_initial_value(self, name:str, value:object)->None: pass

  def set_as_basic(self, name:str, basic:bool)->None: pass

  def set_as_internal(self, name:str, internal:bool)->None: pass

  def add_property_info(self, hint:__core__.Dictionary)->None: pass

  def set_restart_if_changed(self, name:str, restart:bool)->None: pass

  def clear(self, name:str)->None: pass

  def localize_path(self, path:str)->str: pass

  def globalize_path(self, path:str)->str: pass

  def save(self)->int: pass

  def load_resource_pack(self, pack:str, replace_files:bool=True, offset:int=0)->bool: pass

  def save_custom(self, file:str)->int: pass


