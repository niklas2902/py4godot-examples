from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.TabBar.TabBar as __tabbar__
import py4godot.classes.Control.Control as __control__
import py4godot.classes.Texture2D.Texture2D as __texture2d__


class TabBar(__control__.Control):
  tab_selected: BuiltinSignal
  tab_changed: BuiltinSignal
  tab_clicked: BuiltinSignal
  tab_rmb_clicked: BuiltinSignal
  tab_close_pressed: BuiltinSignal
  tab_button_pressed: BuiltinSignal
  tab_hovered: BuiltinSignal
  active_tab_rearranged: BuiltinSignal

  @staticmethod
  def constructor()->TabBar:pass



  @staticmethod
  def cast(other:__object__.Object)->TabBar:pass


  @property
  def current_tab(self)->int: pass
  @current_tab.setter
  def current_tab(self,  value:int)->None: pass
  @property
  def tab_alignment(self)->int: pass
  @tab_alignment.setter
  def tab_alignment(self,  value:int)->None: pass
  @property
  def clip_tabs(self)->bool: pass
  @clip_tabs.setter
  def clip_tabs(self,  value:bool)->None: pass
  @property
  def tab_close_display_policy(self)->int: pass
  @tab_close_display_policy.setter
  def tab_close_display_policy(self,  value:int)->None: pass
  @property
  def max_tab_width(self)->int: pass
  @max_tab_width.setter
  def max_tab_width(self,  value:int)->None: pass
  @property
  def scrolling_enabled(self)->bool: pass
  @scrolling_enabled.setter
  def scrolling_enabled(self,  value:bool)->None: pass
  @property
  def drag_to_rearrange_enabled(self)->bool: pass
  @drag_to_rearrange_enabled.setter
  def drag_to_rearrange_enabled(self,  value:bool)->None: pass
  @property
  def tabs_rearrange_group(self)->int: pass
  @tabs_rearrange_group.setter
  def tabs_rearrange_group(self,  value:int)->None: pass
  @property
  def scroll_to_selected(self)->bool: pass
  @scroll_to_selected.setter
  def scroll_to_selected(self,  value:bool)->None: pass
  @property
  def select_with_rmb(self)->bool: pass
  @select_with_rmb.setter
  def select_with_rmb(self,  value:bool)->None: pass
  @property
  def deselect_enabled(self)->bool: pass
  @deselect_enabled.setter
  def deselect_enabled(self,  value:bool)->None: pass
  @property
  def tab_count(self)->int: pass
  @tab_count.setter
  def tab_count(self,  value:int)->None: pass
  def set_tab_count(self, count:int)->None: pass

  def get_tab_count(self)->int: pass

  def set_current_tab(self, tab_idx:int)->None: pass

  def get_current_tab(self)->int: pass

  def get_previous_tab(self)->int: pass

  def select_previous_available(self)->bool: pass

  def select_next_available(self)->bool: pass

  def set_tab_title(self, tab_idx:int, title:str)->None: pass

  def get_tab_title(self, tab_idx:int)->str: pass

  def set_tab_tooltip(self, tab_idx:int, tooltip:str)->None: pass

  def get_tab_tooltip(self, tab_idx:int)->str: pass

  def set_tab_text_direction(self, tab_idx:int, direction:int )->None: pass

  def get_tab_text_direction(self, tab_idx:int)->int: pass

  def set_tab_language(self, tab_idx:int, language:str)->None: pass

  def get_tab_language(self, tab_idx:int)->str: pass

  def set_tab_icon(self, tab_idx:int, icon:__texture2d__.Texture2D)->None: pass

  def get_tab_icon(self, tab_idx:int)->__texture2d__.Texture2D: pass

  def set_tab_icon_max_width(self, tab_idx:int, width:int)->None: pass

  def get_tab_icon_max_width(self, tab_idx:int)->int: pass

  def set_tab_button_icon(self, tab_idx:int, icon:__texture2d__.Texture2D)->None: pass

  def get_tab_button_icon(self, tab_idx:int)->__texture2d__.Texture2D: pass

  def set_tab_disabled(self, tab_idx:int, disabled:bool)->None: pass

  def is_tab_disabled(self, tab_idx:int)->bool: pass

  def set_tab_hidden(self, tab_idx:int, hidden:bool)->None: pass

  def is_tab_hidden(self, tab_idx:int)->bool: pass

  def set_tab_metadata(self, tab_idx:int, metadata:object)->None: pass

  def get_tab_metadata(self, tab_idx:int)->object: pass

  def remove_tab(self, tab_idx:int)->None: pass

  def add_tab(self, title:str= __core__.String.new0(), icon:__texture2d__.Texture2D= __texture2d__.Texture2D.constructor())->None: pass

  def get_tab_idx_at_point(self, point:__core__.Vector2)->int: pass

  def set_tab_alignment(self, alignment:int )->None: pass

  def get_tab_alignment(self)->int: pass

  def set_clip_tabs(self, clip_tabs:bool)->None: pass

  def get_clip_tabs(self)->bool: pass

  def get_tab_offset(self)->int: pass

  def get_offset_buttons_visible(self)->bool: pass

  def ensure_tab_visible(self, idx:int)->None: pass

  def get_tab_rect(self, tab_idx:int)->__core__.Rect2: pass

  def move_tab(self, from_:int, to:int)->None: pass

  def set_tab_close_display_policy(self, policy:int )->None: pass

  def get_tab_close_display_policy(self)->int: pass

  def set_max_tab_width(self, width:int)->None: pass

  def get_max_tab_width(self)->int: pass

  def set_scrolling_enabled(self, enabled:bool)->None: pass

  def get_scrolling_enabled(self)->bool: pass

  def set_drag_to_rearrange_enabled(self, enabled:bool)->None: pass

  def get_drag_to_rearrange_enabled(self)->bool: pass

  def set_tabs_rearrange_group(self, group_id:int)->None: pass

  def get_tabs_rearrange_group(self)->int: pass

  def set_scroll_to_selected(self, enabled:bool)->None: pass

  def get_scroll_to_selected(self)->bool: pass

  def set_select_with_rmb(self, enabled:bool)->None: pass

  def get_select_with_rmb(self)->bool: pass

  def set_deselect_enabled(self, enabled:bool)->None: pass

  def get_deselect_enabled(self)->bool: pass

  def clear_tabs(self)->None: pass


