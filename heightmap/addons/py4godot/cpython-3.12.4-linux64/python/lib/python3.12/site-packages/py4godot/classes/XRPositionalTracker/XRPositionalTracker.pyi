from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.XRTracker.XRTracker as __xrtracker__
import py4godot.classes.XRPose.XRPose as __xrpose__
import py4godot.classes.XRPositionalTracker.XRPositionalTracker as __xrpositionaltracker__


class XRPositionalTracker(__xrtracker__.XRTracker):
  pose_changed: BuiltinSignal
  pose_lost_tracking: BuiltinSignal
  button_pressed: BuiltinSignal
  button_released: BuiltinSignal
  input_float_changed: BuiltinSignal
  input_vector2_changed: BuiltinSignal
  profile_changed: BuiltinSignal

  @staticmethod
  def constructor()->XRPositionalTracker:pass



  @staticmethod
  def cast(other:__object__.Object)->XRPositionalTracker:pass


  @property
  def profile(self)->str: pass
  @profile.setter
  def profile(self,  value:str)->None: pass
  @property
  def hand(self)->int: pass
  @hand.setter
  def hand(self,  value:int)->None: pass
  def get_tracker_profile(self)->str: pass

  def set_tracker_profile(self, profile:str)->None: pass

  def get_tracker_hand(self)->int: pass

  def set_tracker_hand(self, hand:int )->None: pass

  def has_pose(self, name:__core__.StringName)->bool: pass

  def get_pose(self, name:__core__.StringName)->__xrpose__.XRPose: pass

  def invalidate_pose(self, name:__core__.StringName)->None: pass

  def set_pose(self, name:__core__.StringName, transform:__core__.Transform3D, linear_velocity:__core__.Vector3, angular_velocity:__core__.Vector3, tracking_confidence:int )->None: pass

  def get_input(self, name:__core__.StringName)->object: pass

  def set_input(self, name:__core__.StringName, value:object)->None: pass


