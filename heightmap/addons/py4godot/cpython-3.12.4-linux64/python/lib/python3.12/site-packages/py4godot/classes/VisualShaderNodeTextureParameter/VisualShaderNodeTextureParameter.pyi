from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.VisualShaderNodeTextureParameter.VisualShaderNodeTextureParameter as __visualshadernodetextureparameter__
import py4godot.classes.VisualShaderNodeParameter.VisualShaderNodeParameter as __visualshadernodeparameter__


class VisualShaderNodeTextureParameter(__visualshadernodeparameter__.VisualShaderNodeParameter):

  @staticmethod
  def constructor()->VisualShaderNodeTextureParameter:pass



  @staticmethod
  def cast(other:__object__.Object)->VisualShaderNodeTextureParameter:pass


  @property
  def texture_type(self)->int: pass
  @texture_type.setter
  def texture_type(self,  value:int)->None: pass
  @property
  def color_default(self)->int: pass
  @color_default.setter
  def color_default(self,  value:int)->None: pass
  @property
  def texture_filter(self)->int: pass
  @texture_filter.setter
  def texture_filter(self,  value:int)->None: pass
  @property
  def texture_repeat(self)->int: pass
  @texture_repeat.setter
  def texture_repeat(self,  value:int)->None: pass
  @property
  def texture_source(self)->int: pass
  @texture_source.setter
  def texture_source(self,  value:int)->None: pass
  def set_texture_type(self, type:int )->None: pass

  def get_texture_type(self)->int: pass

  def set_color_default(self, color:int )->None: pass

  def get_color_default(self)->int: pass

  def set_texture_filter(self, filter:int )->None: pass

  def get_texture_filter(self)->int: pass

  def set_texture_repeat(self, repeat:int )->None: pass

  def get_texture_repeat(self)->int: pass

  def set_texture_source(self, source:int )->None: pass

  def get_texture_source(self)->int: pass


