from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.RefCounted.RefCounted as __refcounted__
import py4godot.classes.RenderingDevice.RenderingDevice as __renderingdevice__


class RDPipelineColorBlendState(__refcounted__.RefCounted):

  @staticmethod
  def constructor()->RDPipelineColorBlendState:pass



  @staticmethod
  def cast(other:__object__.Object)->RDPipelineColorBlendState:pass


  @property
  def enable_logic_op(self)->bool: pass
  @enable_logic_op.setter
  def enable_logic_op(self,  value:bool)->None: pass
  @property
  def logic_op(self)->int: pass
  @logic_op.setter
  def logic_op(self,  value:int)->None: pass
  @property
  def blend_constant(self)->__core__.Color: pass
  @blend_constant.setter
  def blend_constant(self,  value:__core__.Color)->None: pass
  @property
  def attachments(self)->typedarray::RDPipelineColorBlendStateAttachment: pass
  @attachments.setter
  def attachments(self,  value:__core__.Array)->None: pass
  def set_enable_logic_op(self, p_member:bool)->None: pass

  def get_enable_logic_op(self)->bool: pass

  def set_logic_op(self, p_member:int )->None: pass

  def get_logic_op(self)->int: pass

  def set_blend_constant(self, p_member:__core__.Color)->None: pass

  def get_blend_constant(self)->__core__.Color: pass

  def set_attachments(self, attachments:__core__.Array)->None: pass

  def get_attachments(self)->__core__.Array: pass


