from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.MultiMesh.MultiMesh as __multimesh__
import py4godot.classes.Mesh.Mesh as __mesh__
import py4godot.classes.Resource.Resource as __resource__


class MultiMesh(__resource__.Resource):

  @staticmethod
  def constructor()->MultiMesh:pass



  @staticmethod
  def cast(other:__object__.Object)->MultiMesh:pass


  @property
  def transform_format(self)->int: pass
  @transform_format.setter
  def transform_format(self,  value:int)->None: pass
  @property
  def use_colors(self)->bool: pass
  @use_colors.setter
  def use_colors(self,  value:bool)->None: pass
  @property
  def use_custom_data(self)->bool: pass
  @use_custom_data.setter
  def use_custom_data(self,  value:bool)->None: pass
  @property
  def custom_aabb(self)->__core__.AABB: pass
  @custom_aabb.setter
  def custom_aabb(self,  value:__core__.AABB)->None: pass
  @property
  def instance_count(self)->int: pass
  @instance_count.setter
  def instance_count(self,  value:int)->None: pass
  @property
  def visible_instance_count(self)->int: pass
  @visible_instance_count.setter
  def visible_instance_count(self,  value:int)->None: pass
  @property
  def mesh(self)->__mesh__.Mesh: pass
  @mesh.setter
  def mesh(self,  value:__mesh__.Mesh)->None: pass
  @property
  def buffer(self)->__core__.PackedFloat32Array: pass
  @buffer.setter
  def buffer(self,  value:__core__.PackedFloat32Array)->None: pass
  @property
  def transform_array(self)->__core__.PackedVector3Array: pass
  @transform_array.setter
  def transform_array(self,  value:__core__.PackedVector3Array)->None: pass
  @property
  def transform_2d_array(self)->__core__.PackedVector2Array: pass
  @transform_2d_array.setter
  def transform_2d_array(self,  value:__core__.PackedVector2Array)->None: pass
  @property
  def color_array(self)->__core__.PackedColorArray: pass
  @color_array.setter
  def color_array(self,  value:__core__.PackedColorArray)->None: pass
  @property
  def custom_data_array(self)->__core__.PackedColorArray: pass
  @custom_data_array.setter
  def custom_data_array(self,  value:__core__.PackedColorArray)->None: pass
  def set_mesh(self, mesh:__mesh__.Mesh)->None: pass

  def get_mesh(self)->__mesh__.Mesh: pass

  def set_use_colors(self, enable:bool)->None: pass

  def is_using_colors(self)->bool: pass

  def set_use_custom_data(self, enable:bool)->None: pass

  def is_using_custom_data(self)->bool: pass

  def set_transform_format(self, format:int )->None: pass

  def get_transform_format(self)->int: pass

  def set_instance_count(self, count:int)->None: pass

  def get_instance_count(self)->int: pass

  def set_visible_instance_count(self, count:int)->None: pass

  def get_visible_instance_count(self)->int: pass

  def set_instance_transform(self, instance:int, transform:__core__.Transform3D)->None: pass

  def set_instance_transform_2d(self, instance:int, transform:__core__.Transform2D)->None: pass

  def get_instance_transform(self, instance:int)->__core__.Transform3D: pass

  def get_instance_transform_2d(self, instance:int)->__core__.Transform2D: pass

  def set_instance_color(self, instance:int, color:__core__.Color)->None: pass

  def get_instance_color(self, instance:int)->__core__.Color: pass

  def set_instance_custom_data(self, instance:int, custom_data:__core__.Color)->None: pass

  def get_instance_custom_data(self, instance:int)->__core__.Color: pass

  def set_custom_aabb(self, aabb:__core__.AABB)->None: pass

  def get_custom_aabb(self)->__core__.AABB: pass

  def get_aabb(self)->__core__.AABB: pass

  def get_buffer(self)->__core__.PackedFloat32Array: pass

  def set_buffer(self, buffer:__core__.PackedFloat32Array)->None: pass


