from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.ImporterMesh.ImporterMesh as __importermesh__
import py4godot.classes.Shape3D.Shape3D as __shape3d__
import py4godot.classes.Resource.Resource as __resource__
import py4godot.classes.CollisionShape3D.CollisionShape3D as __collisionshape3d__
import py4godot.classes.GLTFPhysicsShape.GLTFPhysicsShape as __gltfphysicsshape__


class GLTFPhysicsShape(__resource__.Resource):

  @staticmethod
  def constructor()->GLTFPhysicsShape:pass



  @staticmethod
  def cast(other:__object__.Object)->GLTFPhysicsShape:pass


  @property
  def shape_type(self)->str: pass
  @shape_type.setter
  def shape_type(self,  value:str)->None: pass
  @property
  def size(self)->__core__.Vector3: pass
  @size.setter
  def size(self,  value:__core__.Vector3)->None: pass
  @property
  def radius(self)->float: pass
  @radius.setter
  def radius(self,  value:float)->None: pass
  @property
  def height(self)->float: pass
  @height.setter
  def height(self,  value:float)->None: pass
  @property
  def is_trigger(self)->bool: pass
  @is_trigger.setter
  def is_trigger(self,  value:bool)->None: pass
  @property
  def mesh_index(self)->int: pass
  @mesh_index.setter
  def mesh_index(self,  value:int)->None: pass
  @property
  def importer_mesh(self)->__importermesh__.ImporterMesh: pass
  @importer_mesh.setter
  def importer_mesh(self,  value:__importermesh__.ImporterMesh)->None: pass
  @staticmethod
  def from_node(shape_node:__collisionshape3d__.CollisionShape3D)->__gltfphysicsshape__.GLTFPhysicsShape: pass

  def to_node(self, cache_shapes:bool=False)->__collisionshape3d__.CollisionShape3D: pass

  @staticmethod
  def from_resource(shape_resource:__shape3d__.Shape3D)->__gltfphysicsshape__.GLTFPhysicsShape: pass

  def to_resource(self, cache_shapes:bool=False)->__shape3d__.Shape3D: pass

  @staticmethod
  def from_dictionary(dictionary:__core__.Dictionary)->__gltfphysicsshape__.GLTFPhysicsShape: pass

  def to_dictionary(self)->__core__.Dictionary: pass

  def get_shape_type(self)->str: pass

  def set_shape_type(self, shape_type:str)->None: pass

  def get_size(self)->__core__.Vector3: pass

  def set_size(self, size:__core__.Vector3)->None: pass

  def get_radius(self)->float: pass

  def set_radius(self, radius:float)->None: pass

  def get_height(self)->float: pass

  def set_height(self, height:float)->None: pass

  def get_is_trigger(self)->bool: pass

  def set_is_trigger(self, is_trigger:bool)->None: pass

  def get_mesh_index(self)->int: pass

  def set_mesh_index(self, mesh_index:int)->None: pass

  def get_importer_mesh(self)->__importermesh__.ImporterMesh: pass

  def set_importer_mesh(self, importer_mesh:__importermesh__.ImporterMesh)->None: pass


