from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Theme.Theme as __theme__
import py4godot.classes.Object.Object as __object__
import py4godot.classes.Font.Font as __font__
import py4godot.classes.StyleBox.StyleBox as __stylebox__
import py4godot.classes.Texture2D.Texture2D as __texture2d__


class ThemeDB(__object__.Object):
  fallback_changed: BuiltinSignal



  @staticmethod
  def cast(other:__object__.Object)->ThemeDB:pass

  @staticmethod
  def get_instance()->ThemeDB:pass

  @property
  def fallback_base_scale(self)->float: pass
  @fallback_base_scale.setter
  def fallback_base_scale(self,  value:float)->None: pass
  @property
  def fallback_font(self)->__font__.Font: pass
  @fallback_font.setter
  def fallback_font(self,  value:__font__.Font)->None: pass
  @property
  def fallback_font_size(self)->int: pass
  @fallback_font_size.setter
  def fallback_font_size(self,  value:int)->None: pass
  @property
  def fallback_icon(self)->__texture2d__.Texture2D: pass
  @fallback_icon.setter
  def fallback_icon(self,  value:__texture2d__.Texture2D)->None: pass
  @property
  def fallback_stylebox(self)->__stylebox__.StyleBox: pass
  @fallback_stylebox.setter
  def fallback_stylebox(self,  value:__stylebox__.StyleBox)->None: pass
  def get_default_theme(self)->__theme__.Theme: pass

  def get_project_theme(self)->__theme__.Theme: pass

  def set_fallback_base_scale(self, base_scale:float)->None: pass

  def get_fallback_base_scale(self)->float: pass

  def set_fallback_font(self, font:__font__.Font)->None: pass

  def get_fallback_font(self)->__font__.Font: pass

  def set_fallback_font_size(self, font_size:int)->None: pass

  def get_fallback_font_size(self)->int: pass

  def set_fallback_icon(self, icon:__texture2d__.Texture2D)->None: pass

  def get_fallback_icon(self)->__texture2d__.Texture2D: pass

  def set_fallback_stylebox(self, stylebox:__stylebox__.StyleBox)->None: pass

  def get_fallback_stylebox(self)->__stylebox__.StyleBox: pass


