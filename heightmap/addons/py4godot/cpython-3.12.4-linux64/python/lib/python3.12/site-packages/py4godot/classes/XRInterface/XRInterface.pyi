from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.XRInterface.XRInterface as __xrinterface__
import py4godot.classes.RefCounted.RefCounted as __refcounted__


class XRInterface(__refcounted__.RefCounted):
  play_area_changed: BuiltinSignal

  @staticmethod
  def constructor()->XRInterface:pass



  @staticmethod
  def cast(other:__object__.Object)->XRInterface:pass


  @property
  def interface_is_primary(self)->bool: pass
  @interface_is_primary.setter
  def interface_is_primary(self,  value:bool)->None: pass
  @property
  def xr_play_area_mode(self)->int: pass
  @xr_play_area_mode.setter
  def xr_play_area_mode(self,  value:int)->None: pass
  @property
  def environment_blend_mode(self)->int: pass
  @environment_blend_mode.setter
  def environment_blend_mode(self,  value:int)->None: pass
  @property
  def ar_is_anchor_detection_enabled(self)->bool: pass
  @ar_is_anchor_detection_enabled.setter
  def ar_is_anchor_detection_enabled(self,  value:bool)->None: pass
  def get_name(self)->__core__.StringName: pass

  def get_capabilities(self)->int: pass

  def is_primary(self)->bool: pass

  def set_primary(self, primary:bool)->None: pass

  def is_initialized(self)->bool: pass

  def initialize(self)->bool: pass

  def uninitialize(self)->None: pass

  def get_system_info(self)->__core__.Dictionary: pass

  def get_tracking_status(self)->int: pass

  def get_render_target_size(self)->__core__.Vector2: pass

  def get_view_count(self)->int: pass

  def trigger_haptic_pulse(self, action_name:str, tracker_name:__core__.StringName, frequency:float, amplitude:float, duration_sec:float, delay_sec:float)->None: pass

  def supports_play_area_mode(self, mode:int )->bool: pass

  def get_play_area_mode(self)->int: pass

  def set_play_area_mode(self, mode:int )->bool: pass

  def get_play_area(self)->__core__.PackedVector3Array: pass

  def get_anchor_detection_is_enabled(self)->bool: pass

  def set_anchor_detection_is_enabled(self, enable:bool)->None: pass

  def get_camera_feed_id(self)->int: pass

  def is_passthrough_supported(self)->bool: pass

  def is_passthrough_enabled(self)->bool: pass

  def start_passthrough(self)->bool: pass

  def stop_passthrough(self)->None: pass

  def get_transform_for_view(self, view:int, cam_transform:__core__.Transform3D)->__core__.Transform3D: pass

  def get_projection_for_view(self, view:int, aspect:float, near:float, far:float)->__core__.Projection: pass

  def get_supported_environment_blend_modes(self)->__core__.Array: pass

  def set_environment_blend_mode(self, mode:int )->bool: pass

  def get_environment_blend_mode(self)->int: pass


