from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.XRInterface.XRInterface as __xrinterface__
import py4godot.classes.OpenXRInterface.OpenXRInterface as __openxrinterface__


class OpenXRInterface(__xrinterface__.XRInterface):
  session_begun: BuiltinSignal
  session_stopping: BuiltinSignal
  session_focussed: BuiltinSignal
  session_visible: BuiltinSignal
  session_loss_pending: BuiltinSignal
  instance_exiting: BuiltinSignal
  pose_recentered: BuiltinSignal
  refresh_rate_changed: BuiltinSignal

  @staticmethod
  def constructor()->OpenXRInterface:pass



  @staticmethod
  def cast(other:__object__.Object)->OpenXRInterface:pass


  @property
  def display_refresh_rate(self)->float: pass
  @display_refresh_rate.setter
  def display_refresh_rate(self,  value:float)->None: pass
  @property
  def render_target_size_multiplier(self)->float: pass
  @render_target_size_multiplier.setter
  def render_target_size_multiplier(self,  value:float)->None: pass
  @property
  def foveation_level(self)->int: pass
  @foveation_level.setter
  def foveation_level(self,  value:int)->None: pass
  @property
  def foveation_dynamic(self)->bool: pass
  @foveation_dynamic.setter
  def foveation_dynamic(self,  value:bool)->None: pass
  @property
  def vrs_min_radius(self)->float: pass
  @vrs_min_radius.setter
  def vrs_min_radius(self,  value:float)->None: pass
  @property
  def vrs_strength(self)->float: pass
  @vrs_strength.setter
  def vrs_strength(self,  value:float)->None: pass
  def get_display_refresh_rate(self)->float: pass

  def set_display_refresh_rate(self, refresh_rate:float)->None: pass

  def get_render_target_size_multiplier(self)->float: pass

  def set_render_target_size_multiplier(self, multiplier:float)->None: pass

  def is_foveation_supported(self)->bool: pass

  def get_foveation_level(self)->int: pass

  def set_foveation_level(self, foveation_level:int)->None: pass

  def get_foveation_dynamic(self)->bool: pass

  def set_foveation_dynamic(self, foveation_dynamic:bool)->None: pass

  def is_action_set_active(self, name:str)->bool: pass

  def set_action_set_active(self, name:str, active:bool)->None: pass

  def get_action_sets(self)->__core__.Array: pass

  def get_available_display_refresh_rates(self)->__core__.Array: pass

  def set_motion_range(self, hand:int , motion_range:int )->None: pass

  def get_motion_range(self, hand:int )->int: pass

  def get_hand_tracking_source(self, hand:int )->int: pass

  def get_hand_joint_flags(self, hand:int , joint:int )->int: pass

  def get_hand_joint_rotation(self, hand:int , joint:int )->__core__.Quaternion: pass

  def get_hand_joint_position(self, hand:int , joint:int )->__core__.Vector3: pass

  def get_hand_joint_radius(self, hand:int , joint:int )->float: pass

  def get_hand_joint_linear_velocity(self, hand:int , joint:int )->__core__.Vector3: pass

  def get_hand_joint_angular_velocity(self, hand:int , joint:int )->__core__.Vector3: pass

  def is_hand_tracking_supported(self)->bool: pass

  def is_hand_interaction_supported(self)->bool: pass

  def is_eye_gaze_interaction_supported(self)->bool: pass

  def get_vrs_min_radius(self)->float: pass

  def set_vrs_min_radius(self, radius:float)->None: pass

  def get_vrs_strength(self)->float: pass

  def set_vrs_strength(self, strength:float)->None: pass


