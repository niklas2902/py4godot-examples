from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Resource.Resource as __resource__
import py4godot.classes.Image.Image as __image__


class Image(__resource__.Resource):

  @staticmethod
  def constructor()->Image:pass



  @staticmethod
  def cast(other:__object__.Object)->Image:pass


  @property
  def data(self)->__core__.Dictionary: pass
  @data.setter
  def data(self,  value:__core__.Dictionary)->None: pass
  def get_width(self)->int: pass

  def get_height(self)->int: pass

  def get_size(self)->__core__.Vector2i: pass

  def has_mipmaps(self)->bool: pass

  def get_format(self)->int: pass

  def get_data(self)->__core__.PackedByteArray: pass

  def get_data_size(self)->int: pass

  def convert(self, format:int )->None: pass

  def get_mipmap_count(self)->int: pass

  def get_mipmap_offset(self, mipmap:int)->int: pass

  def resize_to_po2(self, square:bool=False, interpolation:int =1)->None: pass

  def resize(self, width:int, height:int, interpolation:int =1)->None: pass

  def shrink_x2(self)->None: pass

  def crop(self, width:int, height:int)->None: pass

  def flip_x(self)->None: pass

  def flip_y(self)->None: pass

  def generate_mipmaps(self, renormalize:bool=False)->int: pass

  def clear_mipmaps(self)->None: pass

  @staticmethod
  def create(width:int, height:int, use_mipmaps:bool, format:int )->__image__.Image: pass

  @staticmethod
  def create_empty(width:int, height:int, use_mipmaps:bool, format:int )->__image__.Image: pass

  @staticmethod
  def create_from_data(width:int, height:int, use_mipmaps:bool, format:int , data:__core__.PackedByteArray)->__image__.Image: pass

  def set_data(self, width:int, height:int, use_mipmaps:bool, format:int , data:__core__.PackedByteArray)->None: pass

  def is_empty(self)->bool: pass

  def load(self, path:str)->int: pass

  @staticmethod
  def load_from_file(path:str)->__image__.Image: pass

  def save_png(self, path:str)->int: pass

  def save_png_to_buffer(self)->__core__.PackedByteArray: pass

  def save_jpg(self, path:str, quality:float=0.75)->int: pass

  def save_jpg_to_buffer(self, quality:float=0.75)->__core__.PackedByteArray: pass

  def save_exr(self, path:str, grayscale:bool=False)->int: pass

  def save_exr_to_buffer(self, grayscale:bool=False)->__core__.PackedByteArray: pass

  def save_webp(self, path:str, lossy:bool=False, quality:float=0.75)->int: pass

  def save_webp_to_buffer(self, lossy:bool=False, quality:float=0.75)->__core__.PackedByteArray: pass

  def detect_alpha(self)->int: pass

  def is_invisible(self)->bool: pass

  def detect_used_channels(self, source:int =0)->int: pass

  def compress(self, mode:int , source:int =0, astc_format:int =0)->int: pass

  def compress_from_channels(self, mode:int , channels:int , astc_format:int =0)->int: pass

  def decompress(self)->int: pass

  def is_compressed(self)->bool: pass

  def rotate_90(self, direction:int )->None: pass

  def rotate_180(self)->None: pass

  def fix_alpha_edges(self)->None: pass

  def premultiply_alpha(self)->None: pass

  def srgb_to_linear(self)->None: pass

  def normal_map_to_xy(self)->None: pass

  def rgbe_to_srgb(self)->__image__.Image: pass

  def bump_map_to_normal_map(self, bump_scale:float=1.0)->None: pass

  def compute_image_metrics(self, compared_image:__image__.Image, use_luma:bool)->__core__.Dictionary: pass

  def blit_rect(self, src:__image__.Image, src_rect:__core__.Rect2i, dst:__core__.Vector2i)->None: pass

  def blit_rect_mask(self, src:__image__.Image, mask:__image__.Image, src_rect:__core__.Rect2i, dst:__core__.Vector2i)->None: pass

  def blend_rect(self, src:__image__.Image, src_rect:__core__.Rect2i, dst:__core__.Vector2i)->None: pass

  def blend_rect_mask(self, src:__image__.Image, mask:__image__.Image, src_rect:__core__.Rect2i, dst:__core__.Vector2i)->None: pass

  def fill(self, color:__core__.Color)->None: pass

  def fill_rect(self, rect:__core__.Rect2i, color:__core__.Color)->None: pass

  def get_used_rect(self)->__core__.Rect2i: pass

  def get_region(self, region:__core__.Rect2i)->__image__.Image: pass

  def copy_from(self, src:__image__.Image)->None: pass

  def get_pixelv(self, point:__core__.Vector2i)->__core__.Color: pass

  def get_pixel(self, x:int, y:int)->__core__.Color: pass

  def set_pixelv(self, point:__core__.Vector2i, color:__core__.Color)->None: pass

  def set_pixel(self, x:int, y:int, color:__core__.Color)->None: pass

  def adjust_bcs(self, brightness:float, contrast:float, saturation:float)->None: pass

  def load_png_from_buffer(self, buffer:__core__.PackedByteArray)->int: pass

  def load_jpg_from_buffer(self, buffer:__core__.PackedByteArray)->int: pass

  def load_webp_from_buffer(self, buffer:__core__.PackedByteArray)->int: pass

  def load_tga_from_buffer(self, buffer:__core__.PackedByteArray)->int: pass

  def load_bmp_from_buffer(self, buffer:__core__.PackedByteArray)->int: pass

  def load_ktx_from_buffer(self, buffer:__core__.PackedByteArray)->int: pass

  def load_svg_from_buffer(self, buffer:__core__.PackedByteArray, scale:float=1.0)->int: pass

  def load_svg_from_string(self, svg_str:str, scale:float=1.0)->int: pass


