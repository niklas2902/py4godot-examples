from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.XRHandTracker.XRHandTracker as __xrhandtracker__
import py4godot.classes.XRPositionalTracker.XRPositionalTracker as __xrpositionaltracker__


class XRHandTracker(__xrpositionaltracker__.XRPositionalTracker):

  @staticmethod
  def constructor()->XRHandTracker:pass



  @staticmethod
  def cast(other:__object__.Object)->XRHandTracker:pass


  @property
  def has_tracking_data(self)->bool: pass
  @has_tracking_data.setter
  def has_tracking_data(self,  value:bool)->None: pass
  @property
  def hand_tracking_source(self)->int: pass
  @hand_tracking_source.setter
  def hand_tracking_source(self,  value:int)->None: pass
  def set_has_tracking_data(self, has_data:bool)->None: pass

  def get_has_tracking_data(self)->bool: pass

  def set_hand_tracking_source(self, source:int )->None: pass

  def get_hand_tracking_source(self)->int: pass

  def set_hand_joint_flags(self, joint:int , flags:int)->None: pass

  def get_hand_joint_flags(self, joint:int )->int: pass

  def set_hand_joint_transform(self, joint:int , transform:__core__.Transform3D)->None: pass

  def get_hand_joint_transform(self, joint:int )->__core__.Transform3D: pass

  def set_hand_joint_radius(self, joint:int , radius:float)->None: pass

  def get_hand_joint_radius(self, joint:int )->float: pass

  def set_hand_joint_linear_velocity(self, joint:int , linear_velocity:__core__.Vector3)->None: pass

  def get_hand_joint_linear_velocity(self, joint:int )->__core__.Vector3: pass

  def set_hand_joint_angular_velocity(self, joint:int , angular_velocity:__core__.Vector3)->None: pass

  def get_hand_joint_angular_velocity(self, joint:int )->__core__.Vector3: pass


