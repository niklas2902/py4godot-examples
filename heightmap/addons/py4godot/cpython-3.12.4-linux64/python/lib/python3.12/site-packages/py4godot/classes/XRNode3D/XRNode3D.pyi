from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Node3D.Node3D as __node3d__
import py4godot.classes.XRPose.XRPose as __xrpose__


class XRNode3D(__node3d__.Node3D):
  tracking_changed: BuiltinSignal

  @staticmethod
  def constructor()->XRNode3D:pass



  @staticmethod
  def cast(other:__object__.Object)->XRNode3D:pass


  @property
  def tracker(self)->str: pass
  @tracker.setter
  def tracker(self,  value:str)->None: pass
  @property
  def pose(self)->str: pass
  @pose.setter
  def pose(self,  value:str)->None: pass
  @property
  def show_when_tracked(self)->bool: pass
  @show_when_tracked.setter
  def show_when_tracked(self,  value:bool)->None: pass
  def set_tracker(self, tracker_name:__core__.StringName)->None: pass

  def get_tracker(self)->__core__.StringName: pass

  def set_pose_name(self, pose:__core__.StringName)->None: pass

  def get_pose_name(self)->__core__.StringName: pass

  def set_show_when_tracked(self, show:bool)->None: pass

  def get_show_when_tracked(self)->bool: pass

  def get_is_active(self)->bool: pass

  def get_has_tracking_data(self)->bool: pass

  def get_pose(self)->__xrpose__.XRPose: pass

  def trigger_haptic_pulse(self, action_name:str, frequency:float, amplitude:float, duration_sec:float, delay_sec:float)->None: pass


