from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.PhysicsDirectBodyState3D.PhysicsDirectBodyState3D as __physicsdirectbodystate3d__
import py4godot.classes.PhysicsServer3DRenderingServerHandler.PhysicsServer3DRenderingServerHandler as __physicsserver3drenderingserverhandler__
import py4godot.classes.Object.Object as __object__
import py4godot.classes.PhysicsTestMotionParameters3D.PhysicsTestMotionParameters3D as __physicstestmotionparameters3d__
import py4godot.classes.PhysicsServer3D.PhysicsServer3D as __physicsserver3d__
import py4godot.classes.PhysicsDirectSpaceState3D.PhysicsDirectSpaceState3D as __physicsdirectspacestate3d__
import py4godot.classes.PhysicsTestMotionResult3D.PhysicsTestMotionResult3D as __physicstestmotionresult3d__


class PhysicsServer3D(__object__.Object):



  @staticmethod
  def cast(other:__object__.Object)->PhysicsServer3D:pass

  @staticmethod
  def get_instance()->PhysicsServer3D:pass

  def world_boundary_shape_create(self)->__core__.RID: pass

  def separation_ray_shape_create(self)->__core__.RID: pass

  def sphere_shape_create(self)->__core__.RID: pass

  def box_shape_create(self)->__core__.RID: pass

  def capsule_shape_create(self)->__core__.RID: pass

  def cylinder_shape_create(self)->__core__.RID: pass

  def convex_polygon_shape_create(self)->__core__.RID: pass

  def concave_polygon_shape_create(self)->__core__.RID: pass

  def heightmap_shape_create(self)->__core__.RID: pass

  def custom_shape_create(self)->__core__.RID: pass

  def shape_set_data(self, shape:__core__.RID, data:object)->None: pass

  def shape_set_margin(self, shape:__core__.RID, margin:float)->None: pass

  def shape_get_type(self, shape:__core__.RID)->int: pass

  def shape_get_data(self, shape:__core__.RID)->object: pass

  def shape_get_margin(self, shape:__core__.RID)->float: pass

  def space_create(self)->__core__.RID: pass

  def space_set_active(self, space:__core__.RID, active:bool)->None: pass

  def space_is_active(self, space:__core__.RID)->bool: pass

  def space_set_param(self, space:__core__.RID, param:int , value:float)->None: pass

  def space_get_param(self, space:__core__.RID, param:int )->float: pass

  def space_get_direct_state(self, space:__core__.RID)->__physicsdirectspacestate3d__.PhysicsDirectSpaceState3D: pass

  def area_create(self)->__core__.RID: pass

  def area_set_space(self, area:__core__.RID, space:__core__.RID)->None: pass

  def area_get_space(self, area:__core__.RID)->__core__.RID: pass

  def area_add_shape(self, area:__core__.RID, shape:__core__.RID, transform:__core__.Transform3D= __core__.Transform3D.new0(), disabled:bool=False)->None: pass

  def area_set_shape(self, area:__core__.RID, shape_idx:int, shape:__core__.RID)->None: pass

  def area_set_shape_transform(self, area:__core__.RID, shape_idx:int, transform:__core__.Transform3D)->None: pass

  def area_set_shape_disabled(self, area:__core__.RID, shape_idx:int, disabled:bool)->None: pass

  def area_get_shape_count(self, area:__core__.RID)->int: pass

  def area_get_shape(self, area:__core__.RID, shape_idx:int)->__core__.RID: pass

  def area_get_shape_transform(self, area:__core__.RID, shape_idx:int)->__core__.Transform3D: pass

  def area_remove_shape(self, area:__core__.RID, shape_idx:int)->None: pass

  def area_clear_shapes(self, area:__core__.RID)->None: pass

  def area_set_collision_layer(self, area:__core__.RID, layer:int)->None: pass

  def area_get_collision_layer(self, area:__core__.RID)->int: pass

  def area_set_collision_mask(self, area:__core__.RID, mask:int)->None: pass

  def area_get_collision_mask(self, area:__core__.RID)->int: pass

  def area_set_param(self, area:__core__.RID, param:int , value:object)->None: pass

  def area_set_transform(self, area:__core__.RID, transform:__core__.Transform3D)->None: pass

  def area_get_param(self, area:__core__.RID, param:int )->object: pass

  def area_get_transform(self, area:__core__.RID)->__core__.Transform3D: pass

  def area_attach_object_instance_id(self, area:__core__.RID, id:int)->None: pass

  def area_get_object_instance_id(self, area:__core__.RID)->int: pass

  def area_set_monitor_callback(self, area:__core__.RID, callback:__core__.Callable)->None: pass

  def area_set_area_monitor_callback(self, area:__core__.RID, callback:__core__.Callable)->None: pass

  def area_set_monitorable(self, area:__core__.RID, monitorable:bool)->None: pass

  def area_set_ray_pickable(self, area:__core__.RID, enable:bool)->None: pass

  def body_create(self)->__core__.RID: pass

  def body_set_space(self, body:__core__.RID, space:__core__.RID)->None: pass

  def body_get_space(self, body:__core__.RID)->__core__.RID: pass

  def body_set_mode(self, body:__core__.RID, mode:int )->None: pass

  def body_get_mode(self, body:__core__.RID)->int: pass

  def body_set_collision_layer(self, body:__core__.RID, layer:int)->None: pass

  def body_get_collision_layer(self, body:__core__.RID)->int: pass

  def body_set_collision_mask(self, body:__core__.RID, mask:int)->None: pass

  def body_get_collision_mask(self, body:__core__.RID)->int: pass

  def body_set_collision_priority(self, body:__core__.RID, priority:float)->None: pass

  def body_get_collision_priority(self, body:__core__.RID)->float: pass

  def body_add_shape(self, body:__core__.RID, shape:__core__.RID, transform:__core__.Transform3D= __core__.Transform3D.new0(), disabled:bool=False)->None: pass

  def body_set_shape(self, body:__core__.RID, shape_idx:int, shape:__core__.RID)->None: pass

  def body_set_shape_transform(self, body:__core__.RID, shape_idx:int, transform:__core__.Transform3D)->None: pass

  def body_set_shape_disabled(self, body:__core__.RID, shape_idx:int, disabled:bool)->None: pass

  def body_get_shape_count(self, body:__core__.RID)->int: pass

  def body_get_shape(self, body:__core__.RID, shape_idx:int)->__core__.RID: pass

  def body_get_shape_transform(self, body:__core__.RID, shape_idx:int)->__core__.Transform3D: pass

  def body_remove_shape(self, body:__core__.RID, shape_idx:int)->None: pass

  def body_clear_shapes(self, body:__core__.RID)->None: pass

  def body_attach_object_instance_id(self, body:__core__.RID, id:int)->None: pass

  def body_get_object_instance_id(self, body:__core__.RID)->int: pass

  def body_set_enable_continuous_collision_detection(self, body:__core__.RID, enable:bool)->None: pass

  def body_is_continuous_collision_detection_enabled(self, body:__core__.RID)->bool: pass

  def body_set_param(self, body:__core__.RID, param:int , value:object)->None: pass

  def body_get_param(self, body:__core__.RID, param:int )->object: pass

  def body_reset_mass_properties(self, body:__core__.RID)->None: pass

  def body_set_state(self, body:__core__.RID, state:int , value:object)->None: pass

  def body_get_state(self, body:__core__.RID, state:int )->object: pass

  def body_apply_central_impulse(self, body:__core__.RID, impulse:__core__.Vector3)->None: pass

  def body_apply_impulse(self, body:__core__.RID, impulse:__core__.Vector3, position:__core__.Vector3= __core__.Vector3.new0())->None: pass

  def body_apply_torque_impulse(self, body:__core__.RID, impulse:__core__.Vector3)->None: pass

  def body_apply_central_force(self, body:__core__.RID, force:__core__.Vector3)->None: pass

  def body_apply_force(self, body:__core__.RID, force:__core__.Vector3, position:__core__.Vector3= __core__.Vector3.new0())->None: pass

  def body_apply_torque(self, body:__core__.RID, torque:__core__.Vector3)->None: pass

  def body_add_constant_central_force(self, body:__core__.RID, force:__core__.Vector3)->None: pass

  def body_add_constant_force(self, body:__core__.RID, force:__core__.Vector3, position:__core__.Vector3= __core__.Vector3.new0())->None: pass

  def body_add_constant_torque(self, body:__core__.RID, torque:__core__.Vector3)->None: pass

  def body_set_constant_force(self, body:__core__.RID, force:__core__.Vector3)->None: pass

  def body_get_constant_force(self, body:__core__.RID)->__core__.Vector3: pass

  def body_set_constant_torque(self, body:__core__.RID, torque:__core__.Vector3)->None: pass

  def body_get_constant_torque(self, body:__core__.RID)->__core__.Vector3: pass

  def body_set_axis_velocity(self, body:__core__.RID, axis_velocity:__core__.Vector3)->None: pass

  def body_set_axis_lock(self, body:__core__.RID, axis:int , lock:bool)->None: pass

  def body_is_axis_locked(self, body:__core__.RID, axis:int )->bool: pass

  def body_add_collision_exception(self, body:__core__.RID, excepted_body:__core__.RID)->None: pass

  def body_remove_collision_exception(self, body:__core__.RID, excepted_body:__core__.RID)->None: pass

  def body_set_max_contacts_reported(self, body:__core__.RID, amount:int)->None: pass

  def body_get_max_contacts_reported(self, body:__core__.RID)->int: pass

  def body_set_omit_force_integration(self, body:__core__.RID, enable:bool)->None: pass

  def body_is_omitting_force_integration(self, body:__core__.RID)->bool: pass

  def body_set_state_sync_callback(self, body:__core__.RID, callable:__core__.Callable)->None: pass

  def body_set_force_integration_callback(self, body:__core__.RID, callable:__core__.Callable, userdata:object=None)->None: pass

  def body_set_ray_pickable(self, body:__core__.RID, enable:bool)->None: pass

  def body_test_motion(self, body:__core__.RID, parameters:__physicstestmotionparameters3d__.PhysicsTestMotionParameters3D, result:__physicstestmotionresult3d__.PhysicsTestMotionResult3D= __physicstestmotionresult3d__.PhysicsTestMotionResult3D.constructor())->bool: pass

  def body_get_direct_state(self, body:__core__.RID)->__physicsdirectbodystate3d__.PhysicsDirectBodyState3D: pass

  def soft_body_create(self)->__core__.RID: pass

  def soft_body_update_rendering_server(self, body:__core__.RID, rendering_server_handler:__physicsserver3drenderingserverhandler__.PhysicsServer3DRenderingServerHandler)->None: pass

  def soft_body_set_space(self, body:__core__.RID, space:__core__.RID)->None: pass

  def soft_body_get_space(self, body:__core__.RID)->__core__.RID: pass

  def soft_body_set_mesh(self, body:__core__.RID, mesh:__core__.RID)->None: pass

  def soft_body_get_bounds(self, body:__core__.RID)->__core__.AABB: pass

  def soft_body_set_collision_layer(self, body:__core__.RID, layer:int)->None: pass

  def soft_body_get_collision_layer(self, body:__core__.RID)->int: pass

  def soft_body_set_collision_mask(self, body:__core__.RID, mask:int)->None: pass

  def soft_body_get_collision_mask(self, body:__core__.RID)->int: pass

  def soft_body_add_collision_exception(self, body:__core__.RID, body_b:__core__.RID)->None: pass

  def soft_body_remove_collision_exception(self, body:__core__.RID, body_b:__core__.RID)->None: pass

  def soft_body_set_state(self, body:__core__.RID, state:int , variant:object)->None: pass

  def soft_body_get_state(self, body:__core__.RID, state:int )->object: pass

  def soft_body_set_transform(self, body:__core__.RID, transform:__core__.Transform3D)->None: pass

  def soft_body_set_ray_pickable(self, body:__core__.RID, enable:bool)->None: pass

  def soft_body_set_simulation_precision(self, body:__core__.RID, simulation_precision:int)->None: pass

  def soft_body_get_simulation_precision(self, body:__core__.RID)->int: pass

  def soft_body_set_total_mass(self, body:__core__.RID, total_mass:float)->None: pass

  def soft_body_get_total_mass(self, body:__core__.RID)->float: pass

  def soft_body_set_linear_stiffness(self, body:__core__.RID, stiffness:float)->None: pass

  def soft_body_get_linear_stiffness(self, body:__core__.RID)->float: pass

  def soft_body_set_pressure_coefficient(self, body:__core__.RID, pressure_coefficient:float)->None: pass

  def soft_body_get_pressure_coefficient(self, body:__core__.RID)->float: pass

  def soft_body_set_damping_coefficient(self, body:__core__.RID, damping_coefficient:float)->None: pass

  def soft_body_get_damping_coefficient(self, body:__core__.RID)->float: pass

  def soft_body_set_drag_coefficient(self, body:__core__.RID, drag_coefficient:float)->None: pass

  def soft_body_get_drag_coefficient(self, body:__core__.RID)->float: pass

  def soft_body_move_point(self, body:__core__.RID, point_index:int, global_position:__core__.Vector3)->None: pass

  def soft_body_get_point_global_position(self, body:__core__.RID, point_index:int)->__core__.Vector3: pass

  def soft_body_remove_all_pinned_points(self, body:__core__.RID)->None: pass

  def soft_body_pin_point(self, body:__core__.RID, point_index:int, pin:bool)->None: pass

  def soft_body_is_point_pinned(self, body:__core__.RID, point_index:int)->bool: pass

  def joint_create(self)->__core__.RID: pass

  def joint_clear(self, joint:__core__.RID)->None: pass

  def joint_make_pin(self, joint:__core__.RID, body_A:__core__.RID, local_A:__core__.Vector3, body_B:__core__.RID, local_B:__core__.Vector3)->None: pass

  def pin_joint_set_param(self, joint:__core__.RID, param:int , value:float)->None: pass

  def pin_joint_get_param(self, joint:__core__.RID, param:int )->float: pass

  def pin_joint_set_local_a(self, joint:__core__.RID, local_A:__core__.Vector3)->None: pass

  def pin_joint_get_local_a(self, joint:__core__.RID)->__core__.Vector3: pass

  def pin_joint_set_local_b(self, joint:__core__.RID, local_B:__core__.Vector3)->None: pass

  def pin_joint_get_local_b(self, joint:__core__.RID)->__core__.Vector3: pass

  def joint_make_hinge(self, joint:__core__.RID, body_A:__core__.RID, hinge_A:__core__.Transform3D, body_B:__core__.RID, hinge_B:__core__.Transform3D)->None: pass

  def hinge_joint_set_param(self, joint:__core__.RID, param:int , value:float)->None: pass

  def hinge_joint_get_param(self, joint:__core__.RID, param:int )->float: pass

  def hinge_joint_set_flag(self, joint:__core__.RID, flag:int , enabled:bool)->None: pass

  def hinge_joint_get_flag(self, joint:__core__.RID, flag:int )->bool: pass

  def joint_make_slider(self, joint:__core__.RID, body_A:__core__.RID, local_ref_A:__core__.Transform3D, body_B:__core__.RID, local_ref_B:__core__.Transform3D)->None: pass

  def slider_joint_set_param(self, joint:__core__.RID, param:int , value:float)->None: pass

  def slider_joint_get_param(self, joint:__core__.RID, param:int )->float: pass

  def joint_make_cone_twist(self, joint:__core__.RID, body_A:__core__.RID, local_ref_A:__core__.Transform3D, body_B:__core__.RID, local_ref_B:__core__.Transform3D)->None: pass

  def cone_twist_joint_set_param(self, joint:__core__.RID, param:int , value:float)->None: pass

  def cone_twist_joint_get_param(self, joint:__core__.RID, param:int )->float: pass

  def joint_get_type(self, joint:__core__.RID)->int: pass

  def joint_set_solver_priority(self, joint:__core__.RID, priority:int)->None: pass

  def joint_get_solver_priority(self, joint:__core__.RID)->int: pass

  def joint_disable_collisions_between_bodies(self, joint:__core__.RID, disable:bool)->None: pass

  def joint_is_disabled_collisions_between_bodies(self, joint:__core__.RID)->bool: pass

  def joint_make_generic_6dof(self, joint:__core__.RID, body_A:__core__.RID, local_ref_A:__core__.Transform3D, body_B:__core__.RID, local_ref_B:__core__.Transform3D)->None: pass

  def generic_6dof_joint_set_param(self, joint:__core__.RID, axis:int , param:int , value:float)->None: pass

  def generic_6dof_joint_get_param(self, joint:__core__.RID, axis:int , param:int )->float: pass

  def generic_6dof_joint_set_flag(self, joint:__core__.RID, axis:int , flag:int , enable:bool)->None: pass

  def generic_6dof_joint_get_flag(self, joint:__core__.RID, axis:int , flag:int )->bool: pass

  def free_rid(self, rid:__core__.RID)->None: pass

  def set_active(self, active:bool)->None: pass

  def get_process_info(self, process_info:int )->int: pass


