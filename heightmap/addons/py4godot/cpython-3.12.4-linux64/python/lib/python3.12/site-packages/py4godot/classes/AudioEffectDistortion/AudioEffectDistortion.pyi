from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.AudioEffect.AudioEffect as __audioeffect__
import py4godot.classes.AudioEffectDistortion.AudioEffectDistortion as __audioeffectdistortion__


class AudioEffectDistortion(__audioeffect__.AudioEffect):

  @staticmethod
  def constructor()->AudioEffectDistortion:pass



  @staticmethod
  def cast(other:__object__.Object)->AudioEffectDistortion:pass


  @property
  def mode(self)->int: pass
  @mode.setter
  def mode(self,  value:int)->None: pass
  @property
  def pre_gain(self)->float: pass
  @pre_gain.setter
  def pre_gain(self,  value:float)->None: pass
  @property
  def keep_hf_hz(self)->float: pass
  @keep_hf_hz.setter
  def keep_hf_hz(self,  value:float)->None: pass
  @property
  def drive(self)->float: pass
  @drive.setter
  def drive(self,  value:float)->None: pass
  @property
  def post_gain(self)->float: pass
  @post_gain.setter
  def post_gain(self,  value:float)->None: pass
  def set_mode(self, mode:int )->None: pass

  def get_mode(self)->int: pass

  def set_pre_gain(self, pre_gain:float)->None: pass

  def get_pre_gain(self)->float: pass

  def set_keep_hf_hz(self, keep_hf_hz:float)->None: pass

  def get_keep_hf_hz(self)->float: pass

  def set_drive(self, drive:float)->None: pass

  def get_drive(self)->float: pass

  def set_post_gain(self, post_gain:float)->None: pass

  def get_post_gain(self)->float: pass


