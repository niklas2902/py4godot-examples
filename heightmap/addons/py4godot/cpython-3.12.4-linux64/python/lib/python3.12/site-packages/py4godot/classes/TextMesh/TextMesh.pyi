from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.PrimitiveMesh.PrimitiveMesh as __primitivemesh__
import py4godot.classes.TextServer.TextServer as __textserver__
import py4godot.classes.Font.Font as __font__


class TextMesh(__primitivemesh__.PrimitiveMesh):

  @staticmethod
  def constructor()->TextMesh:pass



  @staticmethod
  def cast(other:__object__.Object)->TextMesh:pass


  @property
  def text(self)->str: pass
  @text.setter
  def text(self,  value:str)->None: pass
  @property
  def font(self)->__font__.Font: pass
  @font.setter
  def font(self,  value:__font__.Font)->None: pass
  @property
  def font_size(self)->int: pass
  @font_size.setter
  def font_size(self,  value:int)->None: pass
  @property
  def horizontal_alignment(self)->int: pass
  @horizontal_alignment.setter
  def horizontal_alignment(self,  value:int)->None: pass
  @property
  def vertical_alignment(self)->int: pass
  @vertical_alignment.setter
  def vertical_alignment(self,  value:int)->None: pass
  @property
  def uppercase(self)->bool: pass
  @uppercase.setter
  def uppercase(self,  value:bool)->None: pass
  @property
  def line_spacing(self)->float: pass
  @line_spacing.setter
  def line_spacing(self,  value:float)->None: pass
  @property
  def autowrap_mode(self)->int: pass
  @autowrap_mode.setter
  def autowrap_mode(self,  value:int)->None: pass
  @property
  def justification_flags(self)->int: pass
  @justification_flags.setter
  def justification_flags(self,  value:int)->None: pass
  @property
  def pixel_size(self)->float: pass
  @pixel_size.setter
  def pixel_size(self,  value:float)->None: pass
  @property
  def curve_step(self)->float: pass
  @curve_step.setter
  def curve_step(self,  value:float)->None: pass
  @property
  def depth(self)->float: pass
  @depth.setter
  def depth(self,  value:float)->None: pass
  @property
  def width(self)->float: pass
  @width.setter
  def width(self,  value:float)->None: pass
  @property
  def offset(self)->__core__.Vector2: pass
  @offset.setter
  def offset(self,  value:__core__.Vector2)->None: pass
  @property
  def text_direction(self)->int: pass
  @text_direction.setter
  def text_direction(self,  value:int)->None: pass
  @property
  def language(self)->str: pass
  @language.setter
  def language(self,  value:str)->None: pass
  @property
  def structured_text_bidi_override(self)->int: pass
  @structured_text_bidi_override.setter
  def structured_text_bidi_override(self,  value:int)->None: pass
  @property
  def structured_text_bidi_override_options(self)->__core__.Array: pass
  @structured_text_bidi_override_options.setter
  def structured_text_bidi_override_options(self,  value:__core__.Array)->None: pass
  def set_horizontal_alignment(self, alignment:int )->None: pass

  def get_horizontal_alignment(self)->int: pass

  def set_vertical_alignment(self, alignment:int )->None: pass

  def get_vertical_alignment(self)->int: pass

  def set_text(self, text:str)->None: pass

  def get_text(self)->str: pass

  def set_font(self, font:__font__.Font)->None: pass

  def get_font(self)->__font__.Font: pass

  def set_font_size(self, font_size:int)->None: pass

  def get_font_size(self)->int: pass

  def set_line_spacing(self, line_spacing:float)->None: pass

  def get_line_spacing(self)->float: pass

  def set_autowrap_mode(self, autowrap_mode:int )->None: pass

  def get_autowrap_mode(self)->int: pass

  def set_justification_flags(self, justification_flags:int)->None: pass

  def get_justification_flags(self)->int: pass

  def set_depth(self, depth:float)->None: pass

  def get_depth(self)->float: pass

  def set_width(self, width:float)->None: pass

  def get_width(self)->float: pass

  def set_pixel_size(self, pixel_size:float)->None: pass

  def get_pixel_size(self)->float: pass

  def set_offset(self, offset:__core__.Vector2)->None: pass

  def get_offset(self)->__core__.Vector2: pass

  def set_curve_step(self, curve_step:float)->None: pass

  def get_curve_step(self)->float: pass

  def set_text_direction(self, direction:int )->None: pass

  def get_text_direction(self)->int: pass

  def set_language(self, language:str)->None: pass

  def get_language(self)->str: pass

  def set_structured_text_bidi_override(self, parser:int )->None: pass

  def get_structured_text_bidi_override(self)->int: pass

  def set_structured_text_bidi_override_options(self, args:__core__.Array)->None: pass

  def get_structured_text_bidi_override_options(self)->__core__.Array: pass

  def set_uppercase(self, enable:bool)->None: pass

  def is_uppercase(self)->bool: pass


