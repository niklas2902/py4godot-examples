from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Node3D.Node3D as __node3d__


class BoneAttachment3D(__node3d__.Node3D):

  @staticmethod
  def constructor()->BoneAttachment3D:pass



  @staticmethod
  def cast(other:__object__.Object)->BoneAttachment3D:pass


  @property
  def bone_name(self)->__core__.StringName: pass
  @bone_name.setter
  def bone_name(self,  value:__core__.StringName)->None: pass
  @property
  def bone_idx(self)->int: pass
  @bone_idx.setter
  def bone_idx(self,  value:int)->None: pass
  @property
  def override_pose(self)->bool: pass
  @override_pose.setter
  def override_pose(self,  value:bool)->None: pass
  def set_bone_name(self, bone_name:str)->None: pass

  def get_bone_name(self)->str: pass

  def set_bone_idx(self, bone_idx:int)->None: pass

  def get_bone_idx(self)->int: pass

  def on_skeleton_update(self)->None: pass

  def set_override_pose(self, override_pose:bool)->None: pass

  def get_override_pose(self)->bool: pass

  def set_use_external_skeleton(self, use_external_skeleton:bool)->None: pass

  def get_use_external_skeleton(self)->bool: pass

  def set_external_skeleton(self, external_skeleton:__core__.NodePath)->None: pass

  def get_external_skeleton(self)->__core__.NodePath: pass


