from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.MeshInstance3D.MeshInstance3D as __meshinstance3d__
import py4godot.classes.Node.Node as __node__
import py4godot.classes.SoftBody3D.SoftBody3D as __softbody3d__


class SoftBody3D(__meshinstance3d__.MeshInstance3D):

  @staticmethod
  def constructor()->SoftBody3D:pass



  @staticmethod
  def cast(other:__object__.Object)->SoftBody3D:pass


  @property
  def collision_layer(self)->int: pass
  @collision_layer.setter
  def collision_layer(self,  value:int)->None: pass
  @property
  def collision_mask(self)->int: pass
  @collision_mask.setter
  def collision_mask(self,  value:int)->None: pass
  @property
  def parent_collision_ignore(self)->__core__.NodePath: pass
  @parent_collision_ignore.setter
  def parent_collision_ignore(self,  value:__core__.NodePath)->None: pass
  @property
  def simulation_precision(self)->int: pass
  @simulation_precision.setter
  def simulation_precision(self,  value:int)->None: pass
  @property
  def total_mass(self)->float: pass
  @total_mass.setter
  def total_mass(self,  value:float)->None: pass
  @property
  def linear_stiffness(self)->float: pass
  @linear_stiffness.setter
  def linear_stiffness(self,  value:float)->None: pass
  @property
  def pressure_coefficient(self)->float: pass
  @pressure_coefficient.setter
  def pressure_coefficient(self,  value:float)->None: pass
  @property
  def damping_coefficient(self)->float: pass
  @damping_coefficient.setter
  def damping_coefficient(self,  value:float)->None: pass
  @property
  def drag_coefficient(self)->float: pass
  @drag_coefficient.setter
  def drag_coefficient(self,  value:float)->None: pass
  @property
  def ray_pickable(self)->bool: pass
  @ray_pickable.setter
  def ray_pickable(self,  value:bool)->None: pass
  @property
  def disable_mode(self)->int: pass
  @disable_mode.setter
  def disable_mode(self,  value:int)->None: pass
  def get_physics_rid(self)->__core__.RID: pass

  def set_collision_mask(self, collision_mask:int)->None: pass

  def get_collision_mask(self)->int: pass

  def set_collision_layer(self, collision_layer:int)->None: pass

  def get_collision_layer(self)->int: pass

  def set_collision_mask_value(self, layer_number:int, value:bool)->None: pass

  def get_collision_mask_value(self, layer_number:int)->bool: pass

  def set_collision_layer_value(self, layer_number:int, value:bool)->None: pass

  def get_collision_layer_value(self, layer_number:int)->bool: pass

  def set_parent_collision_ignore(self, parent_collision_ignore:__core__.NodePath)->None: pass

  def get_parent_collision_ignore(self)->__core__.NodePath: pass

  def set_disable_mode(self, mode:int )->None: pass

  def get_disable_mode(self)->int: pass

  def get_collision_exceptions(self)->__core__.Array: pass

  def add_collision_exception_with(self, body:__node__.Node)->None: pass

  def remove_collision_exception_with(self, body:__node__.Node)->None: pass

  def set_simulation_precision(self, simulation_precision:int)->None: pass

  def get_simulation_precision(self)->int: pass

  def set_total_mass(self, mass:float)->None: pass

  def get_total_mass(self)->float: pass

  def set_linear_stiffness(self, linear_stiffness:float)->None: pass

  def get_linear_stiffness(self)->float: pass

  def set_pressure_coefficient(self, pressure_coefficient:float)->None: pass

  def get_pressure_coefficient(self)->float: pass

  def set_damping_coefficient(self, damping_coefficient:float)->None: pass

  def get_damping_coefficient(self)->float: pass

  def set_drag_coefficient(self, drag_coefficient:float)->None: pass

  def get_drag_coefficient(self)->float: pass

  def get_point_transform(self, point_index:int)->__core__.Vector3: pass

  def set_point_pinned(self, point_index:int, pinned:bool, attachment_path:__core__.NodePath= __core__.NodePath.new0())->None: pass

  def is_point_pinned(self, point_index:int)->bool: pass

  def set_ray_pickable(self, ray_pickable:bool)->None: pass

  def is_ray_pickable(self)->bool: pass


