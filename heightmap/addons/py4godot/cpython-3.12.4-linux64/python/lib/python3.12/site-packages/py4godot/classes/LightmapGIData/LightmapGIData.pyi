from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.TextureLayered.TextureLayered as __texturelayered__
import py4godot.classes.Resource.Resource as __resource__


class LightmapGIData(__resource__.Resource):

  @staticmethod
  def constructor()->LightmapGIData:pass



  @staticmethod
  def cast(other:__object__.Object)->LightmapGIData:pass


  @property
  def lightmap_textures(self)->typedarray::TextureLayered: pass
  @lightmap_textures.setter
  def lightmap_textures(self,  value:__core__.Array)->None: pass
  @property
  def uses_spherical_harmonics(self)->bool: pass
  @uses_spherical_harmonics.setter
  def uses_spherical_harmonics(self,  value:bool)->None: pass
  @property
  def user_data(self)->__core__.Array: pass
  @user_data.setter
  def user_data(self,  value:__core__.Array)->None: pass
  @property
  def probe_data(self)->__core__.Dictionary: pass
  @probe_data.setter
  def probe_data(self,  value:__core__.Dictionary)->None: pass
  @property
  def light_texture(self)->__texturelayered__.TextureLayered: pass
  @light_texture.setter
  def light_texture(self,  value:__texturelayered__.TextureLayered)->None: pass
  @property
  def light_textures(self)->__core__.Array: pass
  @light_textures.setter
  def light_textures(self,  value:__core__.Array)->None: pass
  def set_lightmap_textures(self, light_textures:__core__.Array)->None: pass

  def get_lightmap_textures(self)->__core__.Array: pass

  def set_uses_spherical_harmonics(self, uses_spherical_harmonics:bool)->None: pass

  def is_using_spherical_harmonics(self)->bool: pass

  def add_user(self, path:__core__.NodePath, uv_scale:__core__.Rect2, slice_index:int, sub_instance:int)->None: pass

  def get_user_count(self)->int: pass

  def get_user_path(self, user_idx:int)->__core__.NodePath: pass

  def clear_users(self)->None: pass

  def set_light_texture(self, light_texture:__texturelayered__.TextureLayered)->None: pass

  def get_light_texture(self)->__texturelayered__.TextureLayered: pass


