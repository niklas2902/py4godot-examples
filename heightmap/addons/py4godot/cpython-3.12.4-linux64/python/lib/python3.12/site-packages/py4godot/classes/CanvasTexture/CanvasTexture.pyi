from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Texture2D.Texture2D as __texture2d__
import py4godot.classes.CanvasItem.CanvasItem as __canvasitem__


class CanvasTexture(__texture2d__.Texture2D):

  @staticmethod
  def constructor()->CanvasTexture:pass



  @staticmethod
  def cast(other:__object__.Object)->CanvasTexture:pass


  @property
  def diffuse_texture(self)->__texture2d__.Texture2D: pass
  @diffuse_texture.setter
  def diffuse_texture(self,  value:__texture2d__.Texture2D)->None: pass
  @property
  def normal_texture(self)->__texture2d__.Texture2D: pass
  @normal_texture.setter
  def normal_texture(self,  value:__texture2d__.Texture2D)->None: pass
  @property
  def specular_texture(self)->__texture2d__.Texture2D: pass
  @specular_texture.setter
  def specular_texture(self,  value:__texture2d__.Texture2D)->None: pass
  @property
  def specular_color(self)->__core__.Color: pass
  @specular_color.setter
  def specular_color(self,  value:__core__.Color)->None: pass
  @property
  def specular_shininess(self)->float: pass
  @specular_shininess.setter
  def specular_shininess(self,  value:float)->None: pass
  @property
  def texture_filter(self)->int: pass
  @texture_filter.setter
  def texture_filter(self,  value:int)->None: pass
  @property
  def texture_repeat(self)->int: pass
  @texture_repeat.setter
  def texture_repeat(self,  value:int)->None: pass
  def set_diffuse_texture(self, texture:__texture2d__.Texture2D)->None: pass

  def get_diffuse_texture(self)->__texture2d__.Texture2D: pass

  def set_normal_texture(self, texture:__texture2d__.Texture2D)->None: pass

  def get_normal_texture(self)->__texture2d__.Texture2D: pass

  def set_specular_texture(self, texture:__texture2d__.Texture2D)->None: pass

  def get_specular_texture(self)->__texture2d__.Texture2D: pass

  def set_specular_color(self, color:__core__.Color)->None: pass

  def get_specular_color(self)->__core__.Color: pass

  def set_specular_shininess(self, shininess:float)->None: pass

  def get_specular_shininess(self)->float: pass

  def set_texture_filter(self, filter:int )->None: pass

  def get_texture_filter(self)->int: pass

  def set_texture_repeat(self, repeat:int )->None: pass

  def get_texture_repeat(self)->int: pass


