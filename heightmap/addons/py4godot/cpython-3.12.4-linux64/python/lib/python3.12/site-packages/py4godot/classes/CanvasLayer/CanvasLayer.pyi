from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Viewport.Viewport as __viewport__
import py4godot.classes.Node.Node as __node__


class CanvasLayer(__node__.Node):
  visibility_changed: BuiltinSignal

  @staticmethod
  def constructor()->CanvasLayer:pass



  @staticmethod
  def cast(other:__object__.Object)->CanvasLayer:pass


  @property
  def layer(self)->int: pass
  @layer.setter
  def layer(self,  value:int)->None: pass
  @property
  def visible(self)->bool: pass
  @visible.setter
  def visible(self,  value:bool)->None: pass
  @property
  def offset(self)->__core__.Vector2: pass
  @offset.setter
  def offset(self,  value:__core__.Vector2)->None: pass
  @property
  def rotation(self)->float: pass
  @rotation.setter
  def rotation(self,  value:float)->None: pass
  @property
  def scale(self)->__core__.Vector2: pass
  @scale.setter
  def scale(self,  value:__core__.Vector2)->None: pass
  @property
  def transform(self)->__core__.Transform2D: pass
  @transform.setter
  def transform(self,  value:__core__.Transform2D)->None: pass
  @property
  def custom_viewport(self)->__viewport__.Viewport: pass
  @custom_viewport.setter
  def custom_viewport(self,  value:__viewport__.Viewport)->None: pass
  @property
  def follow_viewport_enabled(self)->bool: pass
  @follow_viewport_enabled.setter
  def follow_viewport_enabled(self,  value:bool)->None: pass
  @property
  def follow_viewport_scale(self)->float: pass
  @follow_viewport_scale.setter
  def follow_viewport_scale(self,  value:float)->None: pass
  def set_layer(self, layer:int)->None: pass

  def get_layer(self)->int: pass

  def set_visible(self, visible:bool)->None: pass

  def is_visible(self)->bool: pass

  def show(self)->None: pass

  def hide(self)->None: pass

  def set_transform(self, transform:__core__.Transform2D)->None: pass

  def get_transform(self)->__core__.Transform2D: pass

  def get_final_transform(self)->__core__.Transform2D: pass

  def set_offset(self, offset:__core__.Vector2)->None: pass

  def get_offset(self)->__core__.Vector2: pass

  def set_rotation(self, radians:float)->None: pass

  def get_rotation(self)->float: pass

  def set_scale(self, scale:__core__.Vector2)->None: pass

  def get_scale(self)->__core__.Vector2: pass

  def set_follow_viewport(self, enable:bool)->None: pass

  def is_following_viewport(self)->bool: pass

  def set_follow_viewport_scale(self, scale:float)->None: pass

  def get_follow_viewport_scale(self)->float: pass

  def set_custom_viewport(self, viewport:__node__.Node)->None: pass

  def get_custom_viewport(self)->__node__.Node: pass

  def get_canvas(self)->__core__.RID: pass


