from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.AnimationNode.AnimationNode as __animationnode__
import py4godot.classes.Animation.Animation as __animation__
import py4godot.classes.Resource.Resource as __resource__


class AnimationNode(__resource__.Resource):
  tree_changed: BuiltinSignal
  animation_node_renamed: BuiltinSignal
  animation_node_removed: BuiltinSignal

  @staticmethod
  def constructor()->AnimationNode:pass



  @staticmethod
  def cast(other:__object__.Object)->AnimationNode:pass


  @property
  def filter_enabled(self)->bool: pass
  @filter_enabled.setter
  def filter_enabled(self,  value:bool)->None: pass
  @property
  def filters(self)->__core__.Array: pass
  @filters.setter
  def filters(self,  value:__core__.Array)->None: pass
  def _get_child_nodes(self)->__core__.Dictionary: pass

  def _get_parameter_list(self)->__core__.Array: pass

  def _get_child_by_name(self, name:__core__.StringName)->__animationnode__.AnimationNode: pass

  def _get_parameter_default_value(self, parameter:__core__.StringName)->object: pass

  def _is_parameter_read_only(self, parameter:__core__.StringName)->bool: pass

  def _process(self, time:float, seek:bool, is_external_seeking:bool, test_only:bool)->float: pass

  def _get_caption(self)->str: pass

  def _has_filter(self)->bool: pass

  def add_input(self, name:str)->bool: pass

  def remove_input(self, index:int)->None: pass

  def set_input_name(self, input:int, name:str)->bool: pass

  def get_input_name(self, input:int)->str: pass

  def get_input_count(self)->int: pass

  def find_input(self, name:str)->int: pass

  def set_filter_path(self, path:__core__.NodePath, enable:bool)->None: pass

  def is_path_filtered(self, path:__core__.NodePath)->bool: pass

  def set_filter_enabled(self, enable:bool)->None: pass

  def is_filter_enabled(self)->bool: pass

  def blend_animation(self, animation:__core__.StringName, time:float, delta:float, seeked:bool, is_external_seeking:bool, blend:float, looped_flag:int =0)->None: pass

  def blend_node(self, name:__core__.StringName, node:__animationnode__.AnimationNode, time:float, seek:bool, is_external_seeking:bool, blend:float, filter:int =0, sync:bool=True, test_only:bool=False)->float: pass

  def blend_input(self, input_index:int, time:float, seek:bool, is_external_seeking:bool, blend:float, filter:int =0, sync:bool=True, test_only:bool=False)->float: pass

  def set_parameter(self, name:__core__.StringName, value:object)->None: pass

  def get_parameter(self, name:__core__.StringName)->object: pass


