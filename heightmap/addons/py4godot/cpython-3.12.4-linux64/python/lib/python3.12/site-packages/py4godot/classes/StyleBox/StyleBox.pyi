from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Resource.Resource as __resource__
import py4godot.classes.CanvasItem.CanvasItem as __canvasitem__


class StyleBox(__resource__.Resource):

  @staticmethod
  def constructor()->StyleBox:pass



  @staticmethod
  def cast(other:__object__.Object)->StyleBox:pass


  @property
  def content_margin_left(self)->float: pass
  @content_margin_left.setter
  def content_margin_left(self,  value:float)->None: pass
  @property
  def content_margin_top(self)->float: pass
  @content_margin_top.setter
  def content_margin_top(self,  value:float)->None: pass
  @property
  def content_margin_right(self)->float: pass
  @content_margin_right.setter
  def content_margin_right(self,  value:float)->None: pass
  @property
  def content_margin_bottom(self)->float: pass
  @content_margin_bottom.setter
  def content_margin_bottom(self,  value:float)->None: pass
  def _draw(self, to_canvas_item:__core__.RID, rect:__core__.Rect2)->None: pass

  def _get_draw_rect(self, rect:__core__.Rect2)->__core__.Rect2: pass

  def _get_minimum_size(self)->__core__.Vector2: pass

  def _test_mask(self, point:__core__.Vector2, rect:__core__.Rect2)->bool: pass

  def get_minimum_size(self)->__core__.Vector2: pass

  def set_content_margin(self, margin:int , offset:float)->None: pass

  def set_content_margin_all(self, offset:float)->None: pass

  def get_content_margin(self, margin:int )->float: pass

  def get_margin(self, margin:int )->float: pass

  def get_offset(self)->__core__.Vector2: pass

  def draw(self, canvas_item:__core__.RID, rect:__core__.Rect2)->None: pass

  def get_current_item_drawn(self)->__canvasitem__.CanvasItem: pass

  def test_mask(self, point:__core__.Vector2, rect:__core__.Rect2)->bool: pass


