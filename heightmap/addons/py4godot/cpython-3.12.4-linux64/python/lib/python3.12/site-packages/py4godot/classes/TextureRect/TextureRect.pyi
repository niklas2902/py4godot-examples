from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Control.Control as __control__
import py4godot.classes.Texture2D.Texture2D as __texture2d__
import py4godot.classes.TextureRect.TextureRect as __texturerect__


class TextureRect(__control__.Control):

  @staticmethod
  def constructor()->TextureRect:pass



  @staticmethod
  def cast(other:__object__.Object)->TextureRect:pass


  @property
  def texture(self)->__texture2d__.Texture2D: pass
  @texture.setter
  def texture(self,  value:__texture2d__.Texture2D)->None: pass
  @property
  def expand_mode(self)->int: pass
  @expand_mode.setter
  def expand_mode(self,  value:int)->None: pass
  @property
  def stretch_mode(self)->int: pass
  @stretch_mode.setter
  def stretch_mode(self,  value:int)->None: pass
  @property
  def flip_h(self)->bool: pass
  @flip_h.setter
  def flip_h(self,  value:bool)->None: pass
  @property
  def flip_v(self)->bool: pass
  @flip_v.setter
  def flip_v(self,  value:bool)->None: pass
  def set_texture(self, texture:__texture2d__.Texture2D)->None: pass

  def get_texture(self)->__texture2d__.Texture2D: pass

  def set_expand_mode(self, expand_mode:int )->None: pass

  def get_expand_mode(self)->int: pass

  def set_flip_h(self, enable:bool)->None: pass

  def is_flipped_h(self)->bool: pass

  def set_flip_v(self, enable:bool)->None: pass

  def is_flipped_v(self)->bool: pass

  def set_stretch_mode(self, stretch_mode:int )->None: pass

  def get_stretch_mode(self)->int: pass


