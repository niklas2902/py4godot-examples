from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Animation.Animation as __animation__
import py4godot.classes.Resource.Resource as __resource__


class Animation(__resource__.Resource):

  @staticmethod
  def constructor()->Animation:pass



  @staticmethod
  def cast(other:__object__.Object)->Animation:pass


  @property
  def length(self)->float: pass
  @length.setter
  def length(self,  value:float)->None: pass
  @property
  def loop_mode(self)->int: pass
  @loop_mode.setter
  def loop_mode(self,  value:int)->None: pass
  @property
  def step(self)->float: pass
  @step.setter
  def step(self,  value:float)->None: pass
  @property
  def capture_included(self)->bool: pass
  def add_track(self, type:int , at_position:int=-1)->int: pass

  def remove_track(self, track_idx:int)->None: pass

  def get_track_count(self)->int: pass

  def track_get_type(self, track_idx:int)->int: pass

  def track_get_path(self, track_idx:int)->__core__.NodePath: pass

  def track_set_path(self, track_idx:int, path:__core__.NodePath)->None: pass

  def find_track(self, path:__core__.NodePath, type:int )->int: pass

  def track_move_up(self, track_idx:int)->None: pass

  def track_move_down(self, track_idx:int)->None: pass

  def track_move_to(self, track_idx:int, to_idx:int)->None: pass

  def track_swap(self, track_idx:int, with_idx:int)->None: pass

  def track_set_imported(self, track_idx:int, imported:bool)->None: pass

  def track_is_imported(self, track_idx:int)->bool: pass

  def track_set_enabled(self, track_idx:int, enabled:bool)->None: pass

  def track_is_enabled(self, track_idx:int)->bool: pass

  def position_track_insert_key(self, track_idx:int, time:float, position:__core__.Vector3)->int: pass

  def rotation_track_insert_key(self, track_idx:int, time:float, rotation:__core__.Quaternion)->int: pass

  def scale_track_insert_key(self, track_idx:int, time:float, scale:__core__.Vector3)->int: pass

  def blend_shape_track_insert_key(self, track_idx:int, time:float, amount:float)->int: pass

  def position_track_interpolate(self, track_idx:int, time_sec:float, backward:bool=False)->__core__.Vector3: pass

  def rotation_track_interpolate(self, track_idx:int, time_sec:float, backward:bool=False)->__core__.Quaternion: pass

  def scale_track_interpolate(self, track_idx:int, time_sec:float, backward:bool=False)->__core__.Vector3: pass

  def blend_shape_track_interpolate(self, track_idx:int, time_sec:float, backward:bool=False)->float: pass

  def track_insert_key(self, track_idx:int, time:float, key:object, transition:float=1)->int: pass

  def track_remove_key(self, track_idx:int, key_idx:int)->None: pass

  def track_remove_key_at_time(self, track_idx:int, time:float)->None: pass

  def track_set_key_value(self, track_idx:int, key:int, value:object)->None: pass

  def track_set_key_transition(self, track_idx:int, key_idx:int, transition:float)->None: pass

  def track_set_key_time(self, track_idx:int, key_idx:int, time:float)->None: pass

  def track_get_key_transition(self, track_idx:int, key_idx:int)->float: pass

  def track_get_key_count(self, track_idx:int)->int: pass

  def track_get_key_value(self, track_idx:int, key_idx:int)->object: pass

  def track_get_key_time(self, track_idx:int, key_idx:int)->float: pass

  def track_find_key(self, track_idx:int, time:float, find_mode:int =0, limit:bool=False, backward:bool=False)->int: pass

  def track_set_interpolation_type(self, track_idx:int, interpolation:int )->None: pass

  def track_get_interpolation_type(self, track_idx:int)->int: pass

  def track_set_interpolation_loop_wrap(self, track_idx:int, interpolation:bool)->None: pass

  def track_get_interpolation_loop_wrap(self, track_idx:int)->bool: pass

  def track_is_compressed(self, track_idx:int)->bool: pass

  def value_track_set_update_mode(self, track_idx:int, mode:int )->None: pass

  def value_track_get_update_mode(self, track_idx:int)->int: pass

  def value_track_interpolate(self, track_idx:int, time_sec:float, backward:bool=False)->object: pass

  def method_track_get_name(self, track_idx:int, key_idx:int)->__core__.StringName: pass

  def method_track_get_params(self, track_idx:int, key_idx:int)->__core__.Array: pass

  def bezier_track_insert_key(self, track_idx:int, time:float, value:float, in_handle:__core__.Vector2= __core__.Vector2.new0(), out_handle:__core__.Vector2= __core__.Vector2.new0())->int: pass

  def bezier_track_set_key_value(self, track_idx:int, key_idx:int, value:float)->None: pass

  def bezier_track_set_key_in_handle(self, track_idx:int, key_idx:int, in_handle:__core__.Vector2, balanced_value_time_ratio:float=1.0)->None: pass

  def bezier_track_set_key_out_handle(self, track_idx:int, key_idx:int, out_handle:__core__.Vector2, balanced_value_time_ratio:float=1.0)->None: pass

  def bezier_track_get_key_value(self, track_idx:int, key_idx:int)->float: pass

  def bezier_track_get_key_in_handle(self, track_idx:int, key_idx:int)->__core__.Vector2: pass

  def bezier_track_get_key_out_handle(self, track_idx:int, key_idx:int)->__core__.Vector2: pass

  def bezier_track_interpolate(self, track_idx:int, time:float)->float: pass

  def audio_track_insert_key(self, track_idx:int, time:float, stream:__resource__.Resource, start_offset:float=0, end_offset:float=0)->int: pass

  def audio_track_set_key_stream(self, track_idx:int, key_idx:int, stream:__resource__.Resource)->None: pass

  def audio_track_set_key_start_offset(self, track_idx:int, key_idx:int, offset:float)->None: pass

  def audio_track_set_key_end_offset(self, track_idx:int, key_idx:int, offset:float)->None: pass

  def audio_track_get_key_stream(self, track_idx:int, key_idx:int)->__resource__.Resource: pass

  def audio_track_get_key_start_offset(self, track_idx:int, key_idx:int)->float: pass

  def audio_track_get_key_end_offset(self, track_idx:int, key_idx:int)->float: pass

  def audio_track_set_use_blend(self, track_idx:int, enable:bool)->None: pass

  def audio_track_is_use_blend(self, track_idx:int)->bool: pass

  def animation_track_insert_key(self, track_idx:int, time:float, animation:__core__.StringName)->int: pass

  def animation_track_set_key_animation(self, track_idx:int, key_idx:int, animation:__core__.StringName)->None: pass

  def animation_track_get_key_animation(self, track_idx:int, key_idx:int)->__core__.StringName: pass

  def set_length(self, time_sec:float)->None: pass

  def get_length(self)->float: pass

  def set_loop_mode(self, loop_mode:int )->None: pass

  def get_loop_mode(self)->int: pass

  def set_step(self, size_sec:float)->None: pass

  def get_step(self)->float: pass

  def clear(self)->None: pass

  def copy_track(self, track_idx:int, to_animation:__animation__.Animation)->None: pass

  def compress(self, page_size:int=8192, fps:int=120, split_tolerance:float=4.0)->None: pass

  def is_capture_included(self)->bool: pass


