from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Compositor.Compositor as __compositor__
import py4godot.classes.CameraAttributes.CameraAttributes as __cameraattributes__
import py4godot.classes.CameraAttributesPhysical.CameraAttributesPhysical as __cameraattributesphysical__
import py4godot.classes.Node3D.Node3D as __node3d__
import py4godot.classes.Camera3D.Camera3D as __camera3d__
import py4godot.classes.Environment.Environment as __environment__


class Camera3D(__node3d__.Node3D):

  @staticmethod
  def constructor()->Camera3D:pass



  @staticmethod
  def cast(other:__object__.Object)->Camera3D:pass


  @property
  def keep_aspect(self)->int: pass
  @keep_aspect.setter
  def keep_aspect(self,  value:int)->None: pass
  @property
  def cull_mask(self)->int: pass
  @cull_mask.setter
  def cull_mask(self,  value:int)->None: pass
  @property
  def environment(self)->__environment__.Environment: pass
  @environment.setter
  def environment(self,  value:__environment__.Environment)->None: pass
  @property
  def attributes(self)->CameraAttributesPractical,CameraAttributesPhysical: pass
  @attributes.setter
  def attributes(self,  value:__cameraattributesphysical__.CameraAttributesPhysical)->None: pass
  @property
  def compositor(self)->__compositor__.Compositor: pass
  @compositor.setter
  def compositor(self,  value:__compositor__.Compositor)->None: pass
  @property
  def h_offset(self)->float: pass
  @h_offset.setter
  def h_offset(self,  value:float)->None: pass
  @property
  def v_offset(self)->float: pass
  @v_offset.setter
  def v_offset(self,  value:float)->None: pass
  @property
  def doppler_tracking(self)->int: pass
  @doppler_tracking.setter
  def doppler_tracking(self,  value:int)->None: pass
  @property
  def projection(self)->int: pass
  @projection.setter
  def projection(self,  value:int)->None: pass
  @property
  def current(self)->bool: pass
  @current.setter
  def current(self,  value:bool)->None: pass
  @property
  def fov(self)->float: pass
  @fov.setter
  def fov(self,  value:float)->None: pass
  @property
  def size(self)->float: pass
  @size.setter
  def size(self,  value:float)->None: pass
  @property
  def frustum_offset(self)->__core__.Vector2: pass
  @frustum_offset.setter
  def frustum_offset(self,  value:__core__.Vector2)->None: pass
  @property
  def near(self)->float: pass
  @near.setter
  def near(self,  value:float)->None: pass
  @property
  def far(self)->float: pass
  @far.setter
  def far(self,  value:float)->None: pass
  def project_ray_normal(self, screen_point:__core__.Vector2)->__core__.Vector3: pass

  def project_local_ray_normal(self, screen_point:__core__.Vector2)->__core__.Vector3: pass

  def project_ray_origin(self, screen_point:__core__.Vector2)->__core__.Vector3: pass

  def unproject_position(self, world_point:__core__.Vector3)->__core__.Vector2: pass

  def is_position_behind(self, world_point:__core__.Vector3)->bool: pass

  def project_position(self, screen_point:__core__.Vector2, z_depth:float)->__core__.Vector3: pass

  def set_perspective(self, fov:float, z_near:float, z_far:float)->None: pass

  def set_orthogonal(self, size:float, z_near:float, z_far:float)->None: pass

  def set_frustum(self, size:float, offset:__core__.Vector2, z_near:float, z_far:float)->None: pass

  def make_current(self)->None: pass

  def clear_current(self, enable_next:bool=True)->None: pass

  def set_current(self, enabled:bool)->None: pass

  def is_current(self)->bool: pass

  def get_camera_transform(self)->__core__.Transform3D: pass

  def get_camera_projection(self)->__core__.Projection: pass

  def get_fov(self)->float: pass

  def get_frustum_offset(self)->__core__.Vector2: pass

  def get_size(self)->float: pass

  def get_far(self)->float: pass

  def get_near(self)->float: pass

  def set_fov(self, fov:float)->None: pass

  def set_frustum_offset(self, offset:__core__.Vector2)->None: pass

  def set_size(self, size:float)->None: pass

  def set_far(self, far:float)->None: pass

  def set_near(self, near:float)->None: pass

  def get_projection(self)->int: pass

  def set_projection(self, mode:int )->None: pass

  def set_h_offset(self, offset:float)->None: pass

  def get_h_offset(self)->float: pass

  def set_v_offset(self, offset:float)->None: pass

  def get_v_offset(self)->float: pass

  def set_cull_mask(self, mask:int)->None: pass

  def get_cull_mask(self)->int: pass

  def set_environment(self, env:__environment__.Environment)->None: pass

  def get_environment(self)->__environment__.Environment: pass

  def set_attributes(self, env:__cameraattributes__.CameraAttributes)->None: pass

  def get_attributes(self)->__cameraattributes__.CameraAttributes: pass

  def set_compositor(self, compositor:__compositor__.Compositor)->None: pass

  def get_compositor(self)->__compositor__.Compositor: pass

  def set_keep_aspect_mode(self, mode:int )->None: pass

  def get_keep_aspect_mode(self)->int: pass

  def set_doppler_tracking(self, mode:int )->None: pass

  def get_doppler_tracking(self)->int: pass

  def get_frustum(self)->__core__.Array: pass

  def is_position_in_frustum(self, world_point:__core__.Vector3)->bool: pass

  def get_camera_rid(self)->__core__.RID: pass

  def get_pyramid_shape_rid(self)->__core__.RID: pass

  def set_cull_mask_value(self, layer_number:int, value:bool)->None: pass

  def get_cull_mask_value(self, layer_number:int)->bool: pass


