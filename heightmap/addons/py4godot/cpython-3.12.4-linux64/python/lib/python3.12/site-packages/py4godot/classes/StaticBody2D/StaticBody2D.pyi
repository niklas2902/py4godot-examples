from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.PhysicsMaterial.PhysicsMaterial as __physicsmaterial__
import py4godot.classes.PhysicsBody2D.PhysicsBody2D as __physicsbody2d__


class StaticBody2D(__physicsbody2d__.PhysicsBody2D):

  @staticmethod
  def constructor()->StaticBody2D:pass



  @staticmethod
  def cast(other:__object__.Object)->StaticBody2D:pass


  @property
  def physics_material_override(self)->__physicsmaterial__.PhysicsMaterial: pass
  @physics_material_override.setter
  def physics_material_override(self,  value:__physicsmaterial__.PhysicsMaterial)->None: pass
  @property
  def constant_linear_velocity(self)->__core__.Vector2: pass
  @constant_linear_velocity.setter
  def constant_linear_velocity(self,  value:__core__.Vector2)->None: pass
  @property
  def constant_angular_velocity(self)->float: pass
  @constant_angular_velocity.setter
  def constant_angular_velocity(self,  value:float)->None: pass
  def set_constant_linear_velocity(self, vel:__core__.Vector2)->None: pass

  def set_constant_angular_velocity(self, vel:float)->None: pass

  def get_constant_linear_velocity(self)->__core__.Vector2: pass

  def get_constant_angular_velocity(self)->float: pass

  def set_physics_material_override(self, physics_material_override:__physicsmaterial__.PhysicsMaterial)->None: pass

  def get_physics_material_override(self)->__physicsmaterial__.PhysicsMaterial: pass


