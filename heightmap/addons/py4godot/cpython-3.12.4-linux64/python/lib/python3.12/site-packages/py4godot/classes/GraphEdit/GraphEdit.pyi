from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Node.Node as __node__
import py4godot.classes.GraphFrame.GraphFrame as __graphframe__
import py4godot.classes.Object.Object as __object__
import py4godot.classes.GraphEdit.GraphEdit as __graphedit__
import py4godot.classes.Control.Control as __control__
import py4godot.classes.HBoxContainer.HBoxContainer as __hboxcontainer__


class GraphEdit(__control__.Control):
  connection_request: BuiltinSignal
  disconnection_request: BuiltinSignal
  connection_to_empty: BuiltinSignal
  connection_from_empty: BuiltinSignal
  connection_drag_started: BuiltinSignal
  connection_drag_ended: BuiltinSignal
  copy_nodes_request: BuiltinSignal
  paste_nodes_request: BuiltinSignal
  duplicate_nodes_request: BuiltinSignal
  delete_nodes_request: BuiltinSignal
  node_selected: BuiltinSignal
  node_deselected: BuiltinSignal
  frame_rect_changed: BuiltinSignal
  popup_request: BuiltinSignal
  begin_node_move: BuiltinSignal
  end_node_move: BuiltinSignal
  graph_elements_linked_to_frame_request: BuiltinSignal
  scroll_offset_changed: BuiltinSignal

  @staticmethod
  def constructor()->GraphEdit:pass



  @staticmethod
  def cast(other:__object__.Object)->GraphEdit:pass


  @property
  def scroll_offset(self)->__core__.Vector2: pass
  @scroll_offset.setter
  def scroll_offset(self,  value:__core__.Vector2)->None: pass
  @property
  def show_grid(self)->bool: pass
  @show_grid.setter
  def show_grid(self,  value:bool)->None: pass
  @property
  def grid_pattern(self)->int: pass
  @grid_pattern.setter
  def grid_pattern(self,  value:int)->None: pass
  @property
  def snapping_enabled(self)->bool: pass
  @snapping_enabled.setter
  def snapping_enabled(self,  value:bool)->None: pass
  @property
  def snapping_distance(self)->int: pass
  @snapping_distance.setter
  def snapping_distance(self,  value:int)->None: pass
  @property
  def panning_scheme(self)->int: pass
  @panning_scheme.setter
  def panning_scheme(self,  value:int)->None: pass
  @property
  def right_disconnects(self)->bool: pass
  @right_disconnects.setter
  def right_disconnects(self,  value:bool)->None: pass
  @property
  def connection_lines_curvature(self)->float: pass
  @connection_lines_curvature.setter
  def connection_lines_curvature(self,  value:float)->None: pass
  @property
  def connection_lines_thickness(self)->float: pass
  @connection_lines_thickness.setter
  def connection_lines_thickness(self,  value:float)->None: pass
  @property
  def connection_lines_antialiased(self)->bool: pass
  @connection_lines_antialiased.setter
  def connection_lines_antialiased(self,  value:bool)->None: pass
  @property
  def zoom(self)->float: pass
  @zoom.setter
  def zoom(self,  value:float)->None: pass
  @property
  def zoom_min(self)->float: pass
  @zoom_min.setter
  def zoom_min(self,  value:float)->None: pass
  @property
  def zoom_max(self)->float: pass
  @zoom_max.setter
  def zoom_max(self,  value:float)->None: pass
  @property
  def zoom_step(self)->float: pass
  @zoom_step.setter
  def zoom_step(self,  value:float)->None: pass
  @property
  def minimap_enabled(self)->bool: pass
  @minimap_enabled.setter
  def minimap_enabled(self,  value:bool)->None: pass
  @property
  def minimap_size(self)->__core__.Vector2: pass
  @minimap_size.setter
  def minimap_size(self,  value:__core__.Vector2)->None: pass
  @property
  def minimap_opacity(self)->float: pass
  @minimap_opacity.setter
  def minimap_opacity(self,  value:float)->None: pass
  @property
  def show_menu(self)->bool: pass
  @show_menu.setter
  def show_menu(self,  value:bool)->None: pass
  @property
  def show_zoom_label(self)->bool: pass
  @show_zoom_label.setter
  def show_zoom_label(self,  value:bool)->None: pass
  @property
  def show_zoom_buttons(self)->bool: pass
  @show_zoom_buttons.setter
  def show_zoom_buttons(self,  value:bool)->None: pass
  @property
  def show_grid_buttons(self)->bool: pass
  @show_grid_buttons.setter
  def show_grid_buttons(self,  value:bool)->None: pass
  @property
  def show_minimap_button(self)->bool: pass
  @show_minimap_button.setter
  def show_minimap_button(self,  value:bool)->None: pass
  @property
  def show_arrange_button(self)->bool: pass
  @show_arrange_button.setter
  def show_arrange_button(self,  value:bool)->None: pass
  def _is_in_input_hotzone(self, in_node:__object__.Object, in_port:int, mouse_position:__core__.Vector2)->bool: pass

  def _is_in_output_hotzone(self, in_node:__object__.Object, in_port:int, mouse_position:__core__.Vector2)->bool: pass

  def _get_connection_line(self, from_position:__core__.Vector2, to_position:__core__.Vector2)->__core__.PackedVector2Array: pass

  def _is_node_hover_valid(self, from_node:__core__.StringName, from_port:int, to_node:__core__.StringName, to_port:int)->bool: pass

  def connect_node(self, from_node:__core__.StringName, from_port:int, to_node:__core__.StringName, to_port:int)->int: pass

  def is_node_connected(self, from_node:__core__.StringName, from_port:int, to_node:__core__.StringName, to_port:int)->bool: pass

  def disconnect_node(self, from_node:__core__.StringName, from_port:int, to_node:__core__.StringName, to_port:int)->None: pass

  def set_connection_activity(self, from_node:__core__.StringName, from_port:int, to_node:__core__.StringName, to_port:int, amount:float)->None: pass

  def get_connection_list(self)->__core__.Array: pass

  def get_closest_connection_at_point(self, point:__core__.Vector2, max_distance:float=4.0)->__core__.Dictionary: pass

  def get_connections_intersecting_with_rect(self, rect:__core__.Rect2)->__core__.Array: pass

  def clear_connections(self)->None: pass

  def force_connection_drag_end(self)->None: pass

  def get_scroll_offset(self)->__core__.Vector2: pass

  def set_scroll_offset(self, offset:__core__.Vector2)->None: pass

  def add_valid_right_disconnect_type(self, type:int)->None: pass

  def remove_valid_right_disconnect_type(self, type:int)->None: pass

  def add_valid_left_disconnect_type(self, type:int)->None: pass

  def remove_valid_left_disconnect_type(self, type:int)->None: pass

  def add_valid_connection_type(self, from_type:int, to_type:int)->None: pass

  def remove_valid_connection_type(self, from_type:int, to_type:int)->None: pass

  def is_valid_connection_type(self, from_type:int, to_type:int)->bool: pass

  def get_connection_line(self, from_node:__core__.Vector2, to_node:__core__.Vector2)->__core__.PackedVector2Array: pass

  def attach_graph_element_to_frame(self, element:__core__.StringName, frame:__core__.StringName)->None: pass

  def detach_graph_element_from_frame(self, element:__core__.StringName)->None: pass

  def get_element_frame(self, element:__core__.StringName)->__graphframe__.GraphFrame: pass

  def get_attached_nodes_of_frame(self, frame:__core__.StringName)->__core__.Array: pass

  def set_panning_scheme(self, scheme:int )->None: pass

  def get_panning_scheme(self)->int: pass

  def set_zoom(self, zoom:float)->None: pass

  def get_zoom(self)->float: pass

  def set_zoom_min(self, zoom_min:float)->None: pass

  def get_zoom_min(self)->float: pass

  def set_zoom_max(self, zoom_max:float)->None: pass

  def get_zoom_max(self)->float: pass

  def set_zoom_step(self, zoom_step:float)->None: pass

  def get_zoom_step(self)->float: pass

  def set_show_grid(self, enable:bool)->None: pass

  def is_showing_grid(self)->bool: pass

  def set_grid_pattern(self, pattern:int )->None: pass

  def get_grid_pattern(self)->int: pass

  def set_snapping_enabled(self, enable:bool)->None: pass

  def is_snapping_enabled(self)->bool: pass

  def set_snapping_distance(self, pixels:int)->None: pass

  def get_snapping_distance(self)->int: pass

  def set_connection_lines_curvature(self, curvature:float)->None: pass

  def get_connection_lines_curvature(self)->float: pass

  def set_connection_lines_thickness(self, pixels:float)->None: pass

  def get_connection_lines_thickness(self)->float: pass

  def set_connection_lines_antialiased(self, pixels:bool)->None: pass

  def is_connection_lines_antialiased(self)->bool: pass

  def set_minimap_size(self, size:__core__.Vector2)->None: pass

  def get_minimap_size(self)->__core__.Vector2: pass

  def set_minimap_opacity(self, opacity:float)->None: pass

  def get_minimap_opacity(self)->float: pass

  def set_minimap_enabled(self, enable:bool)->None: pass

  def is_minimap_enabled(self)->bool: pass

  def set_show_menu(self, hidden:bool)->None: pass

  def is_showing_menu(self)->bool: pass

  def set_show_zoom_label(self, enable:bool)->None: pass

  def is_showing_zoom_label(self)->bool: pass

  def set_show_grid_buttons(self, hidden:bool)->None: pass

  def is_showing_grid_buttons(self)->bool: pass

  def set_show_zoom_buttons(self, hidden:bool)->None: pass

  def is_showing_zoom_buttons(self)->bool: pass

  def set_show_minimap_button(self, hidden:bool)->None: pass

  def is_showing_minimap_button(self)->bool: pass

  def set_show_arrange_button(self, hidden:bool)->None: pass

  def is_showing_arrange_button(self)->bool: pass

  def set_right_disconnects(self, enable:bool)->None: pass

  def is_right_disconnects_enabled(self)->bool: pass

  def get_menu_hbox(self)->__hboxcontainer__.HBoxContainer: pass

  def arrange_nodes(self)->None: pass

  def set_selected(self, node:__node__.Node)->None: pass


