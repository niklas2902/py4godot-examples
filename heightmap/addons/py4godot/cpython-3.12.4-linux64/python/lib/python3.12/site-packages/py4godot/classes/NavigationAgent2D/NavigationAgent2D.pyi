from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.NavigationPathQueryResult2D.NavigationPathQueryResult2D as __navigationpathqueryresult2d__
import py4godot.classes.Node.Node as __node__
import py4godot.classes.NavigationPathQueryParameters2D.NavigationPathQueryParameters2D as __navigationpathqueryparameters2d__


class NavigationAgent2D(__node__.Node):
  path_changed: BuiltinSignal
  target_reached: BuiltinSignal
  waypoint_reached: BuiltinSignal
  link_reached: BuiltinSignal
  navigation_finished: BuiltinSignal
  velocity_computed: BuiltinSignal

  @staticmethod
  def constructor()->NavigationAgent2D:pass



  @staticmethod
  def cast(other:__object__.Object)->NavigationAgent2D:pass


  @property
  def target_position(self)->__core__.Vector2: pass
  @target_position.setter
  def target_position(self,  value:__core__.Vector2)->None: pass
  @property
  def path_desired_distance(self)->float: pass
  @path_desired_distance.setter
  def path_desired_distance(self,  value:float)->None: pass
  @property
  def target_desired_distance(self)->float: pass
  @target_desired_distance.setter
  def target_desired_distance(self,  value:float)->None: pass
  @property
  def path_max_distance(self)->float: pass
  @path_max_distance.setter
  def path_max_distance(self,  value:float)->None: pass
  @property
  def navigation_layers(self)->int: pass
  @navigation_layers.setter
  def navigation_layers(self,  value:int)->None: pass
  @property
  def pathfinding_algorithm(self)->int: pass
  @pathfinding_algorithm.setter
  def pathfinding_algorithm(self,  value:int)->None: pass
  @property
  def path_postprocessing(self)->int: pass
  @path_postprocessing.setter
  def path_postprocessing(self,  value:int)->None: pass
  @property
  def path_metadata_flags(self)->int: pass
  @path_metadata_flags.setter
  def path_metadata_flags(self,  value:int)->None: pass
  @property
  def simplify_path(self)->bool: pass
  @simplify_path.setter
  def simplify_path(self,  value:bool)->None: pass
  @property
  def simplify_epsilon(self)->float: pass
  @simplify_epsilon.setter
  def simplify_epsilon(self,  value:float)->None: pass
  @property
  def avoidance_enabled(self)->bool: pass
  @avoidance_enabled.setter
  def avoidance_enabled(self,  value:bool)->None: pass
  @property
  def velocity(self)->__core__.Vector2: pass
  @velocity.setter
  def velocity(self,  value:__core__.Vector2)->None: pass
  @property
  def radius(self)->float: pass
  @radius.setter
  def radius(self,  value:float)->None: pass
  @property
  def neighbor_distance(self)->float: pass
  @neighbor_distance.setter
  def neighbor_distance(self,  value:float)->None: pass
  @property
  def max_neighbors(self)->int: pass
  @max_neighbors.setter
  def max_neighbors(self,  value:int)->None: pass
  @property
  def time_horizon_agents(self)->float: pass
  @time_horizon_agents.setter
  def time_horizon_agents(self,  value:float)->None: pass
  @property
  def time_horizon_obstacles(self)->float: pass
  @time_horizon_obstacles.setter
  def time_horizon_obstacles(self,  value:float)->None: pass
  @property
  def max_speed(self)->float: pass
  @max_speed.setter
  def max_speed(self,  value:float)->None: pass
  @property
  def avoidance_layers(self)->int: pass
  @avoidance_layers.setter
  def avoidance_layers(self,  value:int)->None: pass
  @property
  def avoidance_mask(self)->int: pass
  @avoidance_mask.setter
  def avoidance_mask(self,  value:int)->None: pass
  @property
  def avoidance_priority(self)->float: pass
  @avoidance_priority.setter
  def avoidance_priority(self,  value:float)->None: pass
  @property
  def debug_enabled(self)->bool: pass
  @debug_enabled.setter
  def debug_enabled(self,  value:bool)->None: pass
  @property
  def debug_use_custom(self)->bool: pass
  @debug_use_custom.setter
  def debug_use_custom(self,  value:bool)->None: pass
  @property
  def debug_path_custom_color(self)->__core__.Color: pass
  @debug_path_custom_color.setter
  def debug_path_custom_color(self,  value:__core__.Color)->None: pass
  @property
  def debug_path_custom_point_size(self)->float: pass
  @debug_path_custom_point_size.setter
  def debug_path_custom_point_size(self,  value:float)->None: pass
  @property
  def debug_path_custom_line_width(self)->float: pass
  @debug_path_custom_line_width.setter
  def debug_path_custom_line_width(self,  value:float)->None: pass
  def get_rid(self)->__core__.RID: pass

  def set_avoidance_enabled(self, enabled:bool)->None: pass

  def get_avoidance_enabled(self)->bool: pass

  def set_path_desired_distance(self, desired_distance:float)->None: pass

  def get_path_desired_distance(self)->float: pass

  def set_target_desired_distance(self, desired_distance:float)->None: pass

  def get_target_desired_distance(self)->float: pass

  def set_radius(self, radius:float)->None: pass

  def get_radius(self)->float: pass

  def set_neighbor_distance(self, neighbor_distance:float)->None: pass

  def get_neighbor_distance(self)->float: pass

  def set_max_neighbors(self, max_neighbors:int)->None: pass

  def get_max_neighbors(self)->int: pass

  def set_time_horizon_agents(self, time_horizon:float)->None: pass

  def get_time_horizon_agents(self)->float: pass

  def set_time_horizon_obstacles(self, time_horizon:float)->None: pass

  def get_time_horizon_obstacles(self)->float: pass

  def set_max_speed(self, max_speed:float)->None: pass

  def get_max_speed(self)->float: pass

  def set_path_max_distance(self, max_speed:float)->None: pass

  def get_path_max_distance(self)->float: pass

  def set_navigation_layers(self, navigation_layers:int)->None: pass

  def get_navigation_layers(self)->int: pass

  def set_navigation_layer_value(self, layer_number:int, value:bool)->None: pass

  def get_navigation_layer_value(self, layer_number:int)->bool: pass

  def set_pathfinding_algorithm(self, pathfinding_algorithm:int )->None: pass

  def get_pathfinding_algorithm(self)->int: pass

  def set_path_postprocessing(self, path_postprocessing:int )->None: pass

  def get_path_postprocessing(self)->int: pass

  def set_path_metadata_flags(self, flags:int)->None: pass

  def get_path_metadata_flags(self)->int: pass

  def set_navigation_map(self, navigation_map:__core__.RID)->None: pass

  def get_navigation_map(self)->__core__.RID: pass

  def set_target_position(self, position:__core__.Vector2)->None: pass

  def get_target_position(self)->__core__.Vector2: pass

  def set_simplify_path(self, enabled:bool)->None: pass

  def get_simplify_path(self)->bool: pass

  def set_simplify_epsilon(self, epsilon:float)->None: pass

  def get_simplify_epsilon(self)->float: pass

  def get_next_path_position(self)->__core__.Vector2: pass

  def set_velocity_forced(self, velocity:__core__.Vector2)->None: pass

  def set_velocity(self, velocity:__core__.Vector2)->None: pass

  def get_velocity(self)->__core__.Vector2: pass

  def distance_to_target(self)->float: pass

  def get_current_navigation_result(self)->__navigationpathqueryresult2d__.NavigationPathQueryResult2D: pass

  def get_current_navigation_path(self)->__core__.PackedVector2Array: pass

  def get_current_navigation_path_index(self)->int: pass

  def is_target_reached(self)->bool: pass

  def is_target_reachable(self)->bool: pass

  def is_navigation_finished(self)->bool: pass

  def get_final_position(self)->__core__.Vector2: pass

  def set_avoidance_layers(self, layers:int)->None: pass

  def get_avoidance_layers(self)->int: pass

  def set_avoidance_mask(self, mask:int)->None: pass

  def get_avoidance_mask(self)->int: pass

  def set_avoidance_layer_value(self, layer_number:int, value:bool)->None: pass

  def get_avoidance_layer_value(self, layer_number:int)->bool: pass

  def set_avoidance_mask_value(self, mask_number:int, value:bool)->None: pass

  def get_avoidance_mask_value(self, mask_number:int)->bool: pass

  def set_avoidance_priority(self, priority:float)->None: pass

  def get_avoidance_priority(self)->float: pass

  def set_debug_enabled(self, enabled:bool)->None: pass

  def get_debug_enabled(self)->bool: pass

  def set_debug_use_custom(self, enabled:bool)->None: pass

  def get_debug_use_custom(self)->bool: pass

  def set_debug_path_custom_color(self, color:__core__.Color)->None: pass

  def get_debug_path_custom_color(self)->__core__.Color: pass

  def set_debug_path_custom_point_size(self, point_size:float)->None: pass

  def get_debug_path_custom_point_size(self)->float: pass

  def set_debug_path_custom_line_width(self, line_width:float)->None: pass

  def get_debug_path_custom_line_width(self)->float: pass


