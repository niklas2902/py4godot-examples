from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Node.Node as __node__
import py4godot.classes.Viewport.Viewport as __viewport__
import py4godot.classes.MultiplayerAPI.MultiplayerAPI as __multiplayerapi__
import py4godot.classes.SceneTree.SceneTree as __scenetree__
import py4godot.classes.Tween.Tween as __tween__
import py4godot.classes.Object.Object as __object__
import py4godot.classes.Window.Window as __window__
import py4godot.classes.InputEvent.InputEvent as __inputevent__


class Node(__object__.Object):
  ready: BuiltinSignal
  renamed: BuiltinSignal
  tree_entered: BuiltinSignal
  tree_exiting: BuiltinSignal
  tree_exited: BuiltinSignal
  child_entered_tree: BuiltinSignal
  child_exiting_tree: BuiltinSignal
  child_order_changed: BuiltinSignal
  replacing_by: BuiltinSignal
  editor_description_changed: BuiltinSignal

  @staticmethod
  def constructor()->Node:pass



  @staticmethod
  def cast(other:__object__.Object)->Node:pass


  @property
  def name(self)->__core__.StringName: pass
  @name.setter
  def name(self,  value:__core__.StringName)->None: pass
  @property
  def unique_name_in_owner(self)->bool: pass
  @unique_name_in_owner.setter
  def unique_name_in_owner(self,  value:bool)->None: pass
  @property
  def scene_file_path(self)->str: pass
  @scene_file_path.setter
  def scene_file_path(self,  value:str)->None: pass
  @property
  def owner(self)->__node__.Node: pass
  @owner.setter
  def owner(self,  value:__node__.Node)->None: pass
  @property
  def multiplayer(self)->__multiplayerapi__.MultiplayerAPI: pass
  @property
  def process_mode(self)->int: pass
  @process_mode.setter
  def process_mode(self,  value:int)->None: pass
  @property
  def process_priority(self)->int: pass
  @process_priority.setter
  def process_priority(self,  value:int)->None: pass
  @property
  def process_physics_priority(self)->int: pass
  @process_physics_priority.setter
  def process_physics_priority(self,  value:int)->None: pass
  @property
  def process_thread_group(self)->int: pass
  @process_thread_group.setter
  def process_thread_group(self,  value:int)->None: pass
  @property
  def process_thread_group_order(self)->int: pass
  @process_thread_group_order.setter
  def process_thread_group_order(self,  value:int)->None: pass
  @property
  def process_thread_messages(self)->int: pass
  @process_thread_messages.setter
  def process_thread_messages(self,  value:int)->None: pass
  @property
  def physics_interpolation_mode(self)->int: pass
  @physics_interpolation_mode.setter
  def physics_interpolation_mode(self,  value:int)->None: pass
  @property
  def auto_translate_mode(self)->int: pass
  @auto_translate_mode.setter
  def auto_translate_mode(self,  value:int)->None: pass
  @property
  def editor_description(self)->str: pass
  @editor_description.setter
  def editor_description(self,  value:str)->None: pass
  def _process(self, delta:float)->None: pass

  def _physics_process(self, delta:float)->None: pass

  def _enter_tree(self)->None: pass

  def _exit_tree(self)->None: pass

  def _ready(self)->None: pass

  def _get_configuration_warnings(self)->__core__.PackedStringArray: pass

  def _input(self, event:__inputevent__.InputEvent)->None: pass

  def _shortcut_input(self, event:__inputevent__.InputEvent)->None: pass

  def _unhandled_input(self, event:__inputevent__.InputEvent)->None: pass

  def _unhandled_key_input(self, event:__inputevent__.InputEvent)->None: pass

  @staticmethod
  def print_orphan_nodes()->None: pass

  def add_sibling(self, sibling:__node__.Node, force_readable_name:bool=False)->None: pass

  def set_name(self, name:str)->None: pass

  def get_name(self)->__core__.StringName: pass

  def add_child(self, node:__node__.Node, force_readable_name:bool=False, internal:int =0)->None: pass

  def remove_child(self, node:__node__.Node)->None: pass

  def reparent(self, new_parent:__node__.Node, keep_global_transform:bool=True)->None: pass

  def get_child_count(self, include_internal:bool=False)->int: pass

  def get_children(self, include_internal:bool=False)->__core__.Array: pass

  def get_child(self, idx:int, include_internal:bool=False)->__node__.Node: pass

  def has_node(self, path:__core__.NodePath)->bool: pass

  def get_node(self, path:__core__.NodePath)->__node__.Node: pass

  def get_node_or_null(self, path:__core__.NodePath)->__node__.Node: pass

  def get_parent(self)->__node__.Node: pass

  def find_child(self, pattern:str, recursive:bool=True, owned:bool=True)->__node__.Node: pass

  def find_children(self, pattern:str, type:str= __core__.String.new0(), recursive:bool=True, owned:bool=True)->__core__.Array: pass

  def find_parent(self, pattern:str)->__node__.Node: pass

  def has_node_and_resource(self, path:__core__.NodePath)->bool: pass

  def get_node_and_resource(self, path:__core__.NodePath)->__core__.Array: pass

  def is_inside_tree(self)->bool: pass

  def is_part_of_edited_scene(self)->bool: pass

  def is_ancestor_of(self, node:__node__.Node)->bool: pass

  def is_greater_than(self, node:__node__.Node)->bool: pass

  def get_path(self)->__core__.NodePath: pass

  def get_path_to(self, node:__node__.Node, use_unique_path:bool=False)->__core__.NodePath: pass

  def add_to_group(self, group:__core__.StringName, persistent:bool=False)->None: pass

  def remove_from_group(self, group:__core__.StringName)->None: pass

  def is_in_group(self, group:__core__.StringName)->bool: pass

  def move_child(self, child_node:__node__.Node, to_index:int)->None: pass

  def get_groups(self)->__core__.Array: pass

  def set_owner(self, owner:__node__.Node)->None: pass

  def get_owner(self)->__node__.Node: pass

  def get_index(self, include_internal:bool=False)->int: pass

  def print_tree(self)->None: pass

  def print_tree_pretty(self)->None: pass

  def get_tree_string(self)->str: pass

  def get_tree_string_pretty(self)->str: pass

  def set_scene_file_path(self, scene_file_path:str)->None: pass

  def get_scene_file_path(self)->str: pass

  def propagate_notification(self, what:int)->None: pass

  def propagate_call(self, method:__core__.StringName, args:__core__.Array= __core__.Array.new0(), parent_first:bool=False)->None: pass

  def set_physics_process(self, enable:bool)->None: pass

  def get_physics_process_delta_time(self)->float: pass

  def is_physics_processing(self)->bool: pass

  def get_process_delta_time(self)->float: pass

  def set_process(self, enable:bool)->None: pass

  def set_process_priority(self, priority:int)->None: pass

  def get_process_priority(self)->int: pass

  def set_physics_process_priority(self, priority:int)->None: pass

  def get_physics_process_priority(self)->int: pass

  def is_processing(self)->bool: pass

  def set_process_input(self, enable:bool)->None: pass

  def is_processing_input(self)->bool: pass

  def set_process_shortcut_input(self, enable:bool)->None: pass

  def is_processing_shortcut_input(self)->bool: pass

  def set_process_unhandled_input(self, enable:bool)->None: pass

  def is_processing_unhandled_input(self)->bool: pass

  def set_process_unhandled_key_input(self, enable:bool)->None: pass

  def is_processing_unhandled_key_input(self)->bool: pass

  def set_process_mode(self, mode:int )->None: pass

  def get_process_mode(self)->int: pass

  def can_process(self)->bool: pass

  def set_process_thread_group(self, mode:int )->None: pass

  def get_process_thread_group(self)->int: pass

  def set_process_thread_messages(self, flags:int)->None: pass

  def get_process_thread_messages(self)->int: pass

  def set_process_thread_group_order(self, order:int)->None: pass

  def get_process_thread_group_order(self)->int: pass

  def set_display_folded(self, fold:bool)->None: pass

  def is_displayed_folded(self)->bool: pass

  def set_process_internal(self, enable:bool)->None: pass

  def is_processing_internal(self)->bool: pass

  def set_physics_process_internal(self, enable:bool)->None: pass

  def is_physics_processing_internal(self)->bool: pass

  def set_physics_interpolation_mode(self, mode:int )->None: pass

  def get_physics_interpolation_mode(self)->int: pass

  def is_physics_interpolated(self)->bool: pass

  def is_physics_interpolated_and_enabled(self)->bool: pass

  def reset_physics_interpolation(self)->None: pass

  def set_auto_translate_mode(self, mode:int )->None: pass

  def get_auto_translate_mode(self)->int: pass

  def get_window(self)->__window__.Window: pass

  def get_last_exclusive_window(self)->__window__.Window: pass

  def get_tree(self)->__scenetree__.SceneTree: pass

  def create_tween(self)->__tween__.Tween: pass

  def duplicate(self, flags:int=15)->__node__.Node: pass

  def replace_by(self, node:__node__.Node, keep_groups:bool=False)->None: pass

  def set_scene_instance_load_placeholder(self, load_placeholder:bool)->None: pass

  def get_scene_instance_load_placeholder(self)->bool: pass

  def set_editable_instance(self, node:__node__.Node, is_editable:bool)->None: pass

  def is_editable_instance(self, node:__node__.Node)->bool: pass

  def get_viewport(self)->__viewport__.Viewport: pass

  def queue_free(self)->None: pass

  def request_ready(self)->None: pass

  def is_node_ready(self)->bool: pass

  def set_multiplayer_authority(self, id:int, recursive:bool=True)->None: pass

  def get_multiplayer_authority(self)->int: pass

  def is_multiplayer_authority(self)->bool: pass

  def get_multiplayer(self)->__multiplayerapi__.MultiplayerAPI: pass

  def rpc_config(self, method:__core__.StringName, config:object)->None: pass

  def set_editor_description(self, editor_description:str)->None: pass

  def get_editor_description(self)->str: pass

  def set_unique_name_in_owner(self, enable:bool)->None: pass

  def is_unique_name_in_owner(self)->bool: pass

  def atr(self, message:str, context:__core__.StringName= __core__.StringName.new0())->str: pass

  def atr_n(self, message:str, plural_message:__core__.StringName, n:int, context:__core__.StringName= __core__.StringName.new0())->str: pass

  def rpc(self, method:__core__.StringName)->int: pass

  def rpc_id(self, peer_id:int, method:__core__.StringName)->int: pass

  def update_configuration_warnings(self)->None: pass

  def call_deferred_thread_group(self, method:__core__.StringName)->object: pass

  def set_deferred_thread_group(self, property:__core__.StringName, value:object)->None: pass

  def notify_deferred_thread_group(self, what:int)->None: pass

  def call_thread_safe(self, method:__core__.StringName)->object: pass

  def set_thread_safe(self, property:__core__.StringName, value:object)->None: pass

  def notify_thread_safe(self, what:int)->None: pass


