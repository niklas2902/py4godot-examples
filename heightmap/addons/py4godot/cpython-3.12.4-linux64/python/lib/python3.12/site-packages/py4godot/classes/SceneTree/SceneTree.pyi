from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Node.Node as __node__
import py4godot.classes.MainLoop.MainLoop as __mainloop__
import py4godot.classes.MultiplayerAPI.MultiplayerAPI as __multiplayerapi__
import py4godot.classes.Tween.Tween as __tween__
import py4godot.classes.Object.Object as __object__
import py4godot.classes.Window.Window as __window__
import py4godot.classes.PackedScene.PackedScene as __packedscene__
import py4godot.classes.SceneTreeTimer.SceneTreeTimer as __scenetreetimer__


class SceneTree(__mainloop__.MainLoop):
  tree_changed: BuiltinSignal
  tree_process_mode_changed: BuiltinSignal
  node_added: BuiltinSignal
  node_removed: BuiltinSignal
  node_renamed: BuiltinSignal
  node_configuration_warning_changed: BuiltinSignal
  process_frame: BuiltinSignal
  physics_frame: BuiltinSignal

  @staticmethod
  def constructor()->SceneTree:pass



  @staticmethod
  def cast(other:__object__.Object)->SceneTree:pass


  @property
  def auto_accept_quit(self)->bool: pass
  @auto_accept_quit.setter
  def auto_accept_quit(self,  value:bool)->None: pass
  @property
  def quit_on_go_back(self)->bool: pass
  @quit_on_go_back.setter
  def quit_on_go_back(self,  value:bool)->None: pass
  @property
  def debug_collisions_hint(self)->bool: pass
  @debug_collisions_hint.setter
  def debug_collisions_hint(self,  value:bool)->None: pass
  @property
  def debug_paths_hint(self)->bool: pass
  @debug_paths_hint.setter
  def debug_paths_hint(self,  value:bool)->None: pass
  @property
  def debug_navigation_hint(self)->bool: pass
  @debug_navigation_hint.setter
  def debug_navigation_hint(self,  value:bool)->None: pass
  @property
  def paused(self)->bool: pass
  @paused.setter
  def paused(self,  value:bool)->None: pass
  @property
  def edited_scene_root(self)->__node__.Node: pass
  @edited_scene_root.setter
  def edited_scene_root(self,  value:__node__.Node)->None: pass
  @property
  def current_scene(self)->__node__.Node: pass
  @current_scene.setter
  def current_scene(self,  value:__node__.Node)->None: pass
  @property
  def root(self)->__node__.Node: pass
  @property
  def multiplayer_poll(self)->bool: pass
  @multiplayer_poll.setter
  def multiplayer_poll(self,  value:bool)->None: pass
  @property
  def physics_interpolation(self)->bool: pass
  @physics_interpolation.setter
  def physics_interpolation(self,  value:bool)->None: pass
  def get_root(self)->__window__.Window: pass

  def has_group(self, name:__core__.StringName)->bool: pass

  def is_auto_accept_quit(self)->bool: pass

  def set_auto_accept_quit(self, enabled:bool)->None: pass

  def is_quit_on_go_back(self)->bool: pass

  def set_quit_on_go_back(self, enabled:bool)->None: pass

  def set_debug_collisions_hint(self, enable:bool)->None: pass

  def is_debugging_collisions_hint(self)->bool: pass

  def set_debug_paths_hint(self, enable:bool)->None: pass

  def is_debugging_paths_hint(self)->bool: pass

  def set_debug_navigation_hint(self, enable:bool)->None: pass

  def is_debugging_navigation_hint(self)->bool: pass

  def set_edited_scene_root(self, scene:__node__.Node)->None: pass

  def get_edited_scene_root(self)->__node__.Node: pass

  def set_pause(self, enable:bool)->None: pass

  def is_paused(self)->bool: pass

  def create_timer(self, time_sec:float, process_always:bool=True, process_in_physics:bool=False, ignore_time_scale:bool=False)->__scenetreetimer__.SceneTreeTimer: pass

  def create_tween(self)->__tween__.Tween: pass

  def get_processed_tweens(self)->__core__.Array: pass

  def get_node_count(self)->int: pass

  def get_frame(self)->int: pass

  def quit(self, exit_code:int=0)->None: pass

  def set_physics_interpolation_enabled(self, enabled:bool)->None: pass

  def is_physics_interpolation_enabled(self)->bool: pass

  def queue_delete(self, obj:__object__.Object)->None: pass

  def call_group_flags(self, flags:int, group:__core__.StringName, method:__core__.StringName)->None: pass

  def notify_group_flags(self, call_flags:int, group:__core__.StringName, notification:int)->None: pass

  def set_group_flags(self, call_flags:int, group:__core__.StringName, property:str, value:object)->None: pass

  def call_group(self, group:__core__.StringName, method:__core__.StringName)->None: pass

  def notify_group(self, group:__core__.StringName, notification:int)->None: pass

  def set_group(self, group:__core__.StringName, property:str, value:object)->None: pass

  def get_nodes_in_group(self, group:__core__.StringName)->__core__.Array: pass

  def get_first_node_in_group(self, group:__core__.StringName)->__node__.Node: pass

  def get_node_count_in_group(self, group:__core__.StringName)->int: pass

  def set_current_scene(self, child_node:__node__.Node)->None: pass

  def get_current_scene(self)->__node__.Node: pass

  def change_scene_to_file(self, path:str)->int: pass

  def change_scene_to_packed(self, packed_scene:__packedscene__.PackedScene)->int: pass

  def reload_current_scene(self)->int: pass

  def unload_current_scene(self)->None: pass

  def set_multiplayer(self, multiplayer:__multiplayerapi__.MultiplayerAPI, root_path:__core__.NodePath= __core__.NodePath.new0())->None: pass

  def get_multiplayer(self, for_path:__core__.NodePath= __core__.NodePath.new0())->__multiplayerapi__.MultiplayerAPI: pass

  def set_multiplayer_poll_enabled(self, enabled:bool)->None: pass

  def is_multiplayer_poll_enabled(self)->bool: pass


