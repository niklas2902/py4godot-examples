from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.TextServer.TextServer as __textserver__
import py4godot.classes.Resource.Resource as __resource__


class Font(__resource__.Resource):

  @staticmethod
  def constructor()->Font:pass



  @staticmethod
  def cast(other:__object__.Object)->Font:pass


  @property
  def fallbacks(self)->typedarray::24/17:Font: pass
  @fallbacks.setter
  def fallbacks(self,  value:__core__.Array)->None: pass
  def set_fallbacks(self, fallbacks:__core__.Array)->None: pass

  def get_fallbacks(self)->__core__.Array: pass

  def find_variation(self, variation_coordinates:__core__.Dictionary, face_index:int=0, strength:float=0.0, transform:__core__.Transform2D= __core__.Transform2D.new0(), spacing_top:int=0, spacing_bottom:int=0, spacing_space:int=0, spacing_glyph:int=0, baseline_offset:float=0.0)->__core__.RID: pass

  def get_rids(self)->__core__.Array: pass

  def get_height(self, font_size:int=16)->float: pass

  def get_ascent(self, font_size:int=16)->float: pass

  def get_descent(self, font_size:int=16)->float: pass

  def get_underline_position(self, font_size:int=16)->float: pass

  def get_underline_thickness(self, font_size:int=16)->float: pass

  def get_font_name(self)->str: pass

  def get_font_style_name(self)->str: pass

  def get_ot_name_strings(self)->__core__.Dictionary: pass

  def get_font_style(self)->int: pass

  def get_font_weight(self)->int: pass

  def get_font_stretch(self)->int: pass

  def get_spacing(self, spacing:int )->int: pass

  def get_opentype_features(self)->__core__.Dictionary: pass

  def set_cache_capacity(self, single_line:int, multi_line:int)->None: pass

  def get_string_size(self, text:str, alignment:int =0, width:float=-1, font_size:int=16, justification_flags:int=3, direction:int =0, orientation:int =0)->__core__.Vector2: pass

  def get_multiline_string_size(self, text:str, alignment:int =0, width:float=-1, font_size:int=16, max_lines:int=-1, brk_flags:int=3, justification_flags:int=3, direction:int =0, orientation:int =0)->__core__.Vector2: pass

  def draw_string(self, canvas_item:__core__.RID, pos:__core__.Vector2, text:str, alignment:int =0, width:float=-1, font_size:int=16, modulate:__core__.Color= __core__.Color.new0(), justification_flags:int=3, direction:int =0, orientation:int =0)->None: pass

  def draw_multiline_string(self, canvas_item:__core__.RID, pos:__core__.Vector2, text:str, alignment:int =0, width:float=-1, font_size:int=16, max_lines:int=-1, modulate:__core__.Color= __core__.Color.new0(), brk_flags:int=3, justification_flags:int=3, direction:int =0, orientation:int =0)->None: pass

  def draw_string_outline(self, canvas_item:__core__.RID, pos:__core__.Vector2, text:str, alignment:int =0, width:float=-1, font_size:int=16, size:int=1, modulate:__core__.Color= __core__.Color.new0(), justification_flags:int=3, direction:int =0, orientation:int =0)->None: pass

  def draw_multiline_string_outline(self, canvas_item:__core__.RID, pos:__core__.Vector2, text:str, alignment:int =0, width:float=-1, font_size:int=16, max_lines:int=-1, size:int=1, modulate:__core__.Color= __core__.Color.new0(), brk_flags:int=3, justification_flags:int=3, direction:int =0, orientation:int =0)->None: pass

  def get_char_size(self, char:int, font_size:int)->__core__.Vector2: pass

  def draw_char(self, canvas_item:__core__.RID, pos:__core__.Vector2, char:int, font_size:int, modulate:__core__.Color= __core__.Color.new0())->float: pass

  def draw_char_outline(self, canvas_item:__core__.RID, pos:__core__.Vector2, char:int, font_size:int, size:int=-1, modulate:__core__.Color= __core__.Color.new0())->float: pass

  def has_char(self, char:int)->bool: pass

  def get_supported_chars(self)->str: pass

  def is_language_supported(self, language:str)->bool: pass

  def is_script_supported(self, script:str)->bool: pass

  def get_supported_feature_list(self)->__core__.Dictionary: pass

  def get_supported_variation_list(self)->__core__.Dictionary: pass

  def get_face_count(self)->int: pass


