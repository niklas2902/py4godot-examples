from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.PortableCompressedTexture2D.PortableCompressedTexture2D as __portablecompressedtexture2d__
import py4godot.classes.Texture2D.Texture2D as __texture2d__
import py4godot.classes.Image.Image as __image__


class PortableCompressedTexture2D(__texture2d__.Texture2D):

  @staticmethod
  def constructor()->PortableCompressedTexture2D:pass



  @staticmethod
  def cast(other:__object__.Object)->PortableCompressedTexture2D:pass


  @property
  def size_override(self)->__core__.Vector2: pass
  @size_override.setter
  def size_override(self,  value:__core__.Vector2)->None: pass
  @property
  def keep_compressed_buffer(self)->bool: pass
  @keep_compressed_buffer.setter
  def keep_compressed_buffer(self,  value:bool)->None: pass
  def create_from_image(self, image:__image__.Image, compression_mode:int , normal_map:bool=False, lossy_quality:float=0.8)->None: pass

  def get_format(self)->int: pass

  def get_compression_mode(self)->int: pass

  def set_size_override(self, size:__core__.Vector2)->None: pass

  def get_size_override(self)->__core__.Vector2: pass

  def set_keep_compressed_buffer(self, keep:bool)->None: pass

  def is_keeping_compressed_buffer(self)->bool: pass

  @staticmethod
  def set_keep_all_compressed_buffers(keep:bool)->None: pass

  @staticmethod
  def is_keeping_all_compressed_buffers()->bool: pass


