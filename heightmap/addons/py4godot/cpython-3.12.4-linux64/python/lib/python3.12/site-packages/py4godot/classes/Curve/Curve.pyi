from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Curve.Curve as __curve__
import py4godot.classes.Resource.Resource as __resource__


class Curve(__resource__.Resource):
  range_changed: BuiltinSignal

  @staticmethod
  def constructor()->Curve:pass



  @staticmethod
  def cast(other:__object__.Object)->Curve:pass


  @property
  def min_value(self)->float: pass
  @min_value.setter
  def min_value(self,  value:float)->None: pass
  @property
  def max_value(self)->float: pass
  @max_value.setter
  def max_value(self,  value:float)->None: pass
  @property
  def bake_resolution(self)->int: pass
  @bake_resolution.setter
  def bake_resolution(self,  value:int)->None: pass
  @property
  def point_count(self)->int: pass
  @point_count.setter
  def point_count(self,  value:int)->None: pass
  def get_point_count(self)->int: pass

  def set_point_count(self, count:int)->None: pass

  def add_point(self, position:__core__.Vector2, left_tangent:float=0, right_tangent:float=0, left_mode:int =0, right_mode:int =0)->int: pass

  def remove_point(self, index:int)->None: pass

  def clear_points(self)->None: pass

  def get_point_position(self, index:int)->__core__.Vector2: pass

  def set_point_value(self, index:int, y:float)->None: pass

  def set_point_offset(self, index:int, offset:float)->int: pass

  def sample(self, offset:float)->float: pass

  def sample_baked(self, offset:float)->float: pass

  def get_point_left_tangent(self, index:int)->float: pass

  def get_point_right_tangent(self, index:int)->float: pass

  def get_point_left_mode(self, index:int)->int: pass

  def get_point_right_mode(self, index:int)->int: pass

  def set_point_left_tangent(self, index:int, tangent:float)->None: pass

  def set_point_right_tangent(self, index:int, tangent:float)->None: pass

  def set_point_left_mode(self, index:int, mode:int )->None: pass

  def set_point_right_mode(self, index:int, mode:int )->None: pass

  def get_min_value(self)->float: pass

  def set_min_value(self, min:float)->None: pass

  def get_max_value(self)->float: pass

  def set_max_value(self, max:float)->None: pass

  def clean_dupes(self)->None: pass

  def bake(self)->None: pass

  def get_bake_resolution(self)->int: pass

  def set_bake_resolution(self, resolution:int)->None: pass


