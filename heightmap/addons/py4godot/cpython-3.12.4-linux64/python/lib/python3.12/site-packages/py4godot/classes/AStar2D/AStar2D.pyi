from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.RefCounted.RefCounted as __refcounted__


class AStar2D(__refcounted__.RefCounted):

  @staticmethod
  def constructor()->AStar2D:pass



  @staticmethod
  def cast(other:__object__.Object)->AStar2D:pass


  def _estimate_cost(self, from_id:int, to_id:int)->float: pass

  def _compute_cost(self, from_id:int, to_id:int)->float: pass

  def get_available_point_id(self)->int: pass

  def add_point(self, id:int, position:__core__.Vector2, weight_scale:float=1.0)->None: pass

  def get_point_position(self, id:int)->__core__.Vector2: pass

  def set_point_position(self, id:int, position:__core__.Vector2)->None: pass

  def get_point_weight_scale(self, id:int)->float: pass

  def set_point_weight_scale(self, id:int, weight_scale:float)->None: pass

  def remove_point(self, id:int)->None: pass

  def has_point(self, id:int)->bool: pass

  def get_point_connections(self, id:int)->__core__.PackedInt64Array: pass

  def get_point_ids(self)->__core__.PackedInt64Array: pass

  def set_point_disabled(self, id:int, disabled:bool=True)->None: pass

  def is_point_disabled(self, id:int)->bool: pass

  def connect_points(self, id:int, to_id:int, bidirectional:bool=True)->None: pass

  def disconnect_points(self, id:int, to_id:int, bidirectional:bool=True)->None: pass

  def are_points_connected(self, id:int, to_id:int, bidirectional:bool=True)->bool: pass

  def get_point_count(self)->int: pass

  def get_point_capacity(self)->int: pass

  def reserve_space(self, num_nodes:int)->None: pass

  def clear(self)->None: pass

  def get_closest_point(self, to_position:__core__.Vector2, include_disabled:bool=False)->int: pass

  def get_closest_position_in_segment(self, to_position:__core__.Vector2)->__core__.Vector2: pass

  def get_point_path(self, from_id:int, to_id:int, allow_partial_path:bool=False)->__core__.PackedVector2Array: pass

  def get_id_path(self, from_id:int, to_id:int, allow_partial_path:bool=False)->__core__.PackedInt64Array: pass


