from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.RefCounted.RefCounted as __refcounted__
import py4godot.classes.RenderingDevice.RenderingDevice as __renderingdevice__


class RDShaderSource(__refcounted__.RefCounted):

  @staticmethod
  def constructor()->RDShaderSource:pass



  @staticmethod
  def cast(other:__object__.Object)->RDShaderSource:pass


  @property
  def source_vertex(self)->str: pass
  @source_vertex.setter
  def source_vertex(self,  value:str)->None: pass
  @property
  def source_fragment(self)->str: pass
  @source_fragment.setter
  def source_fragment(self,  value:str)->None: pass
  @property
  def source_tesselation_control(self)->str: pass
  @source_tesselation_control.setter
  def source_tesselation_control(self,  value:str)->None: pass
  @property
  def source_tesselation_evaluation(self)->str: pass
  @source_tesselation_evaluation.setter
  def source_tesselation_evaluation(self,  value:str)->None: pass
  @property
  def source_compute(self)->str: pass
  @source_compute.setter
  def source_compute(self,  value:str)->None: pass
  @property
  def language(self)->int: pass
  @language.setter
  def language(self,  value:int)->None: pass
  def set_stage_source(self, stage:int , source:str)->None: pass

  def get_stage_source(self, stage:int )->str: pass

  def set_language(self, language:int )->None: pass

  def get_language(self)->int: pass


