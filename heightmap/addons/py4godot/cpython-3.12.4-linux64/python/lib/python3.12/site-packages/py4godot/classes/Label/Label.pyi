from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.LabelSettings.LabelSettings as __labelsettings__
import py4godot.classes.Control.Control as __control__
import py4godot.classes.TextServer.TextServer as __textserver__


class Label(__control__.Control):

  @staticmethod
  def constructor()->Label:pass



  @staticmethod
  def cast(other:__object__.Object)->Label:pass


  @property
  def text(self)->str: pass
  @text.setter
  def text(self,  value:str)->None: pass
  @property
  def label_settings(self)->__labelsettings__.LabelSettings: pass
  @label_settings.setter
  def label_settings(self,  value:__labelsettings__.LabelSettings)->None: pass
  @property
  def horizontal_alignment(self)->int: pass
  @horizontal_alignment.setter
  def horizontal_alignment(self,  value:int)->None: pass
  @property
  def vertical_alignment(self)->int: pass
  @vertical_alignment.setter
  def vertical_alignment(self,  value:int)->None: pass
  @property
  def autowrap_mode(self)->int: pass
  @autowrap_mode.setter
  def autowrap_mode(self,  value:int)->None: pass
  @property
  def justification_flags(self)->int: pass
  @justification_flags.setter
  def justification_flags(self,  value:int)->None: pass
  @property
  def clip_text(self)->bool: pass
  @clip_text.setter
  def clip_text(self,  value:bool)->None: pass
  @property
  def text_overrun_behavior(self)->int: pass
  @text_overrun_behavior.setter
  def text_overrun_behavior(self,  value:int)->None: pass
  @property
  def ellipsis_char(self)->str: pass
  @ellipsis_char.setter
  def ellipsis_char(self,  value:str)->None: pass
  @property
  def uppercase(self)->bool: pass
  @uppercase.setter
  def uppercase(self,  value:bool)->None: pass
  @property
  def tab_stops(self)->__core__.PackedFloat32Array: pass
  @tab_stops.setter
  def tab_stops(self,  value:__core__.PackedFloat32Array)->None: pass
  @property
  def lines_skipped(self)->int: pass
  @lines_skipped.setter
  def lines_skipped(self,  value:int)->None: pass
  @property
  def max_lines_visible(self)->int: pass
  @max_lines_visible.setter
  def max_lines_visible(self,  value:int)->None: pass
  @property
  def visible_characters(self)->int: pass
  @visible_characters.setter
  def visible_characters(self,  value:int)->None: pass
  @property
  def visible_characters_behavior(self)->int: pass
  @visible_characters_behavior.setter
  def visible_characters_behavior(self,  value:int)->None: pass
  @property
  def visible_ratio(self)->float: pass
  @visible_ratio.setter
  def visible_ratio(self,  value:float)->None: pass
  @property
  def text_direction(self)->int: pass
  @text_direction.setter
  def text_direction(self,  value:int)->None: pass
  @property
  def language(self)->str: pass
  @language.setter
  def language(self,  value:str)->None: pass
  @property
  def structured_text_bidi_override(self)->int: pass
  @structured_text_bidi_override.setter
  def structured_text_bidi_override(self,  value:int)->None: pass
  @property
  def structured_text_bidi_override_options(self)->__core__.Array: pass
  @structured_text_bidi_override_options.setter
  def structured_text_bidi_override_options(self,  value:__core__.Array)->None: pass
  def set_horizontal_alignment(self, alignment:int )->None: pass

  def get_horizontal_alignment(self)->int: pass

  def set_vertical_alignment(self, alignment:int )->None: pass

  def get_vertical_alignment(self)->int: pass

  def set_text(self, text:str)->None: pass

  def get_text(self)->str: pass

  def set_label_settings(self, settings:__labelsettings__.LabelSettings)->None: pass

  def get_label_settings(self)->__labelsettings__.LabelSettings: pass

  def set_text_direction(self, direction:int )->None: pass

  def get_text_direction(self)->int: pass

  def set_language(self, language:str)->None: pass

  def get_language(self)->str: pass

  def set_autowrap_mode(self, autowrap_mode:int )->None: pass

  def get_autowrap_mode(self)->int: pass

  def set_justification_flags(self, justification_flags:int)->None: pass

  def get_justification_flags(self)->int: pass

  def set_clip_text(self, enable:bool)->None: pass

  def is_clipping_text(self)->bool: pass

  def set_tab_stops(self, tab_stops:__core__.PackedFloat32Array)->None: pass

  def get_tab_stops(self)->__core__.PackedFloat32Array: pass

  def set_text_overrun_behavior(self, overrun_behavior:int )->None: pass

  def get_text_overrun_behavior(self)->int: pass

  def set_ellipsis_char(self, char:str)->None: pass

  def get_ellipsis_char(self)->str: pass

  def set_uppercase(self, enable:bool)->None: pass

  def is_uppercase(self)->bool: pass

  def get_line_height(self, line:int=-1)->int: pass

  def get_line_count(self)->int: pass

  def get_visible_line_count(self)->int: pass

  def get_total_character_count(self)->int: pass

  def set_visible_characters(self, amount:int)->None: pass

  def get_visible_characters(self)->int: pass

  def get_visible_characters_behavior(self)->int: pass

  def set_visible_characters_behavior(self, behavior:int )->None: pass

  def set_visible_ratio(self, ratio:float)->None: pass

  def get_visible_ratio(self)->float: pass

  def set_lines_skipped(self, lines_skipped:int)->None: pass

  def get_lines_skipped(self)->int: pass

  def set_max_lines_visible(self, lines_visible:int)->None: pass

  def get_max_lines_visible(self)->int: pass

  def set_structured_text_bidi_override(self, parser:int )->None: pass

  def get_structured_text_bidi_override(self)->int: pass

  def set_structured_text_bidi_override_options(self, args:__core__.Array)->None: pass

  def get_structured_text_bidi_override_options(self)->__core__.Array: pass

  def get_character_bounds(self, pos:int)->__core__.Rect2: pass


