from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Range.Range as __range__
import py4godot.classes.Texture2D.Texture2D as __texture2d__


class TextureProgressBar(__range__.Range):

  @staticmethod
  def constructor()->TextureProgressBar:pass



  @staticmethod
  def cast(other:__object__.Object)->TextureProgressBar:pass


  @property
  def fill_mode(self)->int: pass
  @fill_mode.setter
  def fill_mode(self,  value:int)->None: pass
  @property
  def radial_initial_angle(self)->float: pass
  @radial_initial_angle.setter
  def radial_initial_angle(self,  value:float)->None: pass
  @property
  def radial_fill_degrees(self)->float: pass
  @radial_fill_degrees.setter
  def radial_fill_degrees(self,  value:float)->None: pass
  @property
  def radial_center_offset(self)->__core__.Vector2: pass
  @radial_center_offset.setter
  def radial_center_offset(self,  value:__core__.Vector2)->None: pass
  @property
  def nine_patch_stretch(self)->bool: pass
  @nine_patch_stretch.setter
  def nine_patch_stretch(self,  value:bool)->None: pass
  @property
  def stretch_margin_left(self)->int: pass
  @stretch_margin_left.setter
  def stretch_margin_left(self,  value:int)->None: pass
  @property
  def stretch_margin_top(self)->int: pass
  @stretch_margin_top.setter
  def stretch_margin_top(self,  value:int)->None: pass
  @property
  def stretch_margin_right(self)->int: pass
  @stretch_margin_right.setter
  def stretch_margin_right(self,  value:int)->None: pass
  @property
  def stretch_margin_bottom(self)->int: pass
  @stretch_margin_bottom.setter
  def stretch_margin_bottom(self,  value:int)->None: pass
  @property
  def texture_under(self)->__texture2d__.Texture2D: pass
  @texture_under.setter
  def texture_under(self,  value:__texture2d__.Texture2D)->None: pass
  @property
  def texture_over(self)->__texture2d__.Texture2D: pass
  @texture_over.setter
  def texture_over(self,  value:__texture2d__.Texture2D)->None: pass
  @property
  def texture_progress(self)->__texture2d__.Texture2D: pass
  @texture_progress.setter
  def texture_progress(self,  value:__texture2d__.Texture2D)->None: pass
  @property
  def texture_progress_offset(self)->__core__.Vector2: pass
  @texture_progress_offset.setter
  def texture_progress_offset(self,  value:__core__.Vector2)->None: pass
  @property
  def tint_under(self)->__core__.Color: pass
  @tint_under.setter
  def tint_under(self,  value:__core__.Color)->None: pass
  @property
  def tint_over(self)->__core__.Color: pass
  @tint_over.setter
  def tint_over(self,  value:__core__.Color)->None: pass
  @property
  def tint_progress(self)->__core__.Color: pass
  @tint_progress.setter
  def tint_progress(self,  value:__core__.Color)->None: pass
  def set_under_texture(self, tex:__texture2d__.Texture2D)->None: pass

  def get_under_texture(self)->__texture2d__.Texture2D: pass

  def set_progress_texture(self, tex:__texture2d__.Texture2D)->None: pass

  def get_progress_texture(self)->__texture2d__.Texture2D: pass

  def set_over_texture(self, tex:__texture2d__.Texture2D)->None: pass

  def get_over_texture(self)->__texture2d__.Texture2D: pass

  def set_fill_mode(self, mode:int)->None: pass

  def get_fill_mode(self)->int: pass

  def set_tint_under(self, tint:__core__.Color)->None: pass

  def get_tint_under(self)->__core__.Color: pass

  def set_tint_progress(self, tint:__core__.Color)->None: pass

  def get_tint_progress(self)->__core__.Color: pass

  def set_tint_over(self, tint:__core__.Color)->None: pass

  def get_tint_over(self)->__core__.Color: pass

  def set_texture_progress_offset(self, offset:__core__.Vector2)->None: pass

  def get_texture_progress_offset(self)->__core__.Vector2: pass

  def set_radial_initial_angle(self, mode:float)->None: pass

  def get_radial_initial_angle(self)->float: pass

  def set_radial_center_offset(self, mode:__core__.Vector2)->None: pass

  def get_radial_center_offset(self)->__core__.Vector2: pass

  def set_fill_degrees(self, mode:float)->None: pass

  def get_fill_degrees(self)->float: pass

  def set_stretch_margin(self, margin:int , value:int)->None: pass

  def get_stretch_margin(self, margin:int )->int: pass

  def set_nine_patch_stretch(self, stretch:bool)->None: pass

  def get_nine_patch_stretch(self)->bool: pass


