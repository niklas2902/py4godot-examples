from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Object.Object as __object__
import py4godot.classes.InputEvent.InputEvent as __inputevent__


class InputMap(__object__.Object):



  @staticmethod
  def cast(other:__object__.Object)->InputMap:pass

  @staticmethod
  def get_instance()->InputMap:pass

  def has_action(self, action:__core__.StringName)->bool: pass

  def get_actions(self)->__core__.Array: pass

  def add_action(self, action:__core__.StringName, deadzone:float=0.5)->None: pass

  def erase_action(self, action:__core__.StringName)->None: pass

  def action_set_deadzone(self, action:__core__.StringName, deadzone:float)->None: pass

  def action_get_deadzone(self, action:__core__.StringName)->float: pass

  def action_add_event(self, action:__core__.StringName, event:__inputevent__.InputEvent)->None: pass

  def action_has_event(self, action:__core__.StringName, event:__inputevent__.InputEvent)->bool: pass

  def action_erase_event(self, action:__core__.StringName, event:__inputevent__.InputEvent)->None: pass

  def action_erase_events(self, action:__core__.StringName)->None: pass

  def action_get_events(self, action:__core__.StringName)->__core__.Array: pass

  def event_is_action(self, event:__inputevent__.InputEvent, action:__core__.StringName, exact_match:bool=False)->bool: pass

  def load_from_project_settings(self)->None: pass


