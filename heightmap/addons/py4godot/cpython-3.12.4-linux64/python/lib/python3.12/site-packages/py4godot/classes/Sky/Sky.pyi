from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Material.Material as __material__
import py4godot.classes.ShaderMaterial.ShaderMaterial as __shadermaterial__
import py4godot.classes.Sky.Sky as __sky__
import py4godot.classes.Resource.Resource as __resource__


class Sky(__resource__.Resource):

  @staticmethod
  def constructor()->Sky:pass



  @staticmethod
  def cast(other:__object__.Object)->Sky:pass


  @property
  def sky_material(self)->PanoramaSkyMaterial,ProceduralSkyMaterial,PhysicalSkyMaterial,ShaderMaterial: pass
  @sky_material.setter
  def sky_material(self,  value:__shadermaterial__.ShaderMaterial)->None: pass
  @property
  def process_mode(self)->int: pass
  @process_mode.setter
  def process_mode(self,  value:int)->None: pass
  @property
  def radiance_size(self)->int: pass
  @radiance_size.setter
  def radiance_size(self,  value:int)->None: pass
  def set_radiance_size(self, size:int )->None: pass

  def get_radiance_size(self)->int: pass

  def set_process_mode(self, mode:int )->None: pass

  def get_process_mode(self)->int: pass

  def set_material(self, material:__material__.Material)->None: pass

  def get_material(self)->__material__.Material: pass


