from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.RefCounted.RefCounted as __refcounted__
import py4godot.classes.RenderingDevice.RenderingDevice as __renderingdevice__


class RDTextureFormat(__refcounted__.RefCounted):

  @staticmethod
  def constructor()->RDTextureFormat:pass



  @staticmethod
  def cast(other:__object__.Object)->RDTextureFormat:pass


  @property
  def format(self)->int: pass
  @format.setter
  def format(self,  value:int)->None: pass
  @property
  def width(self)->int: pass
  @width.setter
  def width(self,  value:int)->None: pass
  @property
  def height(self)->int: pass
  @height.setter
  def height(self,  value:int)->None: pass
  @property
  def depth(self)->int: pass
  @depth.setter
  def depth(self,  value:int)->None: pass
  @property
  def array_layers(self)->int: pass
  @array_layers.setter
  def array_layers(self,  value:int)->None: pass
  @property
  def mipmaps(self)->int: pass
  @mipmaps.setter
  def mipmaps(self,  value:int)->None: pass
  @property
  def texture_type(self)->int: pass
  @texture_type.setter
  def texture_type(self,  value:int)->None: pass
  @property
  def samples(self)->int: pass
  @samples.setter
  def samples(self,  value:int)->None: pass
  @property
  def usage_bits(self)->int: pass
  @usage_bits.setter
  def usage_bits(self,  value:int)->None: pass
  def set_format(self, p_member:int )->None: pass

  def get_format(self)->int: pass

  def set_width(self, p_member:int)->None: pass

  def get_width(self)->int: pass

  def set_height(self, p_member:int)->None: pass

  def get_height(self)->int: pass

  def set_depth(self, p_member:int)->None: pass

  def get_depth(self)->int: pass

  def set_array_layers(self, p_member:int)->None: pass

  def get_array_layers(self)->int: pass

  def set_mipmaps(self, p_member:int)->None: pass

  def get_mipmaps(self)->int: pass

  def set_texture_type(self, p_member:int )->None: pass

  def get_texture_type(self)->int: pass

  def set_samples(self, p_member:int )->None: pass

  def get_samples(self)->int: pass

  def set_usage_bits(self, p_member:int)->None: pass

  def get_usage_bits(self)->int: pass

  def add_shareable_format(self, format:int )->None: pass

  def remove_shareable_format(self, format:int )->None: pass


