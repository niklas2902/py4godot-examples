from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Texture3D.Texture3D as __texture3d__
import py4godot.classes.Material.Material as __material__


class FogMaterial(__material__.Material):

  @staticmethod
  def constructor()->FogMaterial:pass



  @staticmethod
  def cast(other:__object__.Object)->FogMaterial:pass


  @property
  def density(self)->float: pass
  @density.setter
  def density(self,  value:float)->None: pass
  @property
  def albedo(self)->__core__.Color: pass
  @albedo.setter
  def albedo(self,  value:__core__.Color)->None: pass
  @property
  def emission(self)->__core__.Color: pass
  @emission.setter
  def emission(self,  value:__core__.Color)->None: pass
  @property
  def height_falloff(self)->float: pass
  @height_falloff.setter
  def height_falloff(self,  value:float)->None: pass
  @property
  def edge_fade(self)->float: pass
  @edge_fade.setter
  def edge_fade(self,  value:float)->None: pass
  @property
  def density_texture(self)->__texture3d__.Texture3D: pass
  @density_texture.setter
  def density_texture(self,  value:__texture3d__.Texture3D)->None: pass
  def set_density(self, density:float)->None: pass

  def get_density(self)->float: pass

  def set_albedo(self, albedo:__core__.Color)->None: pass

  def get_albedo(self)->__core__.Color: pass

  def set_emission(self, emission:__core__.Color)->None: pass

  def get_emission(self)->__core__.Color: pass

  def set_height_falloff(self, height_falloff:float)->None: pass

  def get_height_falloff(self)->float: pass

  def set_edge_fade(self, edge_fade:float)->None: pass

  def get_edge_fade(self)->float: pass

  def set_density_texture(self, density_texture:__texture3d__.Texture3D)->None: pass

  def get_density_texture(self)->__texture3d__.Texture3D: pass


