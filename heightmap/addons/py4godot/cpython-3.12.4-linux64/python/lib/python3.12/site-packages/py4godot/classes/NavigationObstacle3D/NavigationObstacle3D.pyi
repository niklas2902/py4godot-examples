from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Node3D.Node3D as __node3d__


class NavigationObstacle3D(__node3d__.Node3D):

  @staticmethod
  def constructor()->NavigationObstacle3D:pass



  @staticmethod
  def cast(other:__object__.Object)->NavigationObstacle3D:pass


  @property
  def radius(self)->float: pass
  @radius.setter
  def radius(self,  value:float)->None: pass
  @property
  def height(self)->float: pass
  @height.setter
  def height(self,  value:float)->None: pass
  @property
  def vertices(self)->__core__.PackedVector3Array: pass
  @vertices.setter
  def vertices(self,  value:__core__.PackedVector3Array)->None: pass
  @property
  def affect_navigation_mesh(self)->bool: pass
  @affect_navigation_mesh.setter
  def affect_navigation_mesh(self,  value:bool)->None: pass
  @property
  def carve_navigation_mesh(self)->bool: pass
  @carve_navigation_mesh.setter
  def carve_navigation_mesh(self,  value:bool)->None: pass
  @property
  def avoidance_enabled(self)->bool: pass
  @avoidance_enabled.setter
  def avoidance_enabled(self,  value:bool)->None: pass
  @property
  def velocity(self)->__core__.Vector3: pass
  @velocity.setter
  def velocity(self,  value:__core__.Vector3)->None: pass
  @property
  def avoidance_layers(self)->int: pass
  @avoidance_layers.setter
  def avoidance_layers(self,  value:int)->None: pass
  @property
  def use_3d_avoidance(self)->bool: pass
  @use_3d_avoidance.setter
  def use_3d_avoidance(self,  value:bool)->None: pass
  def get_rid(self)->__core__.RID: pass

  def set_avoidance_enabled(self, enabled:bool)->None: pass

  def get_avoidance_enabled(self)->bool: pass

  def set_navigation_map(self, navigation_map:__core__.RID)->None: pass

  def get_navigation_map(self)->__core__.RID: pass

  def set_radius(self, radius:float)->None: pass

  def get_radius(self)->float: pass

  def set_height(self, height:float)->None: pass

  def get_height(self)->float: pass

  def set_velocity(self, velocity:__core__.Vector3)->None: pass

  def get_velocity(self)->__core__.Vector3: pass

  def set_vertices(self, vertices:__core__.PackedVector3Array)->None: pass

  def get_vertices(self)->__core__.PackedVector3Array: pass

  def set_avoidance_layers(self, layers:int)->None: pass

  def get_avoidance_layers(self)->int: pass

  def set_avoidance_layer_value(self, layer_number:int, value:bool)->None: pass

  def get_avoidance_layer_value(self, layer_number:int)->bool: pass

  def set_use_3d_avoidance(self, enabled:bool)->None: pass

  def get_use_3d_avoidance(self)->bool: pass

  def set_affect_navigation_mesh(self, enabled:bool)->None: pass

  def get_affect_navigation_mesh(self)->bool: pass

  def set_carve_navigation_mesh(self, enabled:bool)->None: pass

  def get_carve_navigation_mesh(self)->bool: pass


