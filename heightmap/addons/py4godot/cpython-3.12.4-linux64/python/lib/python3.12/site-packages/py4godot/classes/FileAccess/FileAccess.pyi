from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.RefCounted.RefCounted as __refcounted__
import py4godot.classes.FileAccess.FileAccess as __fileaccess__


class FileAccess(__refcounted__.RefCounted):

  @staticmethod
  def constructor()->FileAccess:pass



  @staticmethod
  def cast(other:__object__.Object)->FileAccess:pass


  @property
  def big_endian(self)->bool: pass
  @big_endian.setter
  def big_endian(self,  value:bool)->None: pass
  @staticmethod
  def open(path:str, flags:int )->__fileaccess__.FileAccess: pass

  @staticmethod
  def open_encrypted(path:str, mode_flags:int , key:__core__.PackedByteArray)->__fileaccess__.FileAccess: pass

  @staticmethod
  def open_encrypted_with_pass(path:str, mode_flags:int , pass_:str)->__fileaccess__.FileAccess: pass

  @staticmethod
  def open_compressed(path:str, mode_flags:int , compression_mode:int =0)->__fileaccess__.FileAccess: pass

  @staticmethod
  def get_open_error()->int: pass

  @staticmethod
  def get_file_as_bytes(path:str)->__core__.PackedByteArray: pass

  @staticmethod
  def get_file_as_string(path:str)->str: pass

  def resize(self, length:int)->int: pass

  def flush(self)->None: pass

  def get_path(self)->str: pass

  def get_path_absolute(self)->str: pass

  def is_open(self)->bool: pass

  def seek(self, position:int)->None: pass

  def seek_end(self, position:int=0)->None: pass

  def get_position(self)->int: pass

  def get_length(self)->int: pass

  def eof_reached(self)->bool: pass

  def get_8(self)->int: pass

  def get_16(self)->int: pass

  def get_32(self)->int: pass

  def get_64(self)->int: pass

  def get_float(self)->float: pass

  def get_double(self)->float: pass

  def get_real(self)->float: pass

  def get_buffer(self, length:int)->__core__.PackedByteArray: pass

  def get_line(self)->str: pass

  def get_csv_line(self, delim:str= __core__.String.new0())->__core__.PackedStringArray: pass

  def get_as_text(self, skip_cr:bool=False)->str: pass

  @staticmethod
  def get_md5(path:str)->str: pass

  @staticmethod
  def get_sha256(path:str)->str: pass

  def is_big_endian(self)->bool: pass

  def set_big_endian(self, big_endian:bool)->None: pass

  def get_error(self)->int: pass

  def get_var(self, allow_objects:bool=False)->object: pass

  def store_8(self, value:int)->None: pass

  def store_16(self, value:int)->None: pass

  def store_32(self, value:int)->None: pass

  def store_64(self, value:int)->None: pass

  def store_float(self, value:float)->None: pass

  def store_double(self, value:float)->None: pass

  def store_real(self, value:float)->None: pass

  def store_buffer(self, buffer:__core__.PackedByteArray)->None: pass

  def store_line(self, line:str)->None: pass

  def store_csv_line(self, values:__core__.PackedStringArray, delim:str= __core__.String.new0())->None: pass

  def store_string(self, string:str)->None: pass

  def store_var(self, value:object, full_objects:bool=False)->None: pass

  def store_pascal_string(self, string:str)->None: pass

  def get_pascal_string(self)->str: pass

  def close(self)->None: pass

  @staticmethod
  def file_exists(path:str)->bool: pass

  @staticmethod
  def get_modified_time(file:str)->int: pass

  @staticmethod
  def get_unix_permissions(file:str)->int: pass

  @staticmethod
  def set_unix_permissions(file:str, permissions:int)->int: pass

  @staticmethod
  def get_hidden_attribute(file:str)->bool: pass

  @staticmethod
  def set_hidden_attribute(file:str, hidden:bool)->int: pass

  @staticmethod
  def set_read_only_attribute(file:str, ro:bool)->int: pass

  @staticmethod
  def get_read_only_attribute(file:str)->bool: pass


