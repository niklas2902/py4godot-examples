from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Node3D.Node3D as __node3d__


class Joint3D(__node3d__.Node3D):

  @staticmethod
  def constructor()->Joint3D:pass



  @staticmethod
  def cast(other:__object__.Object)->Joint3D:pass


  @property
  def node_a(self)->__core__.NodePath: pass
  @node_a.setter
  def node_a(self,  value:__core__.NodePath)->None: pass
  @property
  def node_b(self)->__core__.NodePath: pass
  @node_b.setter
  def node_b(self,  value:__core__.NodePath)->None: pass
  @property
  def solver_priority(self)->int: pass
  @solver_priority.setter
  def solver_priority(self,  value:int)->None: pass
  @property
  def exclude_nodes_from_collision(self)->bool: pass
  @exclude_nodes_from_collision.setter
  def exclude_nodes_from_collision(self,  value:bool)->None: pass
  def set_node_a(self, node:__core__.NodePath)->None: pass

  def get_node_a(self)->__core__.NodePath: pass

  def set_node_b(self, node:__core__.NodePath)->None: pass

  def get_node_b(self)->__core__.NodePath: pass

  def set_solver_priority(self, priority:int)->None: pass

  def get_solver_priority(self)->int: pass

  def set_exclude_nodes_from_collision(self, enable:bool)->None: pass

  def get_exclude_nodes_from_collision(self)->bool: pass

  def get_rid(self)->__core__.RID: pass


