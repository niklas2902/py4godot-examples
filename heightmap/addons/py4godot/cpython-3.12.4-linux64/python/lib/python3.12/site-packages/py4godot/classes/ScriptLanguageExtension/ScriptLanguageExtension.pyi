from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Script.Script as __script__
import py4godot.classes.ScriptLanguage.ScriptLanguage as __scriptlanguage__
import py4godot.classes.Object.Object as __object__


class ScriptLanguageExtension(__scriptlanguage__.ScriptLanguage):

  @staticmethod
  def constructor()->ScriptLanguageExtension:pass



  @staticmethod
  def cast(other:__object__.Object)->ScriptLanguageExtension:pass


  def _get_name(self)->str: pass

  def _init(self)->None: pass

  def _get_type(self)->str: pass

  def _get_extension(self)->str: pass

  def _finish(self)->None: pass

  def _get_reserved_words(self)->__core__.PackedStringArray: pass

  def _is_control_flow_keyword(self, keyword:str)->bool: pass

  def _get_comment_delimiters(self)->__core__.PackedStringArray: pass

  def _get_doc_comment_delimiters(self)->__core__.PackedStringArray: pass

  def _get_string_delimiters(self)->__core__.PackedStringArray: pass

  def _make_template(self, template:str, class_name:str, base_class_name:str)->__script__.Script: pass

  def _get_built_in_templates(self, object:__core__.StringName)->__core__.Array: pass

  def _is_using_templates(self)->bool: pass

  def _validate(self, script:str, path:str, validate_functions:bool, validate_errors:bool, validate_warnings:bool, validate_safe_lines:bool)->__core__.Dictionary: pass

  def _validate_path(self, path:str)->str: pass

  def _create_script(self)->__object__.Object: pass

  def _has_named_classes(self)->bool: pass

  def _supports_builtin_mode(self)->bool: pass

  def _supports_documentation(self)->bool: pass

  def _can_inherit_from_file(self)->bool: pass

  def _find_function(self, function:str, code:str)->int: pass

  def _make_function(self, class_name:str, function_name:str, function_args:__core__.PackedStringArray)->str: pass

  def _can_make_function(self)->bool: pass

  def _open_in_external_editor(self, script:__script__.Script, line:int, column:int)->int: pass

  def _overrides_external_editor(self)->bool: pass

  def _preferred_file_name_casing(self)->int: pass

  def _complete_code(self, code:str, path:str, owner:__object__.Object)->__core__.Dictionary: pass

  def _lookup_code(self, code:str, symbol:str, path:str, owner:__object__.Object)->__core__.Dictionary: pass

  def _auto_indent_code(self, code:str, from_line:int, to_line:int)->str: pass

  def _add_global_constant(self, name:__core__.StringName, value:object)->None: pass

  def _add_named_global_constant(self, name:__core__.StringName, value:object)->None: pass

  def _remove_named_global_constant(self, name:__core__.StringName)->None: pass

  def _thread_enter(self)->None: pass

  def _thread_exit(self)->None: pass

  def _debug_get_error(self)->str: pass

  def _debug_get_stack_level_count(self)->int: pass

  def _debug_get_stack_level_line(self, level:int)->int: pass

  def _debug_get_stack_level_function(self, level:int)->str: pass

  def _debug_get_stack_level_source(self, level:int)->str: pass

  def _debug_get_stack_level_locals(self, level:int, max_subitems:int, max_depth:int)->__core__.Dictionary: pass

  def _debug_get_stack_level_members(self, level:int, max_subitems:int, max_depth:int)->__core__.Dictionary: pass

  def _debug_get_stack_level_instance(self, level:int)->void*: pass

  def _debug_get_globals(self, max_subitems:int, max_depth:int)->__core__.Dictionary: pass

  def _debug_parse_stack_level_expression(self, level:int, expression:str, max_subitems:int, max_depth:int)->str: pass

  def _debug_get_current_stack_info(self)->__core__.Array: pass

  def _reload_all_scripts(self)->None: pass

  def _reload_tool_script(self, script:__script__.Script, soft_reload:bool)->None: pass

  def _get_recognized_extensions(self)->__core__.PackedStringArray: pass

  def _get_public_functions(self)->__core__.Array: pass

  def _get_public_constants(self)->__core__.Dictionary: pass

  def _get_public_annotations(self)->__core__.Array: pass

  def _profiling_start(self)->None: pass

  def _profiling_stop(self)->None: pass

  def _profiling_set_save_native_calls(self, enable:bool)->None: pass

  def _frame(self)->None: pass

  def _handles_global_class_type(self, type:str)->bool: pass

  def _get_global_class_name(self, path:str)->__core__.Dictionary: pass


