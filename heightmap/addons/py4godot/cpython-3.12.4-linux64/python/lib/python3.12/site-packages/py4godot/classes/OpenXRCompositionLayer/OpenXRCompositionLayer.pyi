from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Object.Object as __object__
import py4godot.classes.Node3D.Node3D as __node3d__
import py4godot.classes.SubViewport.SubViewport as __subviewport__


class OpenXRCompositionLayer(__node3d__.Node3D):

  @staticmethod
  def constructor()->OpenXRCompositionLayer:pass



  @staticmethod
  def cast(other:__object__.Object)->OpenXRCompositionLayer:pass


  @property
  def layer_viewport(self)->__object__.Object: pass
  @layer_viewport.setter
  def layer_viewport(self,  value:__object__.Object)->None: pass
  @property
  def sort_order(self)->int: pass
  @sort_order.setter
  def sort_order(self,  value:int)->None: pass
  @property
  def alpha_blend(self)->bool: pass
  @alpha_blend.setter
  def alpha_blend(self,  value:bool)->None: pass
  @property
  def enable_hole_punch(self)->bool: pass
  @enable_hole_punch.setter
  def enable_hole_punch(self,  value:bool)->None: pass
  def set_layer_viewport(self, viewport:__subviewport__.SubViewport)->None: pass

  def get_layer_viewport(self)->__subviewport__.SubViewport: pass

  def set_enable_hole_punch(self, enable:bool)->None: pass

  def get_enable_hole_punch(self)->bool: pass

  def set_sort_order(self, order:int)->None: pass

  def get_sort_order(self)->int: pass

  def set_alpha_blend(self, enabled:bool)->None: pass

  def get_alpha_blend(self)->bool: pass

  def is_natively_supported(self)->bool: pass

  def intersects_ray(self, origin:__core__.Vector3, direction:__core__.Vector3)->__core__.Vector2: pass


