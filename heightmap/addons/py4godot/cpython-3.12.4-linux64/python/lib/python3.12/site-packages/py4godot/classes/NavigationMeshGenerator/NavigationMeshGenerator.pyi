from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Object.Object as __object__
import py4godot.classes.Node.Node as __node__
import py4godot.classes.NavigationMeshSourceGeometryData3D.NavigationMeshSourceGeometryData3D as __navigationmeshsourcegeometrydata3d__
import py4godot.classes.NavigationMesh.NavigationMesh as __navigationmesh__


class NavigationMeshGenerator(__object__.Object):



  @staticmethod
  def cast(other:__object__.Object)->NavigationMeshGenerator:pass

  @staticmethod
  def get_instance()->NavigationMeshGenerator:pass

  def bake(self, navigation_mesh:__navigationmesh__.NavigationMesh, root_node:__node__.Node)->None: pass

  def clear(self, navigation_mesh:__navigationmesh__.NavigationMesh)->None: pass

  def parse_source_geometry_data(self, navigation_mesh:__navigationmesh__.NavigationMesh, source_geometry_data:__navigationmeshsourcegeometrydata3d__.NavigationMeshSourceGeometryData3D, root_node:__node__.Node, callback:__core__.Callable= __core__.Callable.new0())->None: pass

  def bake_from_source_geometry_data(self, navigation_mesh:__navigationmesh__.NavigationMesh, source_geometry_data:__navigationmeshsourcegeometrydata3d__.NavigationMeshSourceGeometryData3D, callback:__core__.Callable= __core__.Callable.new0())->None: pass


