from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Object.Object as __object__
import py4godot.classes.UndoRedo.UndoRedo as __undoredo__


class UndoRedo(__object__.Object):
  version_changed: BuiltinSignal

  @staticmethod
  def constructor()->UndoRedo:pass



  @staticmethod
  def cast(other:__object__.Object)->UndoRedo:pass


  @property
  def max_steps(self)->int: pass
  @max_steps.setter
  def max_steps(self,  value:int)->None: pass
  def create_action(self, name:str, merge_mode:int =0, backward_undo_ops:bool=False)->None: pass

  def commit_action(self, execute:bool=True)->None: pass

  def is_committing_action(self)->bool: pass

  def add_do_method(self, callable:__core__.Callable)->None: pass

  def add_undo_method(self, callable:__core__.Callable)->None: pass

  def add_do_property(self, object:__object__.Object, property:__core__.StringName, value:object)->None: pass

  def add_undo_property(self, object:__object__.Object, property:__core__.StringName, value:object)->None: pass

  def add_do_reference(self, object:__object__.Object)->None: pass

  def add_undo_reference(self, object:__object__.Object)->None: pass

  def start_force_keep_in_merge_ends(self)->None: pass

  def end_force_keep_in_merge_ends(self)->None: pass

  def get_history_count(self)->int: pass

  def get_current_action(self)->int: pass

  def get_action_name(self, id:int)->str: pass

  def clear_history(self, increase_version:bool=True)->None: pass

  def get_current_action_name(self)->str: pass

  def has_undo(self)->bool: pass

  def has_redo(self)->bool: pass

  def get_version(self)->int: pass

  def set_max_steps(self, max_steps:int)->None: pass

  def get_max_steps(self)->int: pass

  def redo(self)->bool: pass

  def undo(self)->bool: pass


