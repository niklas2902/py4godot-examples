from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Tween.Tween as __tween__
import py4godot.classes.AnimationPlayer.AnimationPlayer as __animationplayer__
import py4godot.classes.AnimationMixer.AnimationMixer as __animationmixer__


class AnimationPlayer(__animationmixer__.AnimationMixer):
  current_animation_changed: BuiltinSignal
  animation_changed: BuiltinSignal

  @staticmethod
  def constructor()->AnimationPlayer:pass



  @staticmethod
  def cast(other:__object__.Object)->AnimationPlayer:pass


  @property
  def current_animation(self)->__core__.StringName: pass
  @current_animation.setter
  def current_animation(self,  value:__core__.StringName)->None: pass
  @property
  def assigned_animation(self)->__core__.StringName: pass
  @assigned_animation.setter
  def assigned_animation(self,  value:__core__.StringName)->None: pass
  @property
  def autoplay(self)->__core__.StringName: pass
  @autoplay.setter
  def autoplay(self,  value:__core__.StringName)->None: pass
  @property
  def current_animation_length(self)->float: pass
  @property
  def current_animation_position(self)->float: pass
  @property
  def playback_auto_capture(self)->bool: pass
  @playback_auto_capture.setter
  def playback_auto_capture(self,  value:bool)->None: pass
  @property
  def playback_auto_capture_duration(self)->float: pass
  @playback_auto_capture_duration.setter
  def playback_auto_capture_duration(self,  value:float)->None: pass
  @property
  def playback_auto_capture_transition_type(self)->int: pass
  @playback_auto_capture_transition_type.setter
  def playback_auto_capture_transition_type(self,  value:int)->None: pass
  @property
  def playback_auto_capture_ease_type(self)->int: pass
  @playback_auto_capture_ease_type.setter
  def playback_auto_capture_ease_type(self,  value:int)->None: pass
  @property
  def playback_default_blend_time(self)->float: pass
  @playback_default_blend_time.setter
  def playback_default_blend_time(self,  value:float)->None: pass
  @property
  def speed_scale(self)->float: pass
  @speed_scale.setter
  def speed_scale(self,  value:float)->None: pass
  @property
  def movie_quit_on_finish(self)->bool: pass
  @movie_quit_on_finish.setter
  def movie_quit_on_finish(self,  value:bool)->None: pass
  def animation_set_next(self, animation_from:__core__.StringName, animation_to:__core__.StringName)->None: pass

  def animation_get_next(self, animation_from:__core__.StringName)->__core__.StringName: pass

  def set_blend_time(self, animation_from:__core__.StringName, animation_to:__core__.StringName, sec:float)->None: pass

  def get_blend_time(self, animation_from:__core__.StringName, animation_to:__core__.StringName)->float: pass

  def set_default_blend_time(self, sec:float)->None: pass

  def get_default_blend_time(self)->float: pass

  def set_auto_capture(self, auto_capture:bool)->None: pass

  def is_auto_capture(self)->bool: pass

  def set_auto_capture_duration(self, auto_capture_duration:float)->None: pass

  def get_auto_capture_duration(self)->float: pass

  def set_auto_capture_transition_type(self, auto_capture_transition_type:int )->None: pass

  def get_auto_capture_transition_type(self)->int: pass

  def set_auto_capture_ease_type(self, auto_capture_ease_type:int )->None: pass

  def get_auto_capture_ease_type(self)->int: pass

  def play(self, name:__core__.StringName= __core__.StringName.new0(), custom_blend:float=-1, custom_speed:float=1.0, from_end:bool=False)->None: pass

  def play_backwards(self, name:__core__.StringName= __core__.StringName.new0(), custom_blend:float=-1)->None: pass

  def play_with_capture(self, name:__core__.StringName= __core__.StringName.new0(), duration:float=-1.0, custom_blend:float=-1, custom_speed:float=1.0, from_end:bool=False, trans_type:int =0, ease_type:int =0)->None: pass

  def pause(self)->None: pass

  def stop(self, keep_state:bool=False)->None: pass

  def is_playing(self)->bool: pass

  def set_current_animation(self, animation:str)->None: pass

  def get_current_animation(self)->str: pass

  def set_assigned_animation(self, animation:str)->None: pass

  def get_assigned_animation(self)->str: pass

  def queue(self, name:__core__.StringName)->None: pass

  def get_queue(self)->__core__.PackedStringArray: pass

  def clear_queue(self)->None: pass

  def set_speed_scale(self, speed:float)->None: pass

  def get_speed_scale(self)->float: pass

  def get_playing_speed(self)->float: pass

  def set_autoplay(self, name:str)->None: pass

  def get_autoplay(self)->str: pass

  def set_movie_quit_on_finish_enabled(self, enabled:bool)->None: pass

  def is_movie_quit_on_finish_enabled(self)->bool: pass

  def get_current_animation_position(self)->float: pass

  def get_current_animation_length(self)->float: pass

  def seek(self, seconds:float, update:bool=False, update_only:bool=False)->None: pass

  def set_process_callback(self, mode:int )->None: pass

  def get_process_callback(self)->int: pass

  def set_method_call_mode(self, mode:int )->None: pass

  def get_method_call_mode(self)->int: pass

  def set_root(self, path:__core__.NodePath)->None: pass

  def get_root(self)->__core__.NodePath: pass


