from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Object.Object as __object__
import py4godot.classes.HBoxContainer.HBoxContainer as __hboxcontainer__
import py4godot.classes.Resource.Resource as __resource__


class EditorResourcePicker(__hboxcontainer__.HBoxContainer):
  resource_selected: BuiltinSignal
  resource_changed: BuiltinSignal

  @staticmethod
  def constructor()->EditorResourcePicker:pass



  @staticmethod
  def cast(other:__object__.Object)->EditorResourcePicker:pass


  @property
  def base_type(self)->str: pass
  @base_type.setter
  def base_type(self,  value:str)->None: pass
  @property
  def edited_resource(self)->__resource__.Resource: pass
  @edited_resource.setter
  def edited_resource(self,  value:__resource__.Resource)->None: pass
  @property
  def editable(self)->bool: pass
  @editable.setter
  def editable(self,  value:bool)->None: pass
  @property
  def toggle_mode(self)->bool: pass
  @toggle_mode.setter
  def toggle_mode(self,  value:bool)->None: pass
  def _set_create_options(self, menu_node:__object__.Object)->None: pass

  def _handle_menu_selected(self, id:int)->bool: pass

  def set_base_type(self, base_type:str)->None: pass

  def get_base_type(self)->str: pass

  def get_allowed_types(self)->__core__.PackedStringArray: pass

  def set_edited_resource(self, resource:__resource__.Resource)->None: pass

  def get_edited_resource(self)->__resource__.Resource: pass

  def set_toggle_mode(self, enable:bool)->None: pass

  def is_toggle_mode(self)->bool: pass

  def set_toggle_pressed(self, pressed:bool)->None: pass

  def set_editable(self, enable:bool)->None: pass

  def is_editable(self)->bool: pass


