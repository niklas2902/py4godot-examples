from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.SpriteBase3D.SpriteBase3D as __spritebase3d__
import py4godot.classes.BaseMaterial3D.BaseMaterial3D as __basematerial3d__
import py4godot.classes.GeometryInstance3D.GeometryInstance3D as __geometryinstance3d__
import py4godot.classes.TriangleMesh.TriangleMesh as __trianglemesh__


class SpriteBase3D(__geometryinstance3d__.GeometryInstance3D):

  @staticmethod
  def constructor()->SpriteBase3D:pass



  @staticmethod
  def cast(other:__object__.Object)->SpriteBase3D:pass


  @property
  def centered(self)->bool: pass
  @centered.setter
  def centered(self,  value:bool)->None: pass
  @property
  def offset(self)->__core__.Vector2: pass
  @offset.setter
  def offset(self,  value:__core__.Vector2)->None: pass
  @property
  def flip_h(self)->bool: pass
  @flip_h.setter
  def flip_h(self,  value:bool)->None: pass
  @property
  def flip_v(self)->bool: pass
  @flip_v.setter
  def flip_v(self,  value:bool)->None: pass
  @property
  def modulate(self)->__core__.Color: pass
  @modulate.setter
  def modulate(self,  value:__core__.Color)->None: pass
  @property
  def pixel_size(self)->float: pass
  @pixel_size.setter
  def pixel_size(self,  value:float)->None: pass
  @property
  def axis(self)->int: pass
  @axis.setter
  def axis(self,  value:int)->None: pass
  @property
  def billboard(self)->int: pass
  @billboard.setter
  def billboard(self,  value:int)->None: pass
  @property
  def transparent(self)->bool: pass
  @transparent.setter
  def transparent(self,  value:bool)->None: pass
  @property
  def shaded(self)->bool: pass
  @shaded.setter
  def shaded(self,  value:bool)->None: pass
  @property
  def double_sided(self)->bool: pass
  @double_sided.setter
  def double_sided(self,  value:bool)->None: pass
  @property
  def no_depth_test(self)->bool: pass
  @no_depth_test.setter
  def no_depth_test(self,  value:bool)->None: pass
  @property
  def fixed_size(self)->bool: pass
  @fixed_size.setter
  def fixed_size(self,  value:bool)->None: pass
  @property
  def alpha_cut(self)->int: pass
  @alpha_cut.setter
  def alpha_cut(self,  value:int)->None: pass
  @property
  def alpha_scissor_threshold(self)->float: pass
  @alpha_scissor_threshold.setter
  def alpha_scissor_threshold(self,  value:float)->None: pass
  @property
  def alpha_hash_scale(self)->float: pass
  @alpha_hash_scale.setter
  def alpha_hash_scale(self,  value:float)->None: pass
  @property
  def alpha_antialiasing_mode(self)->int: pass
  @alpha_antialiasing_mode.setter
  def alpha_antialiasing_mode(self,  value:int)->None: pass
  @property
  def alpha_antialiasing_edge(self)->float: pass
  @alpha_antialiasing_edge.setter
  def alpha_antialiasing_edge(self,  value:float)->None: pass
  @property
  def texture_filter(self)->int: pass
  @texture_filter.setter
  def texture_filter(self,  value:int)->None: pass
  @property
  def render_priority(self)->int: pass
  @render_priority.setter
  def render_priority(self,  value:int)->None: pass
  def set_centered(self, centered:bool)->None: pass

  def is_centered(self)->bool: pass

  def set_offset(self, offset:__core__.Vector2)->None: pass

  def get_offset(self)->__core__.Vector2: pass

  def set_flip_h(self, flip_h:bool)->None: pass

  def is_flipped_h(self)->bool: pass

  def set_flip_v(self, flip_v:bool)->None: pass

  def is_flipped_v(self)->bool: pass

  def set_modulate(self, modulate:__core__.Color)->None: pass

  def get_modulate(self)->__core__.Color: pass

  def set_render_priority(self, priority:int)->None: pass

  def get_render_priority(self)->int: pass

  def set_pixel_size(self, pixel_size:float)->None: pass

  def get_pixel_size(self)->float: pass

  def set_axis(self, axis:int )->None: pass

  def get_axis(self)->int: pass

  def set_draw_flag(self, flag:int , enabled:bool)->None: pass

  def get_draw_flag(self, flag:int )->bool: pass

  def set_alpha_cut_mode(self, mode:int )->None: pass

  def get_alpha_cut_mode(self)->int: pass

  def set_alpha_scissor_threshold(self, threshold:float)->None: pass

  def get_alpha_scissor_threshold(self)->float: pass

  def set_alpha_hash_scale(self, threshold:float)->None: pass

  def get_alpha_hash_scale(self)->float: pass

  def set_alpha_antialiasing(self, alpha_aa:int )->None: pass

  def get_alpha_antialiasing(self)->int: pass

  def set_alpha_antialiasing_edge(self, edge:float)->None: pass

  def get_alpha_antialiasing_edge(self)->float: pass

  def set_billboard_mode(self, mode:int )->None: pass

  def get_billboard_mode(self)->int: pass

  def set_texture_filter(self, mode:int )->None: pass

  def get_texture_filter(self)->int: pass

  def get_item_rect(self)->__core__.Rect2: pass

  def generate_triangle_mesh(self)->__trianglemesh__.TriangleMesh: pass


