from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Resource.Resource as __resource__


class EditorSettings(__resource__.Resource):
  settings_changed: BuiltinSignal

  @staticmethod
  def constructor()->EditorSettings:pass



  @staticmethod
  def cast(other:__object__.Object)->EditorSettings:pass


  def has_setting(self, name:str)->bool: pass

  def set_setting(self, name:str, value:object)->None: pass

  def get_setting(self, name:str)->object: pass

  def erase(self, property:str)->None: pass

  def set_initial_value(self, name:__core__.StringName, value:object, update_current:bool)->None: pass

  def add_property_info(self, info:__core__.Dictionary)->None: pass

  def set_project_metadata(self, section:str, key:str, data:object)->None: pass

  def get_project_metadata(self, section:str, key:str, default:object=None)->object: pass

  def set_favorites(self, dirs:__core__.PackedStringArray)->None: pass

  def get_favorites(self)->__core__.PackedStringArray: pass

  def set_recent_dirs(self, dirs:__core__.PackedStringArray)->None: pass

  def get_recent_dirs(self)->__core__.PackedStringArray: pass

  def set_builtin_action_override(self, name:str, actions_list:__core__.Array)->None: pass

  def check_changed_settings_in_group(self, setting_prefix:str)->bool: pass

  def get_changed_settings(self)->__core__.PackedStringArray: pass

  def mark_setting_changed(self, setting:str)->None: pass


