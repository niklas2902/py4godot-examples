from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Texture2D.Texture2D as __texture2d__
import py4godot.classes.Material.Material as __material__


class ProceduralSkyMaterial(__material__.Material):

  @staticmethod
  def constructor()->ProceduralSkyMaterial:pass



  @staticmethod
  def cast(other:__object__.Object)->ProceduralSkyMaterial:pass


  @property
  def sky_top_color(self)->__core__.Color: pass
  @sky_top_color.setter
  def sky_top_color(self,  value:__core__.Color)->None: pass
  @property
  def sky_horizon_color(self)->__core__.Color: pass
  @sky_horizon_color.setter
  def sky_horizon_color(self,  value:__core__.Color)->None: pass
  @property
  def sky_curve(self)->float: pass
  @sky_curve.setter
  def sky_curve(self,  value:float)->None: pass
  @property
  def sky_energy_multiplier(self)->float: pass
  @sky_energy_multiplier.setter
  def sky_energy_multiplier(self,  value:float)->None: pass
  @property
  def sky_cover(self)->__texture2d__.Texture2D: pass
  @sky_cover.setter
  def sky_cover(self,  value:__texture2d__.Texture2D)->None: pass
  @property
  def sky_cover_modulate(self)->__core__.Color: pass
  @sky_cover_modulate.setter
  def sky_cover_modulate(self,  value:__core__.Color)->None: pass
  @property
  def ground_bottom_color(self)->__core__.Color: pass
  @ground_bottom_color.setter
  def ground_bottom_color(self,  value:__core__.Color)->None: pass
  @property
  def ground_horizon_color(self)->__core__.Color: pass
  @ground_horizon_color.setter
  def ground_horizon_color(self,  value:__core__.Color)->None: pass
  @property
  def ground_curve(self)->float: pass
  @ground_curve.setter
  def ground_curve(self,  value:float)->None: pass
  @property
  def ground_energy_multiplier(self)->float: pass
  @ground_energy_multiplier.setter
  def ground_energy_multiplier(self,  value:float)->None: pass
  @property
  def sun_angle_max(self)->float: pass
  @sun_angle_max.setter
  def sun_angle_max(self,  value:float)->None: pass
  @property
  def sun_curve(self)->float: pass
  @sun_curve.setter
  def sun_curve(self,  value:float)->None: pass
  @property
  def use_debanding(self)->bool: pass
  @use_debanding.setter
  def use_debanding(self,  value:bool)->None: pass
  @property
  def energy_multiplier(self)->float: pass
  @energy_multiplier.setter
  def energy_multiplier(self,  value:float)->None: pass
  def set_sky_top_color(self, color:__core__.Color)->None: pass

  def get_sky_top_color(self)->__core__.Color: pass

  def set_sky_horizon_color(self, color:__core__.Color)->None: pass

  def get_sky_horizon_color(self)->__core__.Color: pass

  def set_sky_curve(self, curve:float)->None: pass

  def get_sky_curve(self)->float: pass

  def set_sky_energy_multiplier(self, multiplier:float)->None: pass

  def get_sky_energy_multiplier(self)->float: pass

  def set_sky_cover(self, sky_cover:__texture2d__.Texture2D)->None: pass

  def get_sky_cover(self)->__texture2d__.Texture2D: pass

  def set_sky_cover_modulate(self, color:__core__.Color)->None: pass

  def get_sky_cover_modulate(self)->__core__.Color: pass

  def set_ground_bottom_color(self, color:__core__.Color)->None: pass

  def get_ground_bottom_color(self)->__core__.Color: pass

  def set_ground_horizon_color(self, color:__core__.Color)->None: pass

  def get_ground_horizon_color(self)->__core__.Color: pass

  def set_ground_curve(self, curve:float)->None: pass

  def get_ground_curve(self)->float: pass

  def set_ground_energy_multiplier(self, energy:float)->None: pass

  def get_ground_energy_multiplier(self)->float: pass

  def set_sun_angle_max(self, degrees:float)->None: pass

  def get_sun_angle_max(self)->float: pass

  def set_sun_curve(self, curve:float)->None: pass

  def get_sun_curve(self)->float: pass

  def set_use_debanding(self, use_debanding:bool)->None: pass

  def get_use_debanding(self)->bool: pass

  def set_energy_multiplier(self, multiplier:float)->None: pass

  def get_energy_multiplier(self)->float: pass


