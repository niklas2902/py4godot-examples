from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Font.Font as __font__
import py4godot.classes.RefCounted.RefCounted as __refcounted__
import py4godot.classes.TextServer.TextServer as __textserver__


class TextParagraph(__refcounted__.RefCounted):

  @staticmethod
  def constructor()->TextParagraph:pass



  @staticmethod
  def cast(other:__object__.Object)->TextParagraph:pass


  @property
  def direction(self)->int: pass
  @direction.setter
  def direction(self,  value:int)->None: pass
  @property
  def custom_punctuation(self)->str: pass
  @custom_punctuation.setter
  def custom_punctuation(self,  value:str)->None: pass
  @property
  def orientation(self)->int: pass
  @orientation.setter
  def orientation(self,  value:int)->None: pass
  @property
  def preserve_invalid(self)->bool: pass
  @preserve_invalid.setter
  def preserve_invalid(self,  value:bool)->None: pass
  @property
  def preserve_control(self)->bool: pass
  @preserve_control.setter
  def preserve_control(self,  value:bool)->None: pass
  @property
  def alignment(self)->int: pass
  @alignment.setter
  def alignment(self,  value:int)->None: pass
  @property
  def break_flags(self)->int: pass
  @break_flags.setter
  def break_flags(self,  value:int)->None: pass
  @property
  def justification_flags(self)->int: pass
  @justification_flags.setter
  def justification_flags(self,  value:int)->None: pass
  @property
  def text_overrun_behavior(self)->int: pass
  @text_overrun_behavior.setter
  def text_overrun_behavior(self,  value:int)->None: pass
  @property
  def ellipsis_char(self)->str: pass
  @ellipsis_char.setter
  def ellipsis_char(self,  value:str)->None: pass
  @property
  def width(self)->float: pass
  @width.setter
  def width(self,  value:float)->None: pass
  @property
  def max_lines_visible(self)->int: pass
  @max_lines_visible.setter
  def max_lines_visible(self,  value:int)->None: pass
  def clear(self)->None: pass

  def set_direction(self, direction:int )->None: pass

  def get_direction(self)->int: pass

  def set_custom_punctuation(self, custom_punctuation:str)->None: pass

  def get_custom_punctuation(self)->str: pass

  def set_orientation(self, orientation:int )->None: pass

  def get_orientation(self)->int: pass

  def set_preserve_invalid(self, enabled:bool)->None: pass

  def get_preserve_invalid(self)->bool: pass

  def set_preserve_control(self, enabled:bool)->None: pass

  def get_preserve_control(self)->bool: pass

  def set_bidi_override(self, override:__core__.Array)->None: pass

  def set_dropcap(self, text:str, font:__font__.Font, font_size:int, dropcap_margins:__core__.Rect2= __core__.Rect2.new0(), language:str= __core__.String.new0())->bool: pass

  def clear_dropcap(self)->None: pass

  def add_string(self, text:str, font:__font__.Font, font_size:int, language:str= __core__.String.new0(), meta:object=None)->bool: pass

  def add_object(self, key:object, size:__core__.Vector2, inline_align:int =5, length:int=1, baseline:float=0.0)->bool: pass

  def resize_object(self, key:object, size:__core__.Vector2, inline_align:int =5, baseline:float=0.0)->bool: pass

  def set_alignment(self, alignment:int )->None: pass

  def get_alignment(self)->int: pass

  def tab_align(self, tab_stops:__core__.PackedFloat32Array)->None: pass

  def set_break_flags(self, flags:int)->None: pass

  def get_break_flags(self)->int: pass

  def set_justification_flags(self, flags:int)->None: pass

  def get_justification_flags(self)->int: pass

  def set_text_overrun_behavior(self, overrun_behavior:int )->None: pass

  def get_text_overrun_behavior(self)->int: pass

  def set_ellipsis_char(self, char:str)->None: pass

  def get_ellipsis_char(self)->str: pass

  def set_width(self, width:float)->None: pass

  def get_width(self)->float: pass

  def get_non_wrapped_size(self)->__core__.Vector2: pass

  def get_size(self)->__core__.Vector2: pass

  def get_rid(self)->__core__.RID: pass

  def get_line_rid(self, line:int)->__core__.RID: pass

  def get_dropcap_rid(self)->__core__.RID: pass

  def get_line_count(self)->int: pass

  def set_max_lines_visible(self, max_lines_visible:int)->None: pass

  def get_max_lines_visible(self)->int: pass

  def get_line_objects(self, line:int)->__core__.Array: pass

  def get_line_object_rect(self, line:int, key:object)->__core__.Rect2: pass

  def get_line_size(self, line:int)->__core__.Vector2: pass

  def get_line_range(self, line:int)->__core__.Vector2i: pass

  def get_line_ascent(self, line:int)->float: pass

  def get_line_descent(self, line:int)->float: pass

  def get_line_width(self, line:int)->float: pass

  def get_line_underline_position(self, line:int)->float: pass

  def get_line_underline_thickness(self, line:int)->float: pass

  def get_dropcap_size(self)->__core__.Vector2: pass

  def get_dropcap_lines(self)->int: pass

  def draw(self, canvas:__core__.RID, pos:__core__.Vector2, color:__core__.Color= __core__.Color.new0(), dc_color:__core__.Color= __core__.Color.new0())->None: pass

  def draw_outline(self, canvas:__core__.RID, pos:__core__.Vector2, outline_size:int=1, color:__core__.Color= __core__.Color.new0(), dc_color:__core__.Color= __core__.Color.new0())->None: pass

  def draw_line(self, canvas:__core__.RID, pos:__core__.Vector2, line:int, color:__core__.Color= __core__.Color.new0())->None: pass

  def draw_line_outline(self, canvas:__core__.RID, pos:__core__.Vector2, line:int, outline_size:int=1, color:__core__.Color= __core__.Color.new0())->None: pass

  def draw_dropcap(self, canvas:__core__.RID, pos:__core__.Vector2, color:__core__.Color= __core__.Color.new0())->None: pass

  def draw_dropcap_outline(self, canvas:__core__.RID, pos:__core__.Vector2, outline_size:int=1, color:__core__.Color= __core__.Color.new0())->None: pass

  def hit_test(self, coords:__core__.Vector2)->int: pass


