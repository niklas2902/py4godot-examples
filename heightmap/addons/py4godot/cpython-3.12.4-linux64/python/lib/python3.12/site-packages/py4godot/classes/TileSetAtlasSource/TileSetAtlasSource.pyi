from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.TileSetAtlasSource.TileSetAtlasSource as __tilesetatlassource__
import py4godot.classes.TileData.TileData as __tiledata__
import py4godot.classes.Texture2D.Texture2D as __texture2d__
import py4godot.classes.TileSetSource.TileSetSource as __tilesetsource__


class TileSetAtlasSource(__tilesetsource__.TileSetSource):

  @staticmethod
  def constructor()->TileSetAtlasSource:pass



  @staticmethod
  def cast(other:__object__.Object)->TileSetAtlasSource:pass


  @property
  def texture(self)->__texture2d__.Texture2D: pass
  @texture.setter
  def texture(self,  value:__texture2d__.Texture2D)->None: pass
  @property
  def margins(self)->__core__.Vector2i: pass
  @margins.setter
  def margins(self,  value:__core__.Vector2i)->None: pass
  @property
  def separation(self)->__core__.Vector2i: pass
  @separation.setter
  def separation(self,  value:__core__.Vector2i)->None: pass
  @property
  def texture_region_size(self)->__core__.Vector2i: pass
  @texture_region_size.setter
  def texture_region_size(self,  value:__core__.Vector2i)->None: pass
  @property
  def use_texture_padding(self)->bool: pass
  @use_texture_padding.setter
  def use_texture_padding(self,  value:bool)->None: pass
  def set_texture(self, texture:__texture2d__.Texture2D)->None: pass

  def get_texture(self)->__texture2d__.Texture2D: pass

  def set_margins(self, margins:__core__.Vector2i)->None: pass

  def get_margins(self)->__core__.Vector2i: pass

  def set_separation(self, separation:__core__.Vector2i)->None: pass

  def get_separation(self)->__core__.Vector2i: pass

  def set_texture_region_size(self, texture_region_size:__core__.Vector2i)->None: pass

  def get_texture_region_size(self)->__core__.Vector2i: pass

  def set_use_texture_padding(self, use_texture_padding:bool)->None: pass

  def get_use_texture_padding(self)->bool: pass

  def create_tile(self, atlas_coords:__core__.Vector2i, size:__core__.Vector2i= __core__.Vector2i.new0())->None: pass

  def remove_tile(self, atlas_coords:__core__.Vector2i)->None: pass

  def move_tile_in_atlas(self, atlas_coords:__core__.Vector2i, new_atlas_coords:__core__.Vector2i= __core__.Vector2i.new0(), new_size:__core__.Vector2i= __core__.Vector2i.new0())->None: pass

  def get_tile_size_in_atlas(self, atlas_coords:__core__.Vector2i)->__core__.Vector2i: pass

  def has_room_for_tile(self, atlas_coords:__core__.Vector2i, size:__core__.Vector2i, animation_columns:int, animation_separation:__core__.Vector2i, frames_count:int, ignored_tile:__core__.Vector2i= __core__.Vector2i.new0())->bool: pass

  def get_tiles_to_be_removed_on_change(self, texture:__texture2d__.Texture2D, margins:__core__.Vector2i, separation:__core__.Vector2i, texture_region_size:__core__.Vector2i)->__core__.PackedVector2Array: pass

  def get_tile_at_coords(self, atlas_coords:__core__.Vector2i)->__core__.Vector2i: pass

  def has_tiles_outside_texture(self)->bool: pass

  def clear_tiles_outside_texture(self)->None: pass

  def set_tile_animation_columns(self, atlas_coords:__core__.Vector2i, frame_columns:int)->None: pass

  def get_tile_animation_columns(self, atlas_coords:__core__.Vector2i)->int: pass

  def set_tile_animation_separation(self, atlas_coords:__core__.Vector2i, separation:__core__.Vector2i)->None: pass

  def get_tile_animation_separation(self, atlas_coords:__core__.Vector2i)->__core__.Vector2i: pass

  def set_tile_animation_speed(self, atlas_coords:__core__.Vector2i, speed:float)->None: pass

  def get_tile_animation_speed(self, atlas_coords:__core__.Vector2i)->float: pass

  def set_tile_animation_mode(self, atlas_coords:__core__.Vector2i, mode:int )->None: pass

  def get_tile_animation_mode(self, atlas_coords:__core__.Vector2i)->int: pass

  def set_tile_animation_frames_count(self, atlas_coords:__core__.Vector2i, frames_count:int)->None: pass

  def get_tile_animation_frames_count(self, atlas_coords:__core__.Vector2i)->int: pass

  def set_tile_animation_frame_duration(self, atlas_coords:__core__.Vector2i, frame_index:int, duration:float)->None: pass

  def get_tile_animation_frame_duration(self, atlas_coords:__core__.Vector2i, frame_index:int)->float: pass

  def get_tile_animation_total_duration(self, atlas_coords:__core__.Vector2i)->float: pass

  def create_alternative_tile(self, atlas_coords:__core__.Vector2i, alternative_id_override:int=-1)->int: pass

  def remove_alternative_tile(self, atlas_coords:__core__.Vector2i, alternative_tile:int)->None: pass

  def set_alternative_tile_id(self, atlas_coords:__core__.Vector2i, alternative_tile:int, new_id:int)->None: pass

  def get_next_alternative_tile_id(self, atlas_coords:__core__.Vector2i)->int: pass

  def get_tile_data(self, atlas_coords:__core__.Vector2i, alternative_tile:int)->__tiledata__.TileData: pass

  def get_atlas_grid_size(self)->__core__.Vector2i: pass

  def get_tile_texture_region(self, atlas_coords:__core__.Vector2i, frame:int=0)->__core__.Rect2i: pass

  def get_runtime_texture(self)->__texture2d__.Texture2D: pass

  def get_runtime_tile_texture_region(self, atlas_coords:__core__.Vector2i, frame:int)->__core__.Rect2i: pass


