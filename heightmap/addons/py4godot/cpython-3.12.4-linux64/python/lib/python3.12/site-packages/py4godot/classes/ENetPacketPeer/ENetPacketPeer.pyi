from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.ENetPacketPeer.ENetPacketPeer as __enetpacketpeer__
import py4godot.classes.PacketPeer.PacketPeer as __packetpeer__


class ENetPacketPeer(__packetpeer__.PacketPeer):

  @staticmethod
  def constructor()->ENetPacketPeer:pass



  @staticmethod
  def cast(other:__object__.Object)->ENetPacketPeer:pass


  def peer_disconnect(self, data:int=0)->None: pass

  def peer_disconnect_later(self, data:int=0)->None: pass

  def peer_disconnect_now(self, data:int=0)->None: pass

  def ping(self)->None: pass

  def ping_interval(self, ping_interval:int)->None: pass

  def reset(self)->None: pass

  def send(self, channel:int, packet:__core__.PackedByteArray, flags:int)->int: pass

  def throttle_configure(self, interval:int, acceleration:int, deceleration:int)->None: pass

  def set_timeout(self, timeout:int, timeout_min:int, timeout_max:int)->None: pass

  def get_remote_address(self)->str: pass

  def get_remote_port(self)->int: pass

  def get_statistic(self, statistic:int )->float: pass

  def get_state(self)->int: pass

  def get_channels(self)->int: pass

  def is_active(self)->bool: pass


