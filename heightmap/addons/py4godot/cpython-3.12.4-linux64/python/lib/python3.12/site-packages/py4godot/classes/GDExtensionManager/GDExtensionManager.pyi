from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.GDExtension.GDExtension as __gdextension__
import py4godot.classes.Object.Object as __object__
import py4godot.classes.GDExtensionManager.GDExtensionManager as __gdextensionmanager__


class GDExtensionManager(__object__.Object):
  extensions_reloaded: BuiltinSignal



  @staticmethod
  def cast(other:__object__.Object)->GDExtensionManager:pass

  @staticmethod
  def get_instance()->GDExtensionManager:pass

  def load_extension(self, path:str)->int: pass

  def reload_extension(self, path:str)->int: pass

  def unload_extension(self, path:str)->int: pass

  def is_extension_loaded(self, path:str)->bool: pass

  def get_loaded_extensions(self)->__core__.PackedStringArray: pass

  def get_extension(self, path:str)->__gdextension__.GDExtension: pass


