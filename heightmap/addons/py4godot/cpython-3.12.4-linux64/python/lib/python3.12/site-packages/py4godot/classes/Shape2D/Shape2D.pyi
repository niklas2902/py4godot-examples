from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Shape2D.Shape2D as __shape2d__
import py4godot.classes.Resource.Resource as __resource__


class Shape2D(__resource__.Resource):

  @staticmethod
  def constructor()->Shape2D:pass



  @staticmethod
  def cast(other:__object__.Object)->Shape2D:pass


  @property
  def custom_solver_bias(self)->float: pass
  @custom_solver_bias.setter
  def custom_solver_bias(self,  value:float)->None: pass
  def set_custom_solver_bias(self, bias:float)->None: pass

  def get_custom_solver_bias(self)->float: pass

  def collide(self, local_xform:__core__.Transform2D, with_shape:__shape2d__.Shape2D, shape_xform:__core__.Transform2D)->bool: pass

  def collide_with_motion(self, local_xform:__core__.Transform2D, local_motion:__core__.Vector2, with_shape:__shape2d__.Shape2D, shape_xform:__core__.Transform2D, shape_motion:__core__.Vector2)->bool: pass

  def collide_and_get_contacts(self, local_xform:__core__.Transform2D, with_shape:__shape2d__.Shape2D, shape_xform:__core__.Transform2D)->__core__.PackedVector2Array: pass

  def collide_with_motion_and_get_contacts(self, local_xform:__core__.Transform2D, local_motion:__core__.Vector2, with_shape:__shape2d__.Shape2D, shape_xform:__core__.Transform2D, shape_motion:__core__.Vector2)->__core__.PackedVector2Array: pass

  def draw(self, canvas_item:__core__.RID, color:__core__.Color)->None: pass

  def get_rect(self)->__core__.Rect2: pass


