from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.RefCounted.RefCounted as __refcounted__
import py4godot.classes.TLSOptions.TLSOptions as __tlsoptions__
import py4godot.classes.HTTPClient.HTTPClient as __httpclient__
import py4godot.classes.StreamPeer.StreamPeer as __streampeer__


class HTTPClient(__refcounted__.RefCounted):

  @staticmethod
  def constructor()->HTTPClient:pass



  @staticmethod
  def cast(other:__object__.Object)->HTTPClient:pass


  @property
  def blocking_mode_enabled(self)->bool: pass
  @blocking_mode_enabled.setter
  def blocking_mode_enabled(self,  value:bool)->None: pass
  @property
  def connection(self)->__streampeer__.StreamPeer: pass
  @connection.setter
  def connection(self,  value:__streampeer__.StreamPeer)->None: pass
  @property
  def read_chunk_size(self)->int: pass
  @read_chunk_size.setter
  def read_chunk_size(self,  value:int)->None: pass
  def connect_to_host(self, host:str, port:int=-1, tls_options:__tlsoptions__.TLSOptions= __tlsoptions__.TLSOptions.constructor())->int: pass

  def set_connection(self, connection:__streampeer__.StreamPeer)->None: pass

  def get_connection(self)->__streampeer__.StreamPeer: pass

  def request_raw(self, method:int , url:str, headers:__core__.PackedStringArray, body:__core__.PackedByteArray)->int: pass

  def request(self, method:int , url:str, headers:__core__.PackedStringArray, body:str= __core__.String.new0())->int: pass

  def close(self)->None: pass

  def has_response(self)->bool: pass

  def is_response_chunked(self)->bool: pass

  def get_response_code(self)->int: pass

  def get_response_headers(self)->__core__.PackedStringArray: pass

  def get_response_headers_as_dictionary(self)->__core__.Dictionary: pass

  def get_response_body_length(self)->int: pass

  def read_response_body_chunk(self)->__core__.PackedByteArray: pass

  def set_read_chunk_size(self, bytes:int)->None: pass

  def get_read_chunk_size(self)->int: pass

  def set_blocking_mode(self, enabled:bool)->None: pass

  def is_blocking_mode_enabled(self)->bool: pass

  def get_status(self)->int: pass

  def poll(self)->int: pass

  def set_http_proxy(self, host:str, port:int)->None: pass

  def set_https_proxy(self, host:str, port:int)->None: pass

  def query_string_from_dict(self, fields:__core__.Dictionary)->str: pass


