from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.GLTFAccessor.GLTFAccessor as __gltfaccessor__
import py4godot.classes.Resource.Resource as __resource__


class GLTFAccessor(__resource__.Resource):

  @staticmethod
  def constructor()->GLTFAccessor:pass



  @staticmethod
  def cast(other:__object__.Object)->GLTFAccessor:pass


  @property
  def buffer_view(self)->int: pass
  @buffer_view.setter
  def buffer_view(self,  value:int)->None: pass
  @property
  def byte_offset(self)->int: pass
  @byte_offset.setter
  def byte_offset(self,  value:int)->None: pass
  @property
  def component_type(self)->int: pass
  @component_type.setter
  def component_type(self,  value:int)->None: pass
  @property
  def normalized(self)->bool: pass
  @normalized.setter
  def normalized(self,  value:bool)->None: pass
  @property
  def count(self)->int: pass
  @count.setter
  def count(self,  value:int)->None: pass
  @property
  def accessor_type(self)->int: pass
  @accessor_type.setter
  def accessor_type(self,  value:int)->None: pass
  @property
  def type(self)->int: pass
  @type.setter
  def type(self,  value:int)->None: pass
  @property
  def min(self)->__core__.PackedFloat64Array: pass
  @min.setter
  def min(self,  value:__core__.PackedFloat64Array)->None: pass
  @property
  def max(self)->__core__.PackedFloat64Array: pass
  @max.setter
  def max(self,  value:__core__.PackedFloat64Array)->None: pass
  @property
  def sparse_count(self)->int: pass
  @sparse_count.setter
  def sparse_count(self,  value:int)->None: pass
  @property
  def sparse_indices_buffer_view(self)->int: pass
  @sparse_indices_buffer_view.setter
  def sparse_indices_buffer_view(self,  value:int)->None: pass
  @property
  def sparse_indices_byte_offset(self)->int: pass
  @sparse_indices_byte_offset.setter
  def sparse_indices_byte_offset(self,  value:int)->None: pass
  @property
  def sparse_indices_component_type(self)->int: pass
  @sparse_indices_component_type.setter
  def sparse_indices_component_type(self,  value:int)->None: pass
  @property
  def sparse_values_buffer_view(self)->int: pass
  @sparse_values_buffer_view.setter
  def sparse_values_buffer_view(self,  value:int)->None: pass
  @property
  def sparse_values_byte_offset(self)->int: pass
  @sparse_values_byte_offset.setter
  def sparse_values_byte_offset(self,  value:int)->None: pass
  def get_buffer_view(self)->int: pass

  def set_buffer_view(self, buffer_view:int)->None: pass

  def get_byte_offset(self)->int: pass

  def set_byte_offset(self, byte_offset:int)->None: pass

  def get_component_type(self)->int: pass

  def set_component_type(self, component_type:int)->None: pass

  def get_normalized(self)->bool: pass

  def set_normalized(self, normalized:bool)->None: pass

  def get_count(self)->int: pass

  def set_count(self, count:int)->None: pass

  def get_accessor_type(self)->int: pass

  def set_accessor_type(self, accessor_type:int )->None: pass

  def get_type(self)->int: pass

  def set_type(self, type:int)->None: pass

  def get_min(self)->__core__.PackedFloat64Array: pass

  def set_min(self, min:__core__.PackedFloat64Array)->None: pass

  def get_max(self)->__core__.PackedFloat64Array: pass

  def set_max(self, max:__core__.PackedFloat64Array)->None: pass

  def get_sparse_count(self)->int: pass

  def set_sparse_count(self, sparse_count:int)->None: pass

  def get_sparse_indices_buffer_view(self)->int: pass

  def set_sparse_indices_buffer_view(self, sparse_indices_buffer_view:int)->None: pass

  def get_sparse_indices_byte_offset(self)->int: pass

  def set_sparse_indices_byte_offset(self, sparse_indices_byte_offset:int)->None: pass

  def get_sparse_indices_component_type(self)->int: pass

  def set_sparse_indices_component_type(self, sparse_indices_component_type:int)->None: pass

  def get_sparse_values_buffer_view(self)->int: pass

  def set_sparse_values_buffer_view(self, sparse_values_buffer_view:int)->None: pass

  def get_sparse_values_byte_offset(self)->int: pass

  def set_sparse_values_byte_offset(self, sparse_values_byte_offset:int)->None: pass


