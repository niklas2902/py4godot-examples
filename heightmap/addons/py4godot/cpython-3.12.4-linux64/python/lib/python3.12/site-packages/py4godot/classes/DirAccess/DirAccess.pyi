from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.RefCounted.RefCounted as __refcounted__
import py4godot.classes.DirAccess.DirAccess as __diraccess__


class DirAccess(__refcounted__.RefCounted):

  @staticmethod
  def constructor()->DirAccess:pass



  @staticmethod
  def cast(other:__object__.Object)->DirAccess:pass


  @property
  def include_navigational(self)->bool: pass
  @include_navigational.setter
  def include_navigational(self,  value:bool)->None: pass
  @property
  def include_hidden(self)->bool: pass
  @include_hidden.setter
  def include_hidden(self,  value:bool)->None: pass
  @staticmethod
  def open(path:str)->__diraccess__.DirAccess: pass

  @staticmethod
  def get_open_error()->int: pass

  def list_dir_begin(self)->int: pass

  def get_next(self)->str: pass

  def current_is_dir(self)->bool: pass

  def list_dir_end(self)->None: pass

  def get_files(self)->__core__.PackedStringArray: pass

  @staticmethod
  def get_files_at(path:str)->__core__.PackedStringArray: pass

  def get_directories(self)->__core__.PackedStringArray: pass

  @staticmethod
  def get_directories_at(path:str)->__core__.PackedStringArray: pass

  @staticmethod
  def get_drive_count()->int: pass

  @staticmethod
  def get_drive_name(idx:int)->str: pass

  def get_current_drive(self)->int: pass

  def change_dir(self, to_dir:str)->int: pass

  def get_current_dir(self, include_drive:bool=True)->str: pass

  def make_dir(self, path:str)->int: pass

  @staticmethod
  def make_dir_absolute(path:str)->int: pass

  def make_dir_recursive(self, path:str)->int: pass

  @staticmethod
  def make_dir_recursive_absolute(path:str)->int: pass

  def file_exists(self, path:str)->bool: pass

  def dir_exists(self, path:str)->bool: pass

  @staticmethod
  def dir_exists_absolute(path:str)->bool: pass

  def get_space_left(self)->int: pass

  def copy(self, from_:str, to:str, chmod_flags:int=-1)->int: pass

  @staticmethod
  def copy_absolute(from_:str, to:str, chmod_flags:int=-1)->int: pass

  def rename(self, from_:str, to:str)->int: pass

  @staticmethod
  def rename_absolute(from_:str, to:str)->int: pass

  def remove(self, path:str)->int: pass

  @staticmethod
  def remove_absolute(path:str)->int: pass

  def is_link(self, path:str)->bool: pass

  def read_link(self, path:str)->str: pass

  def create_link(self, source:str, target:str)->int: pass

  def set_include_navigational(self, enable:bool)->None: pass

  def get_include_navigational(self)->bool: pass

  def set_include_hidden(self, enable:bool)->None: pass

  def get_include_hidden(self)->bool: pass

  def is_case_sensitive(self, path:str)->bool: pass


