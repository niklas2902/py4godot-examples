from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.XRInterface.XRInterface as __xrinterface__


class XRInterfaceExtension(__xrinterface__.XRInterface):

  @staticmethod
  def constructor()->XRInterfaceExtension:pass



  @staticmethod
  def cast(other:__object__.Object)->XRInterfaceExtension:pass


  def _get_name(self)->__core__.StringName: pass

  def _get_capabilities(self)->int: pass

  def _is_initialized(self)->bool: pass

  def _initialize(self)->bool: pass

  def _uninitialize(self)->None: pass

  def _get_system_info(self)->__core__.Dictionary: pass

  def _supports_play_area_mode(self, mode:int )->bool: pass

  def _get_play_area_mode(self)->int: pass

  def _set_play_area_mode(self, mode:int )->bool: pass

  def _get_play_area(self)->__core__.PackedVector3Array: pass

  def _get_render_target_size(self)->__core__.Vector2: pass

  def _get_view_count(self)->int: pass

  def _get_camera_transform(self)->__core__.Transform3D: pass

  def _get_transform_for_view(self, view:int, cam_transform:__core__.Transform3D)->__core__.Transform3D: pass

  def _get_projection_for_view(self, view:int, aspect:float, z_near:float, z_far:float)->__core__.PackedFloat64Array: pass

  def _get_vrs_texture(self)->__core__.RID: pass

  def _process(self)->None: pass

  def _pre_render(self)->None: pass

  def _pre_draw_viewport(self, render_target:__core__.RID)->bool: pass

  def _post_draw_viewport(self, render_target:__core__.RID, screen_rect:__core__.Rect2)->None: pass

  def _end_frame(self)->None: pass

  def _get_suggested_tracker_names(self)->__core__.PackedStringArray: pass

  def _get_suggested_pose_names(self, tracker_name:__core__.StringName)->__core__.PackedStringArray: pass

  def _get_tracking_status(self)->int: pass

  def _trigger_haptic_pulse(self, action_name:str, tracker_name:__core__.StringName, frequency:float, amplitude:float, duration_sec:float, delay_sec:float)->None: pass

  def _get_anchor_detection_is_enabled(self)->bool: pass

  def _set_anchor_detection_is_enabled(self, enabled:bool)->None: pass

  def _get_camera_feed_id(self)->int: pass

  def _get_color_texture(self)->__core__.RID: pass

  def _get_depth_texture(self)->__core__.RID: pass

  def _get_velocity_texture(self)->__core__.RID: pass

  def get_color_texture(self)->__core__.RID: pass

  def get_depth_texture(self)->__core__.RID: pass

  def get_velocity_texture(self)->__core__.RID: pass

  def add_blit(self, render_target:__core__.RID, src_rect:__core__.Rect2, dst_rect:__core__.Rect2i, use_layer:bool, layer:int, apply_lens_distortion:bool, eye_center:__core__.Vector2, k1:float, k2:float, upscale:float, aspect_ratio:float)->None: pass

  def get_render_target_texture(self, render_target:__core__.RID)->__core__.RID: pass


