from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Curve.Curve as __curve__
import py4godot.classes.Gradient.Gradient as __gradient__
import py4godot.classes.Texture2D.Texture2D as __texture2d__
import py4godot.classes.Node2D.Node2D as __node2d__
import py4godot.classes.Line2D.Line2D as __line2d__


class Line2D(__node2d__.Node2D):

  @staticmethod
  def constructor()->Line2D:pass



  @staticmethod
  def cast(other:__object__.Object)->Line2D:pass


  @property
  def points(self)->__core__.PackedVector2Array: pass
  @points.setter
  def points(self,  value:__core__.PackedVector2Array)->None: pass
  @property
  def closed(self)->bool: pass
  @closed.setter
  def closed(self,  value:bool)->None: pass
  @property
  def width(self)->float: pass
  @width.setter
  def width(self,  value:float)->None: pass
  @property
  def width_curve(self)->__curve__.Curve: pass
  @width_curve.setter
  def width_curve(self,  value:__curve__.Curve)->None: pass
  @property
  def default_color(self)->__core__.Color: pass
  @default_color.setter
  def default_color(self,  value:__core__.Color)->None: pass
  @property
  def gradient(self)->__gradient__.Gradient: pass
  @gradient.setter
  def gradient(self,  value:__gradient__.Gradient)->None: pass
  @property
  def texture(self)->__texture2d__.Texture2D: pass
  @texture.setter
  def texture(self,  value:__texture2d__.Texture2D)->None: pass
  @property
  def texture_mode(self)->int: pass
  @texture_mode.setter
  def texture_mode(self,  value:int)->None: pass
  @property
  def joint_mode(self)->int: pass
  @joint_mode.setter
  def joint_mode(self,  value:int)->None: pass
  @property
  def begin_cap_mode(self)->int: pass
  @begin_cap_mode.setter
  def begin_cap_mode(self,  value:int)->None: pass
  @property
  def end_cap_mode(self)->int: pass
  @end_cap_mode.setter
  def end_cap_mode(self,  value:int)->None: pass
  @property
  def sharp_limit(self)->float: pass
  @sharp_limit.setter
  def sharp_limit(self,  value:float)->None: pass
  @property
  def round_precision(self)->int: pass
  @round_precision.setter
  def round_precision(self,  value:int)->None: pass
  @property
  def antialiased(self)->bool: pass
  @antialiased.setter
  def antialiased(self,  value:bool)->None: pass
  def set_points(self, points:__core__.PackedVector2Array)->None: pass

  def get_points(self)->__core__.PackedVector2Array: pass

  def set_point_position(self, index:int, position:__core__.Vector2)->None: pass

  def get_point_position(self, index:int)->__core__.Vector2: pass

  def get_point_count(self)->int: pass

  def add_point(self, position:__core__.Vector2, index:int=-1)->None: pass

  def remove_point(self, index:int)->None: pass

  def clear_points(self)->None: pass

  def set_closed(self, closed:bool)->None: pass

  def is_closed(self)->bool: pass

  def set_width(self, width:float)->None: pass

  def get_width(self)->float: pass

  def set_curve(self, curve:__curve__.Curve)->None: pass

  def get_curve(self)->__curve__.Curve: pass

  def set_default_color(self, color:__core__.Color)->None: pass

  def get_default_color(self)->__core__.Color: pass

  def set_gradient(self, color:__gradient__.Gradient)->None: pass

  def get_gradient(self)->__gradient__.Gradient: pass

  def set_texture(self, texture:__texture2d__.Texture2D)->None: pass

  def get_texture(self)->__texture2d__.Texture2D: pass

  def set_texture_mode(self, mode:int )->None: pass

  def get_texture_mode(self)->int: pass

  def set_joint_mode(self, mode:int )->None: pass

  def get_joint_mode(self)->int: pass

  def set_begin_cap_mode(self, mode:int )->None: pass

  def get_begin_cap_mode(self)->int: pass

  def set_end_cap_mode(self, mode:int )->None: pass

  def get_end_cap_mode(self)->int: pass

  def set_sharp_limit(self, limit:float)->None: pass

  def get_sharp_limit(self)->float: pass

  def set_round_precision(self, precision:int)->None: pass

  def get_round_precision(self)->int: pass

  def set_antialiased(self, antialiased:bool)->None: pass

  def get_antialiased(self)->bool: pass


