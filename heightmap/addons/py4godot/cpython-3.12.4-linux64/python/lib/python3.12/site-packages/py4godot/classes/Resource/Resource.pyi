from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.RefCounted.RefCounted as __refcounted__
import py4godot.classes.Node.Node as __node__
import py4godot.classes.Resource.Resource as __resource__


class Resource(__refcounted__.RefCounted):
  changed: BuiltinSignal
  setup_local_to_scene_requested: BuiltinSignal

  @staticmethod
  def constructor()->Resource:pass



  @staticmethod
  def cast(other:__object__.Object)->Resource:pass


  @property
  def resource_local_to_scene(self)->bool: pass
  @resource_local_to_scene.setter
  def resource_local_to_scene(self,  value:bool)->None: pass
  @property
  def resource_path(self)->str: pass
  @resource_path.setter
  def resource_path(self,  value:str)->None: pass
  @property
  def resource_name(self)->str: pass
  @resource_name.setter
  def resource_name(self,  value:str)->None: pass
  @property
  def resource_scene_unique_id(self)->str: pass
  @resource_scene_unique_id.setter
  def resource_scene_unique_id(self,  value:str)->None: pass
  def _setup_local_to_scene(self)->None: pass

  def set_path(self, path:str)->None: pass

  def take_over_path(self, path:str)->None: pass

  def get_path(self)->str: pass

  def set_name(self, name:str)->None: pass

  def get_name(self)->str: pass

  def get_rid(self)->__core__.RID: pass

  def set_local_to_scene(self, enable:bool)->None: pass

  def is_local_to_scene(self)->bool: pass

  def get_local_scene(self)->__node__.Node: pass

  def setup_local_to_scene(self)->None: pass

  @staticmethod
  def generate_scene_unique_id()->str: pass

  def set_scene_unique_id(self, id:str)->None: pass

  def get_scene_unique_id(self)->str: pass

  def emit_changed(self)->None: pass

  def duplicate(self, subresources:bool=False)->__resource__.Resource: pass


