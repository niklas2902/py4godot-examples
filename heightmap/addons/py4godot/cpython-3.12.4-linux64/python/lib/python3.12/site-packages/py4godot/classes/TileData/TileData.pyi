from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Object.Object as __object__
import py4godot.classes.Material.Material as __material__
import py4godot.classes.NavigationPolygon.NavigationPolygon as __navigationpolygon__
import py4godot.classes.ShaderMaterial.ShaderMaterial as __shadermaterial__
import py4godot.classes.OccluderPolygon2D.OccluderPolygon2D as __occluderpolygon2d__
import py4godot.classes.TileSet.TileSet as __tileset__


class TileData(__object__.Object):
  changed: BuiltinSignal

  @staticmethod
  def constructor()->TileData:pass



  @staticmethod
  def cast(other:__object__.Object)->TileData:pass


  @property
  def flip_h(self)->bool: pass
  @flip_h.setter
  def flip_h(self,  value:bool)->None: pass
  @property
  def flip_v(self)->bool: pass
  @flip_v.setter
  def flip_v(self,  value:bool)->None: pass
  @property
  def transpose(self)->bool: pass
  @transpose.setter
  def transpose(self,  value:bool)->None: pass
  @property
  def texture_origin(self)->__core__.Vector2i: pass
  @texture_origin.setter
  def texture_origin(self,  value:__core__.Vector2i)->None: pass
  @property
  def modulate(self)->__core__.Color: pass
  @modulate.setter
  def modulate(self,  value:__core__.Color)->None: pass
  @property
  def material(self)->CanvasItemMaterial,ShaderMaterial: pass
  @material.setter
  def material(self,  value:__shadermaterial__.ShaderMaterial)->None: pass
  @property
  def z_index(self)->int: pass
  @z_index.setter
  def z_index(self,  value:int)->None: pass
  @property
  def y_sort_origin(self)->int: pass
  @y_sort_origin.setter
  def y_sort_origin(self,  value:int)->None: pass
  @property
  def terrain_set(self)->int: pass
  @terrain_set.setter
  def terrain_set(self,  value:int)->None: pass
  @property
  def terrain(self)->int: pass
  @terrain.setter
  def terrain(self,  value:int)->None: pass
  @property
  def probability(self)->float: pass
  @probability.setter
  def probability(self,  value:float)->None: pass
  def set_flip_h(self, flip_h:bool)->None: pass

  def get_flip_h(self)->bool: pass

  def set_flip_v(self, flip_v:bool)->None: pass

  def get_flip_v(self)->bool: pass

  def set_transpose(self, transpose:bool)->None: pass

  def get_transpose(self)->bool: pass

  def set_material(self, material:__material__.Material)->None: pass

  def get_material(self)->__material__.Material: pass

  def set_texture_origin(self, texture_origin:__core__.Vector2i)->None: pass

  def get_texture_origin(self)->__core__.Vector2i: pass

  def set_modulate(self, modulate:__core__.Color)->None: pass

  def get_modulate(self)->__core__.Color: pass

  def set_z_index(self, z_index:int)->None: pass

  def get_z_index(self)->int: pass

  def set_y_sort_origin(self, y_sort_origin:int)->None: pass

  def get_y_sort_origin(self)->int: pass

  def set_occluder(self, layer_id:int, occluder_polygon:__occluderpolygon2d__.OccluderPolygon2D)->None: pass

  def get_occluder(self, layer_id:int, flip_h:bool=False, flip_v:bool=False, transpose:bool=False)->__occluderpolygon2d__.OccluderPolygon2D: pass

  def set_constant_linear_velocity(self, layer_id:int, velocity:__core__.Vector2)->None: pass

  def get_constant_linear_velocity(self, layer_id:int)->__core__.Vector2: pass

  def set_constant_angular_velocity(self, layer_id:int, velocity:float)->None: pass

  def get_constant_angular_velocity(self, layer_id:int)->float: pass

  def set_collision_polygons_count(self, layer_id:int, polygons_count:int)->None: pass

  def get_collision_polygons_count(self, layer_id:int)->int: pass

  def add_collision_polygon(self, layer_id:int)->None: pass

  def remove_collision_polygon(self, layer_id:int, polygon_index:int)->None: pass

  def set_collision_polygon_points(self, layer_id:int, polygon_index:int, polygon:__core__.PackedVector2Array)->None: pass

  def get_collision_polygon_points(self, layer_id:int, polygon_index:int)->__core__.PackedVector2Array: pass

  def set_collision_polygon_one_way(self, layer_id:int, polygon_index:int, one_way:bool)->None: pass

  def is_collision_polygon_one_way(self, layer_id:int, polygon_index:int)->bool: pass

  def set_collision_polygon_one_way_margin(self, layer_id:int, polygon_index:int, one_way_margin:float)->None: pass

  def get_collision_polygon_one_way_margin(self, layer_id:int, polygon_index:int)->float: pass

  def set_terrain_set(self, terrain_set:int)->None: pass

  def get_terrain_set(self)->int: pass

  def set_terrain(self, terrain:int)->None: pass

  def get_terrain(self)->int: pass

  def set_terrain_peering_bit(self, peering_bit:int , terrain:int)->None: pass

  def get_terrain_peering_bit(self, peering_bit:int )->int: pass

  def is_valid_terrain_peering_bit(self, peering_bit:int )->bool: pass

  def set_navigation_polygon(self, layer_id:int, navigation_polygon:__navigationpolygon__.NavigationPolygon)->None: pass

  def get_navigation_polygon(self, layer_id:int, flip_h:bool=False, flip_v:bool=False, transpose:bool=False)->__navigationpolygon__.NavigationPolygon: pass

  def set_probability(self, probability:float)->None: pass

  def get_probability(self)->float: pass

  def set_custom_data(self, layer_name:str, value:object)->None: pass

  def get_custom_data(self, layer_name:str)->object: pass

  def set_custom_data_by_layer_id(self, layer_id:int, value:object)->None: pass

  def get_custom_data_by_layer_id(self, layer_id:int)->object: pass


