from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.CollisionObject3D.CollisionObject3D as __collisionobject3d__
import py4godot.classes.Shape3D.Shape3D as __shape3d__
import py4godot.classes.Object.Object as __object__
import py4godot.classes.Node3D.Node3D as __node3d__
import py4godot.classes.Camera3D.Camera3D as __camera3d__
import py4godot.classes.InputEvent.InputEvent as __inputevent__


class CollisionObject3D(__node3d__.Node3D):
  input_event: BuiltinSignal
  mouse_entered: BuiltinSignal
  mouse_exited: BuiltinSignal

  @staticmethod
  def constructor()->CollisionObject3D:pass



  @staticmethod
  def cast(other:__object__.Object)->CollisionObject3D:pass


  @property
  def disable_mode(self)->int: pass
  @disable_mode.setter
  def disable_mode(self,  value:int)->None: pass
  @property
  def collision_layer(self)->int: pass
  @collision_layer.setter
  def collision_layer(self,  value:int)->None: pass
  @property
  def collision_mask(self)->int: pass
  @collision_mask.setter
  def collision_mask(self,  value:int)->None: pass
  @property
  def collision_priority(self)->float: pass
  @collision_priority.setter
  def collision_priority(self,  value:float)->None: pass
  @property
  def input_ray_pickable(self)->bool: pass
  @input_ray_pickable.setter
  def input_ray_pickable(self,  value:bool)->None: pass
  @property
  def input_capture_on_drag(self)->bool: pass
  @input_capture_on_drag.setter
  def input_capture_on_drag(self,  value:bool)->None: pass
  def _input_event(self, camera:__camera3d__.Camera3D, event:__inputevent__.InputEvent, event_position:__core__.Vector3, normal:__core__.Vector3, shape_idx:int)->None: pass

  def _mouse_enter(self)->None: pass

  def _mouse_exit(self)->None: pass

  def set_collision_layer(self, layer:int)->None: pass

  def get_collision_layer(self)->int: pass

  def set_collision_mask(self, mask:int)->None: pass

  def get_collision_mask(self)->int: pass

  def set_collision_layer_value(self, layer_number:int, value:bool)->None: pass

  def get_collision_layer_value(self, layer_number:int)->bool: pass

  def set_collision_mask_value(self, layer_number:int, value:bool)->None: pass

  def get_collision_mask_value(self, layer_number:int)->bool: pass

  def set_collision_priority(self, priority:float)->None: pass

  def get_collision_priority(self)->float: pass

  def set_disable_mode(self, mode:int )->None: pass

  def get_disable_mode(self)->int: pass

  def set_ray_pickable(self, ray_pickable:bool)->None: pass

  def is_ray_pickable(self)->bool: pass

  def set_capture_input_on_drag(self, enable:bool)->None: pass

  def get_capture_input_on_drag(self)->bool: pass

  def get_rid(self)->__core__.RID: pass

  def create_shape_owner(self, owner:__object__.Object)->int: pass

  def remove_shape_owner(self, owner_id:int)->None: pass

  def get_shape_owners(self)->__core__.PackedInt32Array: pass

  def shape_owner_set_transform(self, owner_id:int, transform:__core__.Transform3D)->None: pass

  def shape_owner_get_transform(self, owner_id:int)->__core__.Transform3D: pass

  def shape_owner_get_owner(self, owner_id:int)->__object__.Object: pass

  def shape_owner_set_disabled(self, owner_id:int, disabled:bool)->None: pass

  def is_shape_owner_disabled(self, owner_id:int)->bool: pass

  def shape_owner_add_shape(self, owner_id:int, shape:__shape3d__.Shape3D)->None: pass

  def shape_owner_get_shape_count(self, owner_id:int)->int: pass

  def shape_owner_get_shape(self, owner_id:int, shape_id:int)->__shape3d__.Shape3D: pass

  def shape_owner_get_shape_index(self, owner_id:int, shape_id:int)->int: pass

  def shape_owner_remove_shape(self, owner_id:int, shape_id:int)->None: pass

  def shape_owner_clear_shapes(self, owner_id:int)->None: pass

  def shape_find_owner(self, shape_index:int)->int: pass


