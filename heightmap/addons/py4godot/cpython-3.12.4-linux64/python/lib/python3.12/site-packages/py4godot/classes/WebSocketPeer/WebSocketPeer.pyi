from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.PacketPeer.PacketPeer as __packetpeer__
import py4godot.classes.WebSocketPeer.WebSocketPeer as __websocketpeer__
import py4godot.classes.TLSOptions.TLSOptions as __tlsoptions__
import py4godot.classes.StreamPeer.StreamPeer as __streampeer__


class WebSocketPeer(__packetpeer__.PacketPeer):

  @staticmethod
  def constructor()->WebSocketPeer:pass



  @staticmethod
  def cast(other:__object__.Object)->WebSocketPeer:pass


  @property
  def supported_protocols(self)->__core__.PackedStringArray: pass
  @supported_protocols.setter
  def supported_protocols(self,  value:__core__.PackedStringArray)->None: pass
  @property
  def handshake_headers(self)->__core__.PackedStringArray: pass
  @handshake_headers.setter
  def handshake_headers(self,  value:__core__.PackedStringArray)->None: pass
  @property
  def inbound_buffer_size(self)->int: pass
  @inbound_buffer_size.setter
  def inbound_buffer_size(self,  value:int)->None: pass
  @property
  def outbound_buffer_size(self)->int: pass
  @outbound_buffer_size.setter
  def outbound_buffer_size(self,  value:int)->None: pass
  @property
  def max_queued_packets(self)->int: pass
  @max_queued_packets.setter
  def max_queued_packets(self,  value:int)->None: pass
  def connect_to_url(self, url:str, tls_client_options:__tlsoptions__.TLSOptions= __tlsoptions__.TLSOptions.constructor())->int: pass

  def accept_stream(self, stream:__streampeer__.StreamPeer)->int: pass

  def send(self, message:__core__.PackedByteArray, write_mode:int =1)->int: pass

  def send_text(self, message:str)->int: pass

  def was_string_packet(self)->bool: pass

  def poll(self)->None: pass

  def close(self, code:int=1000, reason:str= __core__.String.new0())->None: pass

  def get_connected_host(self)->str: pass

  def get_connected_port(self)->int: pass

  def get_selected_protocol(self)->str: pass

  def get_requested_url(self)->str: pass

  def set_no_delay(self, enabled:bool)->None: pass

  def get_current_outbound_buffered_amount(self)->int: pass

  def get_ready_state(self)->int: pass

  def get_close_code(self)->int: pass

  def get_close_reason(self)->str: pass

  def get_supported_protocols(self)->__core__.PackedStringArray: pass

  def set_supported_protocols(self, protocols:__core__.PackedStringArray)->None: pass

  def get_handshake_headers(self)->__core__.PackedStringArray: pass

  def set_handshake_headers(self, protocols:__core__.PackedStringArray)->None: pass

  def get_inbound_buffer_size(self)->int: pass

  def set_inbound_buffer_size(self, buffer_size:int)->None: pass

  def get_outbound_buffer_size(self)->int: pass

  def set_outbound_buffer_size(self, buffer_size:int)->None: pass

  def set_max_queued_packets(self, buffer_size:int)->None: pass

  def get_max_queued_packets(self)->int: pass


