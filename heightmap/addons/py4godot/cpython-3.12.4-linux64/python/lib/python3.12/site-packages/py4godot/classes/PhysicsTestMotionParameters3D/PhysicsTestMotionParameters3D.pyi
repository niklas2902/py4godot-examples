from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.RefCounted.RefCounted as __refcounted__


class PhysicsTestMotionParameters3D(__refcounted__.RefCounted):

  @staticmethod
  def constructor()->PhysicsTestMotionParameters3D:pass



  @staticmethod
  def cast(other:__object__.Object)->PhysicsTestMotionParameters3D:pass


  @property
  def from_(self)->__core__.Transform3D: pass
  @from_.setter
  def from_(self,  value:__core__.Transform3D)->None: pass
  @property
  def motion(self)->__core__.Vector3: pass
  @motion.setter
  def motion(self,  value:__core__.Vector3)->None: pass
  @property
  def margin(self)->float: pass
  @margin.setter
  def margin(self,  value:float)->None: pass
  @property
  def max_collisions(self)->int: pass
  @max_collisions.setter
  def max_collisions(self,  value:int)->None: pass
  @property
  def collide_separation_ray(self)->bool: pass
  @collide_separation_ray.setter
  def collide_separation_ray(self,  value:bool)->None: pass
  @property
  def exclude_bodies(self)->typedarray::RID: pass
  @exclude_bodies.setter
  def exclude_bodies(self,  value:__core__.Array)->None: pass
  @property
  def exclude_objects(self)->__core__.Array: pass
  @exclude_objects.setter
  def exclude_objects(self,  value:__core__.Array)->None: pass
  @property
  def recovery_as_collision(self)->bool: pass
  @recovery_as_collision.setter
  def recovery_as_collision(self,  value:bool)->None: pass
  def get_from(self)->__core__.Transform3D: pass

  def set_from(self, from_:__core__.Transform3D)->None: pass

  def get_motion(self)->__core__.Vector3: pass

  def set_motion(self, motion:__core__.Vector3)->None: pass

  def get_margin(self)->float: pass

  def set_margin(self, margin:float)->None: pass

  def get_max_collisions(self)->int: pass

  def set_max_collisions(self, max_collisions:int)->None: pass

  def is_collide_separation_ray_enabled(self)->bool: pass

  def set_collide_separation_ray_enabled(self, enabled:bool)->None: pass

  def get_exclude_bodies(self)->__core__.Array: pass

  def set_exclude_bodies(self, exclude_list:__core__.Array)->None: pass

  def get_exclude_objects(self)->__core__.Array: pass

  def set_exclude_objects(self, exclude_list:__core__.Array)->None: pass

  def is_recovery_as_collision_enabled(self)->bool: pass

  def set_recovery_as_collision_enabled(self, enabled:bool)->None: pass


