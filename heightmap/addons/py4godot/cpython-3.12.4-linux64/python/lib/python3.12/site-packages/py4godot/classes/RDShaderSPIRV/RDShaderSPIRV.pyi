from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Resource.Resource as __resource__
import py4godot.classes.RenderingDevice.RenderingDevice as __renderingdevice__


class RDShaderSPIRV(__resource__.Resource):

  @staticmethod
  def constructor()->RDShaderSPIRV:pass



  @staticmethod
  def cast(other:__object__.Object)->RDShaderSPIRV:pass


  @property
  def bytecode_vertex(self)->__core__.PackedByteArray: pass
  @bytecode_vertex.setter
  def bytecode_vertex(self,  value:__core__.PackedByteArray)->None: pass
  @property
  def bytecode_fragment(self)->__core__.PackedByteArray: pass
  @bytecode_fragment.setter
  def bytecode_fragment(self,  value:__core__.PackedByteArray)->None: pass
  @property
  def bytecode_tesselation_control(self)->__core__.PackedByteArray: pass
  @bytecode_tesselation_control.setter
  def bytecode_tesselation_control(self,  value:__core__.PackedByteArray)->None: pass
  @property
  def bytecode_tesselation_evaluation(self)->__core__.PackedByteArray: pass
  @bytecode_tesselation_evaluation.setter
  def bytecode_tesselation_evaluation(self,  value:__core__.PackedByteArray)->None: pass
  @property
  def bytecode_compute(self)->__core__.PackedByteArray: pass
  @bytecode_compute.setter
  def bytecode_compute(self,  value:__core__.PackedByteArray)->None: pass
  @property
  def compile_error_vertex(self)->str: pass
  @compile_error_vertex.setter
  def compile_error_vertex(self,  value:str)->None: pass
  @property
  def compile_error_fragment(self)->str: pass
  @compile_error_fragment.setter
  def compile_error_fragment(self,  value:str)->None: pass
  @property
  def compile_error_tesselation_control(self)->str: pass
  @compile_error_tesselation_control.setter
  def compile_error_tesselation_control(self,  value:str)->None: pass
  @property
  def compile_error_tesselation_evaluation(self)->str: pass
  @compile_error_tesselation_evaluation.setter
  def compile_error_tesselation_evaluation(self,  value:str)->None: pass
  @property
  def compile_error_compute(self)->str: pass
  @compile_error_compute.setter
  def compile_error_compute(self,  value:str)->None: pass
  def set_stage_bytecode(self, stage:int , bytecode:__core__.PackedByteArray)->None: pass

  def get_stage_bytecode(self, stage:int )->__core__.PackedByteArray: pass

  def set_stage_compile_error(self, stage:int , compile_error:str)->None: pass

  def get_stage_compile_error(self, stage:int )->str: pass


