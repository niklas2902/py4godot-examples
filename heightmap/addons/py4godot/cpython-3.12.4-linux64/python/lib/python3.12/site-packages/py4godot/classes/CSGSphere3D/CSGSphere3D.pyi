from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.ShaderMaterial.ShaderMaterial as __shadermaterial__
import py4godot.classes.CSGPrimitive3D.CSGPrimitive3D as __csgprimitive3d__
import py4godot.classes.Material.Material as __material__


class CSGSphere3D(__csgprimitive3d__.CSGPrimitive3D):

  @staticmethod
  def constructor()->CSGSphere3D:pass



  @staticmethod
  def cast(other:__object__.Object)->CSGSphere3D:pass


  @property
  def radius(self)->float: pass
  @radius.setter
  def radius(self,  value:float)->None: pass
  @property
  def radial_segments(self)->int: pass
  @radial_segments.setter
  def radial_segments(self,  value:int)->None: pass
  @property
  def rings(self)->int: pass
  @rings.setter
  def rings(self,  value:int)->None: pass
  @property
  def smooth_faces(self)->bool: pass
  @smooth_faces.setter
  def smooth_faces(self,  value:bool)->None: pass
  @property
  def material(self)->BaseMaterial3D,ShaderMaterial: pass
  @material.setter
  def material(self,  value:__shadermaterial__.ShaderMaterial)->None: pass
  def set_radius(self, radius:float)->None: pass

  def get_radius(self)->float: pass

  def set_radial_segments(self, radial_segments:int)->None: pass

  def get_radial_segments(self)->int: pass

  def set_rings(self, rings:int)->None: pass

  def get_rings(self)->int: pass

  def set_smooth_faces(self, smooth_faces:bool)->None: pass

  def get_smooth_faces(self)->bool: pass

  def set_material(self, material:__material__.Material)->None: pass

  def get_material(self)->__material__.Material: pass


