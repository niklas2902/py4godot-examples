from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.TileMapLayer.TileMapLayer as __tilemaplayer__
import py4godot.classes.TileMapPattern.TileMapPattern as __tilemappattern__
import py4godot.classes.TileSet.TileSet as __tileset__
import py4godot.classes.Node2D.Node2D as __node2d__
import py4godot.classes.TileData.TileData as __tiledata__


class TileMapLayer(__node2d__.Node2D):
  changed: BuiltinSignal

  @staticmethod
  def constructor()->TileMapLayer:pass



  @staticmethod
  def cast(other:__object__.Object)->TileMapLayer:pass


  @property
  def tile_map_data(self)->__core__.PackedByteArray: pass
  @tile_map_data.setter
  def tile_map_data(self,  value:__core__.PackedByteArray)->None: pass
  @property
  def enabled(self)->bool: pass
  @enabled.setter
  def enabled(self,  value:bool)->None: pass
  @property
  def tile_set(self)->__tileset__.TileSet: pass
  @tile_set.setter
  def tile_set(self,  value:__tileset__.TileSet)->None: pass
  @property
  def y_sort_origin(self)->int: pass
  @y_sort_origin.setter
  def y_sort_origin(self,  value:int)->None: pass
  @property
  def x_draw_order_reversed(self)->bool: pass
  @x_draw_order_reversed.setter
  def x_draw_order_reversed(self,  value:bool)->None: pass
  @property
  def rendering_quadrant_size(self)->int: pass
  @rendering_quadrant_size.setter
  def rendering_quadrant_size(self,  value:int)->None: pass
  @property
  def collision_enabled(self)->bool: pass
  @collision_enabled.setter
  def collision_enabled(self,  value:bool)->None: pass
  @property
  def use_kinematic_bodies(self)->bool: pass
  @use_kinematic_bodies.setter
  def use_kinematic_bodies(self,  value:bool)->None: pass
  @property
  def collision_visibility_mode(self)->int: pass
  @collision_visibility_mode.setter
  def collision_visibility_mode(self,  value:int)->None: pass
  @property
  def navigation_enabled(self)->bool: pass
  @navigation_enabled.setter
  def navigation_enabled(self,  value:bool)->None: pass
  @property
  def navigation_visibility_mode(self)->int: pass
  @navigation_visibility_mode.setter
  def navigation_visibility_mode(self,  value:int)->None: pass
  def _use_tile_data_runtime_update(self, coords:__core__.Vector2i)->bool: pass

  def _tile_data_runtime_update(self, coords:__core__.Vector2i, tile_data:__tiledata__.TileData)->None: pass

  def set_cell(self, coords:__core__.Vector2i, source_id:int=-1, atlas_coords:__core__.Vector2i= __core__.Vector2i.new0(), alternative_tile:int=0)->None: pass

  def erase_cell(self, coords:__core__.Vector2i)->None: pass

  def fix_invalid_tiles(self)->None: pass

  def clear(self)->None: pass

  def get_cell_source_id(self, coords:__core__.Vector2i)->int: pass

  def get_cell_atlas_coords(self, coords:__core__.Vector2i)->__core__.Vector2i: pass

  def get_cell_alternative_tile(self, coords:__core__.Vector2i)->int: pass

  def get_cell_tile_data(self, coords:__core__.Vector2i)->__tiledata__.TileData: pass

  def get_used_cells(self)->__core__.Array: pass

  def get_used_cells_by_id(self, source_id:int=-1, atlas_coords:__core__.Vector2i= __core__.Vector2i.new0(), alternative_tile:int=-1)->__core__.Array: pass

  def get_used_rect(self)->__core__.Rect2i: pass

  def get_pattern(self, coords_array:__core__.Array)->__tilemappattern__.TileMapPattern: pass

  def set_pattern(self, position:__core__.Vector2i, pattern:__tilemappattern__.TileMapPattern)->None: pass

  def set_cells_terrain_connect(self, cells:__core__.Array, terrain_set:int, terrain:int, ignore_empty_terrains:bool=True)->None: pass

  def set_cells_terrain_path(self, path:__core__.Array, terrain_set:int, terrain:int, ignore_empty_terrains:bool=True)->None: pass

  def has_body_rid(self, body:__core__.RID)->bool: pass

  def get_coords_for_body_rid(self, body:__core__.RID)->__core__.Vector2i: pass

  def update_internals(self)->None: pass

  def notify_runtime_tile_data_update(self)->None: pass

  def map_pattern(self, position_in_tilemap:__core__.Vector2i, coords_in_pattern:__core__.Vector2i, pattern:__tilemappattern__.TileMapPattern)->__core__.Vector2i: pass

  def get_surrounding_cells(self, coords:__core__.Vector2i)->__core__.Array: pass

  def get_neighbor_cell(self, coords:__core__.Vector2i, neighbor:int )->__core__.Vector2i: pass

  def map_to_local(self, map_position:__core__.Vector2i)->__core__.Vector2: pass

  def local_to_map(self, local_position:__core__.Vector2)->__core__.Vector2i: pass

  def set_tile_map_data_from_array(self, tile_map_layer_data:__core__.PackedByteArray)->None: pass

  def get_tile_map_data_as_array(self)->__core__.PackedByteArray: pass

  def set_enabled(self, enabled:bool)->None: pass

  def is_enabled(self)->bool: pass

  def set_tile_set(self, tile_set:__tileset__.TileSet)->None: pass

  def get_tile_set(self)->__tileset__.TileSet: pass

  def set_y_sort_origin(self, y_sort_origin:int)->None: pass

  def get_y_sort_origin(self)->int: pass

  def set_x_draw_order_reversed(self, x_draw_order_reversed:bool)->None: pass

  def is_x_draw_order_reversed(self)->bool: pass

  def set_rendering_quadrant_size(self, size:int)->None: pass

  def get_rendering_quadrant_size(self)->int: pass

  def set_collision_enabled(self, enabled:bool)->None: pass

  def is_collision_enabled(self)->bool: pass

  def set_use_kinematic_bodies(self, use_kinematic_bodies:bool)->None: pass

  def is_using_kinematic_bodies(self)->bool: pass

  def set_collision_visibility_mode(self, visibility_mode:int )->None: pass

  def get_collision_visibility_mode(self)->int: pass

  def set_navigation_enabled(self, enabled:bool)->None: pass

  def is_navigation_enabled(self)->bool: pass

  def set_navigation_map(self, map:__core__.RID)->None: pass

  def get_navigation_map(self)->__core__.RID: pass

  def set_navigation_visibility_mode(self, show_navigation:int )->None: pass

  def get_navigation_visibility_mode(self)->int: pass


