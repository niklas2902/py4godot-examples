from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Node.Node as __node__


class MultiplayerSpawner(__node__.Node):
  despawned: BuiltinSignal
  spawned: BuiltinSignal

  @staticmethod
  def constructor()->MultiplayerSpawner:pass



  @staticmethod
  def cast(other:__object__.Object)->MultiplayerSpawner:pass


  @property
  def spawn_path(self)->__core__.NodePath: pass
  @spawn_path.setter
  def spawn_path(self,  value:__core__.NodePath)->None: pass
  @property
  def spawn_limit(self)->int: pass
  @spawn_limit.setter
  def spawn_limit(self,  value:int)->None: pass
  @property
  def spawn_function(self)->__core__.Callable: pass
  @spawn_function.setter
  def spawn_function(self,  value:__core__.Callable)->None: pass
  def add_spawnable_scene(self, path:str)->None: pass

  def get_spawnable_scene_count(self)->int: pass

  def get_spawnable_scene(self, index:int)->str: pass

  def clear_spawnable_scenes(self)->None: pass

  def spawn(self, data:object=None)->__node__.Node: pass

  def get_spawn_path(self)->__core__.NodePath: pass

  def set_spawn_path(self, path:__core__.NodePath)->None: pass

  def get_spawn_limit(self)->int: pass

  def set_spawn_limit(self, limit:int)->None: pass

  def get_spawn_function(self)->__core__.Callable: pass

  def set_spawn_function(self, spawn_function:__core__.Callable)->None: pass


