from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.NavigationPolygon.NavigationPolygon as __navigationpolygon__
import py4godot.classes.Resource.Resource as __resource__
import py4godot.classes.NavigationMesh.NavigationMesh as __navigationmesh__


class NavigationPolygon(__resource__.Resource):

  @staticmethod
  def constructor()->NavigationPolygon:pass



  @staticmethod
  def cast(other:__object__.Object)->NavigationPolygon:pass


  @property
  def vertices(self)->__core__.PackedVector2Array: pass
  @vertices.setter
  def vertices(self,  value:__core__.PackedVector2Array)->None: pass
  @property
  def polygons(self)->__core__.Array: pass
  @polygons.setter
  def polygons(self,  value:__core__.Array)->None: pass
  @property
  def outlines(self)->__core__.Array: pass
  @outlines.setter
  def outlines(self,  value:__core__.Array)->None: pass
  @property
  def parsed_geometry_type(self)->int: pass
  @parsed_geometry_type.setter
  def parsed_geometry_type(self,  value:int)->None: pass
  @property
  def parsed_collision_mask(self)->int: pass
  @parsed_collision_mask.setter
  def parsed_collision_mask(self,  value:int)->None: pass
  @property
  def source_geometry_mode(self)->int: pass
  @source_geometry_mode.setter
  def source_geometry_mode(self,  value:int)->None: pass
  @property
  def source_geometry_group_name(self)->str: pass
  @source_geometry_group_name.setter
  def source_geometry_group_name(self,  value:str)->None: pass
  @property
  def cell_size(self)->float: pass
  @cell_size.setter
  def cell_size(self,  value:float)->None: pass
  @property
  def border_size(self)->float: pass
  @border_size.setter
  def border_size(self,  value:float)->None: pass
  @property
  def agent_radius(self)->float: pass
  @agent_radius.setter
  def agent_radius(self,  value:float)->None: pass
  @property
  def baking_rect(self)->__core__.Rect2: pass
  @baking_rect.setter
  def baking_rect(self,  value:__core__.Rect2)->None: pass
  @property
  def baking_rect_offset(self)->__core__.Vector2: pass
  @baking_rect_offset.setter
  def baking_rect_offset(self,  value:__core__.Vector2)->None: pass
  def set_vertices(self, vertices:__core__.PackedVector2Array)->None: pass

  def get_vertices(self)->__core__.PackedVector2Array: pass

  def add_polygon(self, polygon:__core__.PackedInt32Array)->None: pass

  def get_polygon_count(self)->int: pass

  def get_polygon(self, idx:int)->__core__.PackedInt32Array: pass

  def clear_polygons(self)->None: pass

  def get_navigation_mesh(self)->__navigationmesh__.NavigationMesh: pass

  def add_outline(self, outline:__core__.PackedVector2Array)->None: pass

  def add_outline_at_index(self, outline:__core__.PackedVector2Array, index:int)->None: pass

  def get_outline_count(self)->int: pass

  def set_outline(self, idx:int, outline:__core__.PackedVector2Array)->None: pass

  def get_outline(self, idx:int)->__core__.PackedVector2Array: pass

  def remove_outline(self, idx:int)->None: pass

  def clear_outlines(self)->None: pass

  def make_polygons_from_outlines(self)->None: pass

  def set_cell_size(self, cell_size:float)->None: pass

  def get_cell_size(self)->float: pass

  def set_border_size(self, border_size:float)->None: pass

  def get_border_size(self)->float: pass

  def set_parsed_geometry_type(self, geometry_type:int )->None: pass

  def get_parsed_geometry_type(self)->int: pass

  def set_parsed_collision_mask(self, mask:int)->None: pass

  def get_parsed_collision_mask(self)->int: pass

  def set_parsed_collision_mask_value(self, layer_number:int, value:bool)->None: pass

  def get_parsed_collision_mask_value(self, layer_number:int)->bool: pass

  def set_source_geometry_mode(self, geometry_mode:int )->None: pass

  def get_source_geometry_mode(self)->int: pass

  def set_source_geometry_group_name(self, group_name:__core__.StringName)->None: pass

  def get_source_geometry_group_name(self)->__core__.StringName: pass

  def set_agent_radius(self, agent_radius:float)->None: pass

  def get_agent_radius(self)->float: pass

  def set_baking_rect(self, rect:__core__.Rect2)->None: pass

  def get_baking_rect(self)->__core__.Rect2: pass

  def set_baking_rect_offset(self, rect_offset:__core__.Vector2)->None: pass

  def get_baking_rect_offset(self)->__core__.Vector2: pass

  def clear(self)->None: pass


