from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Object.Object as __object__
import py4godot.classes.NativeMenu.NativeMenu as __nativemenu__
import py4godot.classes.Texture2D.Texture2D as __texture2d__


class NativeMenu(__object__.Object):



  @staticmethod
  def cast(other:__object__.Object)->NativeMenu:pass

  @staticmethod
  def get_instance()->NativeMenu:pass

  def has_feature(self, feature:int )->bool: pass

  def has_system_menu(self, menu_id:int )->bool: pass

  def get_system_menu(self, menu_id:int )->__core__.RID: pass

  def get_system_menu_name(self, menu_id:int )->str: pass

  def create_menu(self)->__core__.RID: pass

  def has_menu(self, rid:__core__.RID)->bool: pass

  def free_menu(self, rid:__core__.RID)->None: pass

  def get_size(self, rid:__core__.RID)->__core__.Vector2: pass

  def popup(self, rid:__core__.RID, position:__core__.Vector2i)->None: pass

  def set_interface_direction(self, rid:__core__.RID, is_rtl:bool)->None: pass

  def set_popup_open_callback(self, rid:__core__.RID, callback:__core__.Callable)->None: pass

  def get_popup_open_callback(self, rid:__core__.RID)->__core__.Callable: pass

  def set_popup_close_callback(self, rid:__core__.RID, callback:__core__.Callable)->None: pass

  def get_popup_close_callback(self, rid:__core__.RID)->__core__.Callable: pass

  def set_minimum_width(self, rid:__core__.RID, width:float)->None: pass

  def get_minimum_width(self, rid:__core__.RID)->float: pass

  def is_opened(self, rid:__core__.RID)->bool: pass

  def add_submenu_item(self, rid:__core__.RID, label:str, submenu_rid:__core__.RID, tag:object=None, index:int=-1)->int: pass

  def add_item(self, rid:__core__.RID, label:str, callback:__core__.Callable= __core__.Callable.new0(), key_callback:__core__.Callable= __core__.Callable.new0(), tag:object=None, accelerator:int =0, index:int=-1)->int: pass

  def add_check_item(self, rid:__core__.RID, label:str, callback:__core__.Callable= __core__.Callable.new0(), key_callback:__core__.Callable= __core__.Callable.new0(), tag:object=None, accelerator:int =0, index:int=-1)->int: pass

  def add_icon_item(self, rid:__core__.RID, icon:__texture2d__.Texture2D, label:str, callback:__core__.Callable= __core__.Callable.new0(), key_callback:__core__.Callable= __core__.Callable.new0(), tag:object=None, accelerator:int =0, index:int=-1)->int: pass

  def add_icon_check_item(self, rid:__core__.RID, icon:__texture2d__.Texture2D, label:str, callback:__core__.Callable= __core__.Callable.new0(), key_callback:__core__.Callable= __core__.Callable.new0(), tag:object=None, accelerator:int =0, index:int=-1)->int: pass

  def add_radio_check_item(self, rid:__core__.RID, label:str, callback:__core__.Callable= __core__.Callable.new0(), key_callback:__core__.Callable= __core__.Callable.new0(), tag:object=None, accelerator:int =0, index:int=-1)->int: pass

  def add_icon_radio_check_item(self, rid:__core__.RID, icon:__texture2d__.Texture2D, label:str, callback:__core__.Callable= __core__.Callable.new0(), key_callback:__core__.Callable= __core__.Callable.new0(), tag:object=None, accelerator:int =0, index:int=-1)->int: pass

  def add_multistate_item(self, rid:__core__.RID, label:str, max_states:int, default_state:int, callback:__core__.Callable= __core__.Callable.new0(), key_callback:__core__.Callable= __core__.Callable.new0(), tag:object=None, accelerator:int =0, index:int=-1)->int: pass

  def add_separator(self, rid:__core__.RID, index:int=-1)->int: pass

  def find_item_index_with_text(self, rid:__core__.RID, text:str)->int: pass

  def find_item_index_with_tag(self, rid:__core__.RID, tag:object)->int: pass

  def find_item_index_with_submenu(self, rid:__core__.RID, submenu_rid:__core__.RID)->int: pass

  def is_item_checked(self, rid:__core__.RID, idx:int)->bool: pass

  def is_item_checkable(self, rid:__core__.RID, idx:int)->bool: pass

  def is_item_radio_checkable(self, rid:__core__.RID, idx:int)->bool: pass

  def get_item_callback(self, rid:__core__.RID, idx:int)->__core__.Callable: pass

  def get_item_key_callback(self, rid:__core__.RID, idx:int)->__core__.Callable: pass

  def get_item_tag(self, rid:__core__.RID, idx:int)->object: pass

  def get_item_text(self, rid:__core__.RID, idx:int)->str: pass

  def get_item_submenu(self, rid:__core__.RID, idx:int)->__core__.RID: pass

  def get_item_accelerator(self, rid:__core__.RID, idx:int)->int: pass

  def is_item_disabled(self, rid:__core__.RID, idx:int)->bool: pass

  def is_item_hidden(self, rid:__core__.RID, idx:int)->bool: pass

  def get_item_tooltip(self, rid:__core__.RID, idx:int)->str: pass

  def get_item_state(self, rid:__core__.RID, idx:int)->int: pass

  def get_item_max_states(self, rid:__core__.RID, idx:int)->int: pass

  def get_item_icon(self, rid:__core__.RID, idx:int)->__texture2d__.Texture2D: pass

  def get_item_indentation_level(self, rid:__core__.RID, idx:int)->int: pass

  def set_item_checked(self, rid:__core__.RID, idx:int, checked:bool)->None: pass

  def set_item_checkable(self, rid:__core__.RID, idx:int, checkable:bool)->None: pass

  def set_item_radio_checkable(self, rid:__core__.RID, idx:int, checkable:bool)->None: pass

  def set_item_callback(self, rid:__core__.RID, idx:int, callback:__core__.Callable)->None: pass

  def set_item_hover_callbacks(self, rid:__core__.RID, idx:int, callback:__core__.Callable)->None: pass

  def set_item_key_callback(self, rid:__core__.RID, idx:int, key_callback:__core__.Callable)->None: pass

  def set_item_tag(self, rid:__core__.RID, idx:int, tag:object)->None: pass

  def set_item_text(self, rid:__core__.RID, idx:int, text:str)->None: pass

  def set_item_submenu(self, rid:__core__.RID, idx:int, submenu_rid:__core__.RID)->None: pass

  def set_item_accelerator(self, rid:__core__.RID, idx:int, keycode:int )->None: pass

  def set_item_disabled(self, rid:__core__.RID, idx:int, disabled:bool)->None: pass

  def set_item_hidden(self, rid:__core__.RID, idx:int, hidden:bool)->None: pass

  def set_item_tooltip(self, rid:__core__.RID, idx:int, tooltip:str)->None: pass

  def set_item_state(self, rid:__core__.RID, idx:int, state:int)->None: pass

  def set_item_max_states(self, rid:__core__.RID, idx:int, max_states:int)->None: pass

  def set_item_icon(self, rid:__core__.RID, idx:int, icon:__texture2d__.Texture2D)->None: pass

  def set_item_indentation_level(self, rid:__core__.RID, idx:int, level:int)->None: pass

  def get_item_count(self, rid:__core__.RID)->int: pass

  def is_system_menu(self, rid:__core__.RID)->bool: pass

  def remove_item(self, rid:__core__.RID, idx:int)->None: pass

  def clear(self, rid:__core__.RID)->None: pass


