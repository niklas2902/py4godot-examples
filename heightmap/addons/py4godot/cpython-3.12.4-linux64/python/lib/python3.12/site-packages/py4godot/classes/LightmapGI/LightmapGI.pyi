from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.LightmapGIData.LightmapGIData as __lightmapgidata__
import py4godot.classes.LightmapGI.LightmapGI as __lightmapgi__
import py4godot.classes.CameraAttributes.CameraAttributes as __cameraattributes__
import py4godot.classes.CameraAttributesPhysical.CameraAttributesPhysical as __cameraattributesphysical__
import py4godot.classes.VisualInstance3D.VisualInstance3D as __visualinstance3d__
import py4godot.classes.Sky.Sky as __sky__


class LightmapGI(__visualinstance3d__.VisualInstance3D):

  @staticmethod
  def constructor()->LightmapGI:pass



  @staticmethod
  def cast(other:__object__.Object)->LightmapGI:pass


  @property
  def quality(self)->int: pass
  @quality.setter
  def quality(self,  value:int)->None: pass
  @property
  def bounces(self)->int: pass
  @bounces.setter
  def bounces(self,  value:int)->None: pass
  @property
  def bounce_indirect_energy(self)->float: pass
  @bounce_indirect_energy.setter
  def bounce_indirect_energy(self,  value:float)->None: pass
  @property
  def directional(self)->bool: pass
  @directional.setter
  def directional(self,  value:bool)->None: pass
  @property
  def use_texture_for_bounces(self)->bool: pass
  @use_texture_for_bounces.setter
  def use_texture_for_bounces(self,  value:bool)->None: pass
  @property
  def interior(self)->bool: pass
  @interior.setter
  def interior(self,  value:bool)->None: pass
  @property
  def use_denoiser(self)->bool: pass
  @use_denoiser.setter
  def use_denoiser(self,  value:bool)->None: pass
  @property
  def denoiser_strength(self)->float: pass
  @denoiser_strength.setter
  def denoiser_strength(self,  value:float)->None: pass
  @property
  def denoiser_range(self)->int: pass
  @denoiser_range.setter
  def denoiser_range(self,  value:int)->None: pass
  @property
  def bias(self)->float: pass
  @bias.setter
  def bias(self,  value:float)->None: pass
  @property
  def texel_scale(self)->float: pass
  @texel_scale.setter
  def texel_scale(self,  value:float)->None: pass
  @property
  def max_texture_size(self)->int: pass
  @max_texture_size.setter
  def max_texture_size(self,  value:int)->None: pass
  @property
  def environment_mode(self)->int: pass
  @environment_mode.setter
  def environment_mode(self,  value:int)->None: pass
  @property
  def environment_custom_sky(self)->__sky__.Sky: pass
  @environment_custom_sky.setter
  def environment_custom_sky(self,  value:__sky__.Sky)->None: pass
  @property
  def environment_custom_color(self)->__core__.Color: pass
  @environment_custom_color.setter
  def environment_custom_color(self,  value:__core__.Color)->None: pass
  @property
  def environment_custom_energy(self)->float: pass
  @environment_custom_energy.setter
  def environment_custom_energy(self,  value:float)->None: pass
  @property
  def camera_attributes(self)->CameraAttributesPractical,CameraAttributesPhysical: pass
  @camera_attributes.setter
  def camera_attributes(self,  value:__cameraattributesphysical__.CameraAttributesPhysical)->None: pass
  @property
  def generate_probes_subdiv(self)->int: pass
  @generate_probes_subdiv.setter
  def generate_probes_subdiv(self,  value:int)->None: pass
  @property
  def light_data(self)->__lightmapgidata__.LightmapGIData: pass
  @light_data.setter
  def light_data(self,  value:__lightmapgidata__.LightmapGIData)->None: pass
  def set_light_data(self, data:__lightmapgidata__.LightmapGIData)->None: pass

  def get_light_data(self)->__lightmapgidata__.LightmapGIData: pass

  def set_bake_quality(self, bake_quality:int )->None: pass

  def get_bake_quality(self)->int: pass

  def set_bounces(self, bounces:int)->None: pass

  def get_bounces(self)->int: pass

  def set_bounce_indirect_energy(self, bounce_indirect_energy:float)->None: pass

  def get_bounce_indirect_energy(self)->float: pass

  def set_generate_probes(self, subdivision:int )->None: pass

  def get_generate_probes(self)->int: pass

  def set_bias(self, bias:float)->None: pass

  def get_bias(self)->float: pass

  def set_environment_mode(self, mode:int )->None: pass

  def get_environment_mode(self)->int: pass

  def set_environment_custom_sky(self, sky:__sky__.Sky)->None: pass

  def get_environment_custom_sky(self)->__sky__.Sky: pass

  def set_environment_custom_color(self, color:__core__.Color)->None: pass

  def get_environment_custom_color(self)->__core__.Color: pass

  def set_environment_custom_energy(self, energy:float)->None: pass

  def get_environment_custom_energy(self)->float: pass

  def set_texel_scale(self, texel_scale:float)->None: pass

  def get_texel_scale(self)->float: pass

  def set_max_texture_size(self, max_texture_size:int)->None: pass

  def get_max_texture_size(self)->int: pass

  def set_use_denoiser(self, use_denoiser:bool)->None: pass

  def is_using_denoiser(self)->bool: pass

  def set_denoiser_strength(self, denoiser_strength:float)->None: pass

  def get_denoiser_strength(self)->float: pass

  def set_denoiser_range(self, denoiser_range:int)->None: pass

  def get_denoiser_range(self)->int: pass

  def set_interior(self, enable:bool)->None: pass

  def is_interior(self)->bool: pass

  def set_directional(self, directional:bool)->None: pass

  def is_directional(self)->bool: pass

  def set_use_texture_for_bounces(self, use_texture_for_bounces:bool)->None: pass

  def is_using_texture_for_bounces(self)->bool: pass

  def set_camera_attributes(self, camera_attributes:__cameraattributes__.CameraAttributes)->None: pass

  def get_camera_attributes(self)->__cameraattributes__.CameraAttributes: pass


