from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.SkeletonModification2D.SkeletonModification2D as __skeletonmodification2d__


class SkeletonModification2DCCDIK(__skeletonmodification2d__.SkeletonModification2D):

  @staticmethod
  def constructor()->SkeletonModification2DCCDIK:pass



  @staticmethod
  def cast(other:__object__.Object)->SkeletonModification2DCCDIK:pass


  @property
  def target_nodepath(self)->__core__.NodePath: pass
  @target_nodepath.setter
  def target_nodepath(self,  value:__core__.NodePath)->None: pass
  @property
  def tip_nodepath(self)->__core__.NodePath: pass
  @tip_nodepath.setter
  def tip_nodepath(self,  value:__core__.NodePath)->None: pass
  @property
  def ccdik_data_chain_length(self)->int: pass
  @ccdik_data_chain_length.setter
  def ccdik_data_chain_length(self,  value:int)->None: pass
  def set_target_node(self, target_nodepath:__core__.NodePath)->None: pass

  def get_target_node(self)->__core__.NodePath: pass

  def set_tip_node(self, tip_nodepath:__core__.NodePath)->None: pass

  def get_tip_node(self)->__core__.NodePath: pass

  def set_ccdik_data_chain_length(self, length:int)->None: pass

  def get_ccdik_data_chain_length(self)->int: pass

  def set_ccdik_joint_bone2d_node(self, joint_idx:int, bone2d_nodepath:__core__.NodePath)->None: pass

  def get_ccdik_joint_bone2d_node(self, joint_idx:int)->__core__.NodePath: pass

  def set_ccdik_joint_bone_index(self, joint_idx:int, bone_idx:int)->None: pass

  def get_ccdik_joint_bone_index(self, joint_idx:int)->int: pass

  def set_ccdik_joint_rotate_from_joint(self, joint_idx:int, rotate_from_joint:bool)->None: pass

  def get_ccdik_joint_rotate_from_joint(self, joint_idx:int)->bool: pass

  def set_ccdik_joint_enable_constraint(self, joint_idx:int, enable_constraint:bool)->None: pass

  def get_ccdik_joint_enable_constraint(self, joint_idx:int)->bool: pass

  def set_ccdik_joint_constraint_angle_min(self, joint_idx:int, angle_min:float)->None: pass

  def get_ccdik_joint_constraint_angle_min(self, joint_idx:int)->float: pass

  def set_ccdik_joint_constraint_angle_max(self, joint_idx:int, angle_max:float)->None: pass

  def get_ccdik_joint_constraint_angle_max(self, joint_idx:int)->float: pass

  def set_ccdik_joint_constraint_angle_invert(self, joint_idx:int, invert:bool)->None: pass

  def get_ccdik_joint_constraint_angle_invert(self, joint_idx:int)->bool: pass


