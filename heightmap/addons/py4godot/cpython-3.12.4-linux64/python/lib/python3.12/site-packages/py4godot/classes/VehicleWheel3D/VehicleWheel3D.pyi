from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Node3D.Node3D as __node3d__


class VehicleWheel3D(__node3d__.Node3D):

  @staticmethod
  def constructor()->VehicleWheel3D:pass



  @staticmethod
  def cast(other:__object__.Object)->VehicleWheel3D:pass


  @property
  def engine_force(self)->float: pass
  @engine_force.setter
  def engine_force(self,  value:float)->None: pass
  @property
  def brake(self)->float: pass
  @brake.setter
  def brake(self,  value:float)->None: pass
  @property
  def steering(self)->float: pass
  @steering.setter
  def steering(self,  value:float)->None: pass
  @property
  def use_as_traction(self)->bool: pass
  @use_as_traction.setter
  def use_as_traction(self,  value:bool)->None: pass
  @property
  def use_as_steering(self)->bool: pass
  @use_as_steering.setter
  def use_as_steering(self,  value:bool)->None: pass
  @property
  def wheel_roll_influence(self)->float: pass
  @wheel_roll_influence.setter
  def wheel_roll_influence(self,  value:float)->None: pass
  @property
  def wheel_radius(self)->float: pass
  @wheel_radius.setter
  def wheel_radius(self,  value:float)->None: pass
  @property
  def wheel_rest_length(self)->float: pass
  @wheel_rest_length.setter
  def wheel_rest_length(self,  value:float)->None: pass
  @property
  def wheel_friction_slip(self)->float: pass
  @wheel_friction_slip.setter
  def wheel_friction_slip(self,  value:float)->None: pass
  @property
  def suspension_travel(self)->float: pass
  @suspension_travel.setter
  def suspension_travel(self,  value:float)->None: pass
  @property
  def suspension_stiffness(self)->float: pass
  @suspension_stiffness.setter
  def suspension_stiffness(self,  value:float)->None: pass
  @property
  def suspension_max_force(self)->float: pass
  @suspension_max_force.setter
  def suspension_max_force(self,  value:float)->None: pass
  @property
  def damping_compression(self)->float: pass
  @damping_compression.setter
  def damping_compression(self,  value:float)->None: pass
  @property
  def damping_relaxation(self)->float: pass
  @damping_relaxation.setter
  def damping_relaxation(self,  value:float)->None: pass
  def set_radius(self, length:float)->None: pass

  def get_radius(self)->float: pass

  def set_suspension_rest_length(self, length:float)->None: pass

  def get_suspension_rest_length(self)->float: pass

  def set_suspension_travel(self, length:float)->None: pass

  def get_suspension_travel(self)->float: pass

  def set_suspension_stiffness(self, length:float)->None: pass

  def get_suspension_stiffness(self)->float: pass

  def set_suspension_max_force(self, length:float)->None: pass

  def get_suspension_max_force(self)->float: pass

  def set_damping_compression(self, length:float)->None: pass

  def get_damping_compression(self)->float: pass

  def set_damping_relaxation(self, length:float)->None: pass

  def get_damping_relaxation(self)->float: pass

  def set_use_as_traction(self, enable:bool)->None: pass

  def is_used_as_traction(self)->bool: pass

  def set_use_as_steering(self, enable:bool)->None: pass

  def is_used_as_steering(self)->bool: pass

  def set_friction_slip(self, length:float)->None: pass

  def get_friction_slip(self)->float: pass

  def is_in_contact(self)->bool: pass

  def get_contact_body(self)->__node3d__.Node3D: pass

  def set_roll_influence(self, roll_influence:float)->None: pass

  def get_roll_influence(self)->float: pass

  def get_skidinfo(self)->float: pass

  def get_rpm(self)->float: pass

  def set_engine_force(self, engine_force:float)->None: pass

  def get_engine_force(self)->float: pass

  def set_brake(self, brake:float)->None: pass

  def get_brake(self)->float: pass

  def set_steering(self, steering:float)->None: pass

  def get_steering(self)->float: pass


