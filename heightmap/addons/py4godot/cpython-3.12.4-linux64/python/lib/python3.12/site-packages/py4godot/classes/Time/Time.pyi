from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Object.Object as __object__


class Time(__object__.Object):



  @staticmethod
  def cast(other:__object__.Object)->Time:pass

  @staticmethod
  def get_instance()->Time:pass

  def get_datetime_dict_from_unix_time(self, unix_time_val:int)->__core__.Dictionary: pass

  def get_date_dict_from_unix_time(self, unix_time_val:int)->__core__.Dictionary: pass

  def get_time_dict_from_unix_time(self, unix_time_val:int)->__core__.Dictionary: pass

  def get_datetime_string_from_unix_time(self, unix_time_val:int, use_space:bool=False)->str: pass

  def get_date_string_from_unix_time(self, unix_time_val:int)->str: pass

  def get_time_string_from_unix_time(self, unix_time_val:int)->str: pass

  def get_datetime_dict_from_datetime_string(self, datetime:str, weekday:bool)->__core__.Dictionary: pass

  def get_datetime_string_from_datetime_dict(self, datetime:__core__.Dictionary, use_space:bool)->str: pass

  def get_unix_time_from_datetime_dict(self, datetime:__core__.Dictionary)->int: pass

  def get_unix_time_from_datetime_string(self, datetime:str)->int: pass

  def get_offset_string_from_offset_minutes(self, offset_minutes:int)->str: pass

  def get_datetime_dict_from_system(self, utc:bool=False)->__core__.Dictionary: pass

  def get_date_dict_from_system(self, utc:bool=False)->__core__.Dictionary: pass

  def get_time_dict_from_system(self, utc:bool=False)->__core__.Dictionary: pass

  def get_datetime_string_from_system(self, utc:bool=False, use_space:bool=False)->str: pass

  def get_date_string_from_system(self, utc:bool=False)->str: pass

  def get_time_string_from_system(self, utc:bool=False)->str: pass

  def get_time_zone_from_system(self)->__core__.Dictionary: pass

  def get_unix_time_from_system(self)->float: pass

  def get_ticks_msec(self)->int: pass

  def get_ticks_usec(self)->int: pass


