from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Script.Script as __script__
import py4godot.classes.ScriptLanguage.ScriptLanguage as __scriptlanguage__
import py4godot.classes.Object.Object as __object__


class ScriptExtension(__script__.Script):

  @staticmethod
  def constructor()->ScriptExtension:pass



  @staticmethod
  def cast(other:__object__.Object)->ScriptExtension:pass


  def _editor_can_reload_from_file(self)->bool: pass

  def _can_instantiate(self)->bool: pass

  def _get_base_script(self)->__script__.Script: pass

  def _get_global_name(self)->__core__.StringName: pass

  def _inherits_script(self, script:__script__.Script)->bool: pass

  def _get_instance_base_type(self)->__core__.StringName: pass

  def _instance_create(self, for_object:__object__.Object)->void*: pass

  def _placeholder_instance_create(self, for_object:__object__.Object)->void*: pass

  def _instance_has(self, object:__object__.Object)->bool: pass

  def _has_source_code(self)->bool: pass

  def _get_source_code(self)->str: pass

  def _set_source_code(self, code:str)->None: pass

  def _reload(self, keep_state:bool)->int: pass

  def _get_documentation(self)->__core__.Array: pass

  def _get_class_icon_path(self)->str: pass

  def _has_method(self, method:__core__.StringName)->bool: pass

  def _has_static_method(self, method:__core__.StringName)->bool: pass

  def _get_script_method_argument_count(self, method:__core__.StringName)->object: pass

  def _get_method_info(self, method:__core__.StringName)->__core__.Dictionary: pass

  def _is_tool(self)->bool: pass

  def _is_valid(self)->bool: pass

  def _is_abstract(self)->bool: pass

  def _get_language(self)->__scriptlanguage__.ScriptLanguage: pass

  def _has_script_signal(self, signal:__core__.StringName)->bool: pass

  def _get_script_signal_list(self)->__core__.Array: pass

  def _has_property_default_value(self, property:__core__.StringName)->bool: pass

  def _get_property_default_value(self, property:__core__.StringName)->object: pass

  def _update_exports(self)->None: pass

  def _get_script_method_list(self)->__core__.Array: pass

  def _get_script_property_list(self)->__core__.Array: pass

  def _get_member_line(self, member:__core__.StringName)->int: pass

  def _get_constants(self)->__core__.Dictionary: pass

  def _get_members(self)->__core__.Array: pass

  def _is_placeholder_fallback_enabled(self)->bool: pass

  def _get_rpc_config(self)->object: pass


