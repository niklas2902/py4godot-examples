from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.NavigationMeshSourceGeometryData3D.NavigationMeshSourceGeometryData3D as __navigationmeshsourcegeometrydata3d__
import py4godot.classes.Mesh.Mesh as __mesh__
import py4godot.classes.Resource.Resource as __resource__


class NavigationMeshSourceGeometryData3D(__resource__.Resource):

  @staticmethod
  def constructor()->NavigationMeshSourceGeometryData3D:pass



  @staticmethod
  def cast(other:__object__.Object)->NavigationMeshSourceGeometryData3D:pass


  @property
  def vertices(self)->__core__.PackedVector3Array: pass
  @vertices.setter
  def vertices(self,  value:__core__.PackedVector3Array)->None: pass
  @property
  def indices(self)->__core__.PackedInt32Array: pass
  @indices.setter
  def indices(self,  value:__core__.PackedInt32Array)->None: pass
  @property
  def projected_obstructions(self)->__core__.Array: pass
  @projected_obstructions.setter
  def projected_obstructions(self,  value:__core__.Array)->None: pass
  def set_vertices(self, vertices:__core__.PackedFloat32Array)->None: pass

  def get_vertices(self)->__core__.PackedFloat32Array: pass

  def set_indices(self, indices:__core__.PackedInt32Array)->None: pass

  def get_indices(self)->__core__.PackedInt32Array: pass

  def append_arrays(self, vertices:__core__.PackedFloat32Array, indices:__core__.PackedInt32Array)->None: pass

  def clear(self)->None: pass

  def has_data(self)->bool: pass

  def add_mesh(self, mesh:__mesh__.Mesh, xform:__core__.Transform3D)->None: pass

  def add_mesh_array(self, mesh_array:__core__.Array, xform:__core__.Transform3D)->None: pass

  def add_faces(self, faces:__core__.PackedVector3Array, xform:__core__.Transform3D)->None: pass

  def merge(self, other_geometry:__navigationmeshsourcegeometrydata3d__.NavigationMeshSourceGeometryData3D)->None: pass

  def add_projected_obstruction(self, vertices:__core__.PackedVector3Array, elevation:float, height:float, carve:bool)->None: pass

  def clear_projected_obstructions(self)->None: pass

  def set_projected_obstructions(self, projected_obstructions:__core__.Array)->None: pass

  def get_projected_obstructions(self)->__core__.Array: pass


