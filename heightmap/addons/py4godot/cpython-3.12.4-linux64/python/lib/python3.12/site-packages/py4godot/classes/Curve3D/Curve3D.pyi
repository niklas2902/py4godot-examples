from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Resource.Resource as __resource__


class Curve3D(__resource__.Resource):

  @staticmethod
  def constructor()->Curve3D:pass



  @staticmethod
  def cast(other:__object__.Object)->Curve3D:pass


  @property
  def bake_interval(self)->float: pass
  @bake_interval.setter
  def bake_interval(self,  value:float)->None: pass
  @property
  def point_count(self)->int: pass
  @point_count.setter
  def point_count(self,  value:int)->None: pass
  @property
  def up_vector_enabled(self)->bool: pass
  @up_vector_enabled.setter
  def up_vector_enabled(self,  value:bool)->None: pass
  def get_point_count(self)->int: pass

  def set_point_count(self, count:int)->None: pass

  def add_point(self, position:__core__.Vector3, in_:__core__.Vector3= __core__.Vector3.new0(), out:__core__.Vector3= __core__.Vector3.new0(), index:int=-1)->None: pass

  def set_point_position(self, idx:int, position:__core__.Vector3)->None: pass

  def get_point_position(self, idx:int)->__core__.Vector3: pass

  def set_point_tilt(self, idx:int, tilt:float)->None: pass

  def get_point_tilt(self, idx:int)->float: pass

  def set_point_in(self, idx:int, position:__core__.Vector3)->None: pass

  def get_point_in(self, idx:int)->__core__.Vector3: pass

  def set_point_out(self, idx:int, position:__core__.Vector3)->None: pass

  def get_point_out(self, idx:int)->__core__.Vector3: pass

  def remove_point(self, idx:int)->None: pass

  def clear_points(self)->None: pass

  def sample(self, idx:int, t:float)->__core__.Vector3: pass

  def samplef(self, fofs:float)->__core__.Vector3: pass

  def set_bake_interval(self, distance:float)->None: pass

  def get_bake_interval(self)->float: pass

  def set_up_vector_enabled(self, enable:bool)->None: pass

  def is_up_vector_enabled(self)->bool: pass

  def get_baked_length(self)->float: pass

  def sample_baked(self, offset:float=0.0, cubic:bool=False)->__core__.Vector3: pass

  def sample_baked_with_rotation(self, offset:float=0.0, cubic:bool=False, apply_tilt:bool=False)->__core__.Transform3D: pass

  def sample_baked_up_vector(self, offset:float, apply_tilt:bool=False)->__core__.Vector3: pass

  def get_baked_points(self)->__core__.PackedVector3Array: pass

  def get_baked_tilts(self)->__core__.PackedFloat32Array: pass

  def get_baked_up_vectors(self)->__core__.PackedVector3Array: pass

  def get_closest_point(self, to_point:__core__.Vector3)->__core__.Vector3: pass

  def get_closest_offset(self, to_point:__core__.Vector3)->float: pass

  def tessellate(self, max_stages:int=5, tolerance_degrees:float=4)->__core__.PackedVector3Array: pass

  def tessellate_even_length(self, max_stages:int=5, tolerance_length:float=0.2)->__core__.PackedVector3Array: pass


