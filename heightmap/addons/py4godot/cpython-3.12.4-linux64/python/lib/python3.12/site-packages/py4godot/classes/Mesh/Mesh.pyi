from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Resource.Resource as __resource__
import py4godot.classes.Material.Material as __material__
import py4godot.classes.ConvexPolygonShape3D.ConvexPolygonShape3D as __convexpolygonshape3d__
import py4godot.classes.Mesh.Mesh as __mesh__
import py4godot.classes.TriangleMesh.TriangleMesh as __trianglemesh__
import py4godot.classes.ConcavePolygonShape3D.ConcavePolygonShape3D as __concavepolygonshape3d__


class Mesh(__resource__.Resource):

  @staticmethod
  def constructor()->Mesh:pass



  @staticmethod
  def cast(other:__object__.Object)->Mesh:pass


  @property
  def lightmap_size_hint(self)->__core__.Vector2i: pass
  @lightmap_size_hint.setter
  def lightmap_size_hint(self,  value:__core__.Vector2i)->None: pass
  def _get_surface_count(self)->int: pass

  def _surface_get_array_len(self, index:int)->int: pass

  def _surface_get_array_index_len(self, index:int)->int: pass

  def _surface_get_arrays(self, index:int)->__core__.Array: pass

  def _surface_get_blend_shape_arrays(self, index:int)->__core__.Array: pass

  def _surface_get_lods(self, index:int)->__core__.Dictionary: pass

  def _surface_get_format(self, index:int)->int: pass

  def _surface_get_primitive_type(self, index:int)->int: pass

  def _surface_set_material(self, index:int, material:__material__.Material)->None: pass

  def _surface_get_material(self, index:int)->__material__.Material: pass

  def _get_blend_shape_count(self)->int: pass

  def _get_blend_shape_name(self, index:int)->__core__.StringName: pass

  def _set_blend_shape_name(self, index:int, name:__core__.StringName)->None: pass

  def _get_aabb(self)->__core__.AABB: pass

  def set_lightmap_size_hint(self, size:__core__.Vector2i)->None: pass

  def get_lightmap_size_hint(self)->__core__.Vector2i: pass

  def get_aabb(self)->__core__.AABB: pass

  def get_faces(self)->__core__.PackedVector3Array: pass

  def get_surface_count(self)->int: pass

  def surface_get_arrays(self, surf_idx:int)->__core__.Array: pass

  def surface_get_blend_shape_arrays(self, surf_idx:int)->__core__.Array: pass

  def surface_set_material(self, surf_idx:int, material:__material__.Material)->None: pass

  def surface_get_material(self, surf_idx:int)->__material__.Material: pass

  def create_placeholder(self)->__resource__.Resource: pass

  def create_trimesh_shape(self)->__concavepolygonshape3d__.ConcavePolygonShape3D: pass

  def create_convex_shape(self, clean:bool=True, simplify:bool=False)->__convexpolygonshape3d__.ConvexPolygonShape3D: pass

  def create_outline(self, margin:float)->__mesh__.Mesh: pass

  def generate_triangle_mesh(self)->__trianglemesh__.TriangleMesh: pass


