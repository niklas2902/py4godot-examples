from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.TileMap.TileMap as __tilemap__
import py4godot.classes.TileMapPattern.TileMapPattern as __tilemappattern__
import py4godot.classes.TileSet.TileSet as __tileset__
import py4godot.classes.Node2D.Node2D as __node2d__
import py4godot.classes.TileData.TileData as __tiledata__


class TileMap(__node2d__.Node2D):
  changed: BuiltinSignal

  @staticmethod
  def constructor()->TileMap:pass



  @staticmethod
  def cast(other:__object__.Object)->TileMap:pass


  @property
  def tile_set(self)->__tileset__.TileSet: pass
  @tile_set.setter
  def tile_set(self,  value:__tileset__.TileSet)->None: pass
  @property
  def rendering_quadrant_size(self)->int: pass
  @rendering_quadrant_size.setter
  def rendering_quadrant_size(self,  value:int)->None: pass
  @property
  def collision_animatable(self)->bool: pass
  @collision_animatable.setter
  def collision_animatable(self,  value:bool)->None: pass
  @property
  def collision_visibility_mode(self)->int: pass
  @collision_visibility_mode.setter
  def collision_visibility_mode(self,  value:int)->None: pass
  @property
  def navigation_visibility_mode(self)->int: pass
  @navigation_visibility_mode.setter
  def navigation_visibility_mode(self,  value:int)->None: pass
  def _use_tile_data_runtime_update(self, layer:int, coords:__core__.Vector2i)->bool: pass

  def _tile_data_runtime_update(self, layer:int, coords:__core__.Vector2i, tile_data:__tiledata__.TileData)->None: pass

  def set_navigation_map(self, layer:int, map:__core__.RID)->None: pass

  def get_navigation_map(self, layer:int)->__core__.RID: pass

  def force_update(self, layer:int=-1)->None: pass

  def set_tileset(self, tileset:__tileset__.TileSet)->None: pass

  def get_tileset(self)->__tileset__.TileSet: pass

  def set_rendering_quadrant_size(self, size:int)->None: pass

  def get_rendering_quadrant_size(self)->int: pass

  def get_layers_count(self)->int: pass

  def add_layer(self, to_position:int)->None: pass

  def move_layer(self, layer:int, to_position:int)->None: pass

  def remove_layer(self, layer:int)->None: pass

  def set_layer_name(self, layer:int, name:str)->None: pass

  def get_layer_name(self, layer:int)->str: pass

  def set_layer_enabled(self, layer:int, enabled:bool)->None: pass

  def is_layer_enabled(self, layer:int)->bool: pass

  def set_layer_modulate(self, layer:int, modulate:__core__.Color)->None: pass

  def get_layer_modulate(self, layer:int)->__core__.Color: pass

  def set_layer_y_sort_enabled(self, layer:int, y_sort_enabled:bool)->None: pass

  def is_layer_y_sort_enabled(self, layer:int)->bool: pass

  def set_layer_y_sort_origin(self, layer:int, y_sort_origin:int)->None: pass

  def get_layer_y_sort_origin(self, layer:int)->int: pass

  def set_layer_z_index(self, layer:int, z_index:int)->None: pass

  def get_layer_z_index(self, layer:int)->int: pass

  def set_layer_navigation_enabled(self, layer:int, enabled:bool)->None: pass

  def is_layer_navigation_enabled(self, layer:int)->bool: pass

  def set_layer_navigation_map(self, layer:int, map:__core__.RID)->None: pass

  def get_layer_navigation_map(self, layer:int)->__core__.RID: pass

  def set_collision_animatable(self, enabled:bool)->None: pass

  def is_collision_animatable(self)->bool: pass

  def set_collision_visibility_mode(self, collision_visibility_mode:int )->None: pass

  def get_collision_visibility_mode(self)->int: pass

  def set_navigation_visibility_mode(self, navigation_visibility_mode:int )->None: pass

  def get_navigation_visibility_mode(self)->int: pass

  def set_cell(self, layer:int, coords:__core__.Vector2i, source_id:int=-1, atlas_coords:__core__.Vector2i= __core__.Vector2i.new0(), alternative_tile:int=0)->None: pass

  def erase_cell(self, layer:int, coords:__core__.Vector2i)->None: pass

  def get_cell_source_id(self, layer:int, coords:__core__.Vector2i, use_proxies:bool=False)->int: pass

  def get_cell_atlas_coords(self, layer:int, coords:__core__.Vector2i, use_proxies:bool=False)->__core__.Vector2i: pass

  def get_cell_alternative_tile(self, layer:int, coords:__core__.Vector2i, use_proxies:bool=False)->int: pass

  def get_cell_tile_data(self, layer:int, coords:__core__.Vector2i, use_proxies:bool=False)->__tiledata__.TileData: pass

  def get_coords_for_body_rid(self, body:__core__.RID)->__core__.Vector2i: pass

  def get_layer_for_body_rid(self, body:__core__.RID)->int: pass

  def get_pattern(self, layer:int, coords_array:__core__.Array)->__tilemappattern__.TileMapPattern: pass

  def map_pattern(self, position_in_tilemap:__core__.Vector2i, coords_in_pattern:__core__.Vector2i, pattern:__tilemappattern__.TileMapPattern)->__core__.Vector2i: pass

  def set_pattern(self, layer:int, position:__core__.Vector2i, pattern:__tilemappattern__.TileMapPattern)->None: pass

  def set_cells_terrain_connect(self, layer:int, cells:__core__.Array, terrain_set:int, terrain:int, ignore_empty_terrains:bool=True)->None: pass

  def set_cells_terrain_path(self, layer:int, path:__core__.Array, terrain_set:int, terrain:int, ignore_empty_terrains:bool=True)->None: pass

  def fix_invalid_tiles(self)->None: pass

  def clear_layer(self, layer:int)->None: pass

  def clear(self)->None: pass

  def update_internals(self)->None: pass

  def notify_runtime_tile_data_update(self, layer:int=-1)->None: pass

  def get_surrounding_cells(self, coords:__core__.Vector2i)->__core__.Array: pass

  def get_used_cells(self, layer:int)->__core__.Array: pass

  def get_used_cells_by_id(self, layer:int, source_id:int=-1, atlas_coords:__core__.Vector2i= __core__.Vector2i.new0(), alternative_tile:int=-1)->__core__.Array: pass

  def get_used_rect(self)->__core__.Rect2i: pass

  def map_to_local(self, map_position:__core__.Vector2i)->__core__.Vector2: pass

  def local_to_map(self, local_position:__core__.Vector2)->__core__.Vector2i: pass

  def get_neighbor_cell(self, coords:__core__.Vector2i, neighbor:int )->__core__.Vector2i: pass


