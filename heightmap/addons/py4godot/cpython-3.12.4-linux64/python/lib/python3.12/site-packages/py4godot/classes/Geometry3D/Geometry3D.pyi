from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Object.Object as __object__


class Geometry3D(__object__.Object):



  @staticmethod
  def cast(other:__object__.Object)->Geometry3D:pass

  @staticmethod
  def get_instance()->Geometry3D:pass

  def compute_convex_mesh_points(self, planes:__core__.Array)->__core__.PackedVector3Array: pass

  def build_box_planes(self, extents:__core__.Vector3)->__core__.Array: pass

  def build_cylinder_planes(self, radius:float, height:float, sides:int, axis:int =2)->__core__.Array: pass

  def build_capsule_planes(self, radius:float, height:float, sides:int, lats:int, axis:int =2)->__core__.Array: pass

  def get_closest_points_between_segments(self, p1:__core__.Vector3, p2:__core__.Vector3, q1:__core__.Vector3, q2:__core__.Vector3)->__core__.PackedVector3Array: pass

  def get_closest_point_to_segment(self, point:__core__.Vector3, s1:__core__.Vector3, s2:__core__.Vector3)->__core__.Vector3: pass

  def get_closest_point_to_segment_uncapped(self, point:__core__.Vector3, s1:__core__.Vector3, s2:__core__.Vector3)->__core__.Vector3: pass

  def get_triangle_barycentric_coords(self, point:__core__.Vector3, a:__core__.Vector3, b:__core__.Vector3, c:__core__.Vector3)->__core__.Vector3: pass

  def ray_intersects_triangle(self, from_:__core__.Vector3, dir:__core__.Vector3, a:__core__.Vector3, b:__core__.Vector3, c:__core__.Vector3)->object: pass

  def segment_intersects_triangle(self, from_:__core__.Vector3, to:__core__.Vector3, a:__core__.Vector3, b:__core__.Vector3, c:__core__.Vector3)->object: pass

  def segment_intersects_sphere(self, from_:__core__.Vector3, to:__core__.Vector3, sphere_position:__core__.Vector3, sphere_radius:float)->__core__.PackedVector3Array: pass

  def segment_intersects_cylinder(self, from_:__core__.Vector3, to:__core__.Vector3, height:float, radius:float)->__core__.PackedVector3Array: pass

  def segment_intersects_convex(self, from_:__core__.Vector3, to:__core__.Vector3, planes:__core__.Array)->__core__.PackedVector3Array: pass

  def clip_polygon(self, points:__core__.PackedVector3Array, plane:__core__.Plane)->__core__.PackedVector3Array: pass

  def tetrahedralize_delaunay(self, points:__core__.PackedVector3Array)->__core__.PackedInt32Array: pass


