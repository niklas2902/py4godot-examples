from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.TabContainer.TabContainer as __tabcontainer__
import py4godot.classes.Node.Node as __node__
import py4godot.classes.Popup.Popup as __popup__
import py4godot.classes.TabBar.TabBar as __tabbar__
import py4godot.classes.Control.Control as __control__
import py4godot.classes.Texture2D.Texture2D as __texture2d__
import py4godot.classes.Container.Container as __container__


class TabContainer(__container__.Container):
  active_tab_rearranged: BuiltinSignal
  tab_changed: BuiltinSignal
  tab_clicked: BuiltinSignal
  tab_hovered: BuiltinSignal
  tab_selected: BuiltinSignal
  tab_button_pressed: BuiltinSignal
  pre_popup_pressed: BuiltinSignal

  @staticmethod
  def constructor()->TabContainer:pass



  @staticmethod
  def cast(other:__object__.Object)->TabContainer:pass


  @property
  def tab_alignment(self)->int: pass
  @tab_alignment.setter
  def tab_alignment(self,  value:int)->None: pass
  @property
  def current_tab(self)->int: pass
  @current_tab.setter
  def current_tab(self,  value:int)->None: pass
  @property
  def tabs_position(self)->int: pass
  @tabs_position.setter
  def tabs_position(self,  value:int)->None: pass
  @property
  def clip_tabs(self)->bool: pass
  @clip_tabs.setter
  def clip_tabs(self,  value:bool)->None: pass
  @property
  def tabs_visible(self)->bool: pass
  @tabs_visible.setter
  def tabs_visible(self,  value:bool)->None: pass
  @property
  def all_tabs_in_front(self)->bool: pass
  @all_tabs_in_front.setter
  def all_tabs_in_front(self,  value:bool)->None: pass
  @property
  def drag_to_rearrange_enabled(self)->bool: pass
  @drag_to_rearrange_enabled.setter
  def drag_to_rearrange_enabled(self,  value:bool)->None: pass
  @property
  def tabs_rearrange_group(self)->int: pass
  @tabs_rearrange_group.setter
  def tabs_rearrange_group(self,  value:int)->None: pass
  @property
  def use_hidden_tabs_for_min_size(self)->bool: pass
  @use_hidden_tabs_for_min_size.setter
  def use_hidden_tabs_for_min_size(self,  value:bool)->None: pass
  @property
  def tab_focus_mode(self)->int: pass
  @tab_focus_mode.setter
  def tab_focus_mode(self,  value:int)->None: pass
  @property
  def deselect_enabled(self)->bool: pass
  @deselect_enabled.setter
  def deselect_enabled(self,  value:bool)->None: pass
  def get_tab_count(self)->int: pass

  def set_current_tab(self, tab_idx:int)->None: pass

  def get_current_tab(self)->int: pass

  def get_previous_tab(self)->int: pass

  def select_previous_available(self)->bool: pass

  def select_next_available(self)->bool: pass

  def get_current_tab_control(self)->__control__.Control: pass

  def get_tab_bar(self)->__tabbar__.TabBar: pass

  def get_tab_control(self, tab_idx:int)->__control__.Control: pass

  def set_tab_alignment(self, alignment:int )->None: pass

  def get_tab_alignment(self)->int: pass

  def set_tabs_position(self, tabs_position:int )->None: pass

  def get_tabs_position(self)->int: pass

  def set_clip_tabs(self, clip_tabs:bool)->None: pass

  def get_clip_tabs(self)->bool: pass

  def set_tabs_visible(self, visible:bool)->None: pass

  def are_tabs_visible(self)->bool: pass

  def set_all_tabs_in_front(self, is_front:bool)->None: pass

  def is_all_tabs_in_front(self)->bool: pass

  def set_tab_title(self, tab_idx:int, title:str)->None: pass

  def get_tab_title(self, tab_idx:int)->str: pass

  def set_tab_tooltip(self, tab_idx:int, tooltip:str)->None: pass

  def get_tab_tooltip(self, tab_idx:int)->str: pass

  def set_tab_icon(self, tab_idx:int, icon:__texture2d__.Texture2D)->None: pass

  def get_tab_icon(self, tab_idx:int)->__texture2d__.Texture2D: pass

  def set_tab_icon_max_width(self, tab_idx:int, width:int)->None: pass

  def get_tab_icon_max_width(self, tab_idx:int)->int: pass

  def set_tab_disabled(self, tab_idx:int, disabled:bool)->None: pass

  def is_tab_disabled(self, tab_idx:int)->bool: pass

  def set_tab_hidden(self, tab_idx:int, hidden:bool)->None: pass

  def is_tab_hidden(self, tab_idx:int)->bool: pass

  def set_tab_metadata(self, tab_idx:int, metadata:object)->None: pass

  def get_tab_metadata(self, tab_idx:int)->object: pass

  def set_tab_button_icon(self, tab_idx:int, icon:__texture2d__.Texture2D)->None: pass

  def get_tab_button_icon(self, tab_idx:int)->__texture2d__.Texture2D: pass

  def get_tab_idx_at_point(self, point:__core__.Vector2)->int: pass

  def get_tab_idx_from_control(self, control:__control__.Control)->int: pass

  def set_popup(self, popup:__node__.Node)->None: pass

  def get_popup(self)->__popup__.Popup: pass

  def set_drag_to_rearrange_enabled(self, enabled:bool)->None: pass

  def get_drag_to_rearrange_enabled(self)->bool: pass

  def set_tabs_rearrange_group(self, group_id:int)->None: pass

  def get_tabs_rearrange_group(self)->int: pass

  def set_use_hidden_tabs_for_min_size(self, enabled:bool)->None: pass

  def get_use_hidden_tabs_for_min_size(self)->bool: pass

  def set_tab_focus_mode(self, focus_mode:int )->None: pass

  def get_tab_focus_mode(self)->int: pass

  def set_deselect_enabled(self, enabled:bool)->None: pass

  def get_deselect_enabled(self)->bool: pass


