from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.PhysicsDirectBodyState2D.PhysicsDirectBodyState2D as __physicsdirectbodystate2d__
import py4godot.classes.RigidBody2D.RigidBody2D as __rigidbody2d__
import py4godot.classes.PhysicsBody2D.PhysicsBody2D as __physicsbody2d__
import py4godot.classes.PhysicsMaterial.PhysicsMaterial as __physicsmaterial__


class RigidBody2D(__physicsbody2d__.PhysicsBody2D):
  body_shape_entered: BuiltinSignal
  body_shape_exited: BuiltinSignal
  body_entered: BuiltinSignal
  body_exited: BuiltinSignal
  sleeping_state_changed: BuiltinSignal

  @staticmethod
  def constructor()->RigidBody2D:pass



  @staticmethod
  def cast(other:__object__.Object)->RigidBody2D:pass


  @property
  def mass(self)->float: pass
  @mass.setter
  def mass(self,  value:float)->None: pass
  @property
  def physics_material_override(self)->__physicsmaterial__.PhysicsMaterial: pass
  @physics_material_override.setter
  def physics_material_override(self,  value:__physicsmaterial__.PhysicsMaterial)->None: pass
  @property
  def gravity_scale(self)->float: pass
  @gravity_scale.setter
  def gravity_scale(self,  value:float)->None: pass
  @property
  def center_of_mass_mode(self)->int: pass
  @center_of_mass_mode.setter
  def center_of_mass_mode(self,  value:int)->None: pass
  @property
  def center_of_mass(self)->__core__.Vector2: pass
  @center_of_mass.setter
  def center_of_mass(self,  value:__core__.Vector2)->None: pass
  @property
  def inertia(self)->float: pass
  @inertia.setter
  def inertia(self,  value:float)->None: pass
  @property
  def sleeping(self)->bool: pass
  @sleeping.setter
  def sleeping(self,  value:bool)->None: pass
  @property
  def can_sleep(self)->bool: pass
  @can_sleep.setter
  def can_sleep(self,  value:bool)->None: pass
  @property
  def lock_rotation(self)->bool: pass
  @lock_rotation.setter
  def lock_rotation(self,  value:bool)->None: pass
  @property
  def freeze(self)->bool: pass
  @freeze.setter
  def freeze(self,  value:bool)->None: pass
  @property
  def freeze_mode(self)->int: pass
  @freeze_mode.setter
  def freeze_mode(self,  value:int)->None: pass
  @property
  def custom_integrator(self)->bool: pass
  @custom_integrator.setter
  def custom_integrator(self,  value:bool)->None: pass
  @property
  def continuous_cd(self)->int: pass
  @continuous_cd.setter
  def continuous_cd(self,  value:int)->None: pass
  @property
  def contact_monitor(self)->bool: pass
  @contact_monitor.setter
  def contact_monitor(self,  value:bool)->None: pass
  @property
  def max_contacts_reported(self)->int: pass
  @max_contacts_reported.setter
  def max_contacts_reported(self,  value:int)->None: pass
  @property
  def linear_velocity(self)->__core__.Vector2: pass
  @linear_velocity.setter
  def linear_velocity(self,  value:__core__.Vector2)->None: pass
  @property
  def linear_damp_mode(self)->int: pass
  @linear_damp_mode.setter
  def linear_damp_mode(self,  value:int)->None: pass
  @property
  def linear_damp(self)->float: pass
  @linear_damp.setter
  def linear_damp(self,  value:float)->None: pass
  @property
  def angular_velocity(self)->float: pass
  @angular_velocity.setter
  def angular_velocity(self,  value:float)->None: pass
  @property
  def angular_damp_mode(self)->int: pass
  @angular_damp_mode.setter
  def angular_damp_mode(self,  value:int)->None: pass
  @property
  def angular_damp(self)->float: pass
  @angular_damp.setter
  def angular_damp(self,  value:float)->None: pass
  @property
  def constant_force(self)->__core__.Vector2: pass
  @constant_force.setter
  def constant_force(self,  value:__core__.Vector2)->None: pass
  @property
  def constant_torque(self)->float: pass
  @constant_torque.setter
  def constant_torque(self,  value:float)->None: pass
  def _integrate_forces(self, state:__physicsdirectbodystate2d__.PhysicsDirectBodyState2D)->None: pass

  def set_mass(self, mass:float)->None: pass

  def get_mass(self)->float: pass

  def get_inertia(self)->float: pass

  def set_inertia(self, inertia:float)->None: pass

  def set_center_of_mass_mode(self, mode:int )->None: pass

  def get_center_of_mass_mode(self)->int: pass

  def set_center_of_mass(self, center_of_mass:__core__.Vector2)->None: pass

  def get_center_of_mass(self)->__core__.Vector2: pass

  def set_physics_material_override(self, physics_material_override:__physicsmaterial__.PhysicsMaterial)->None: pass

  def get_physics_material_override(self)->__physicsmaterial__.PhysicsMaterial: pass

  def set_gravity_scale(self, gravity_scale:float)->None: pass

  def get_gravity_scale(self)->float: pass

  def set_linear_damp_mode(self, linear_damp_mode:int )->None: pass

  def get_linear_damp_mode(self)->int: pass

  def set_angular_damp_mode(self, angular_damp_mode:int )->None: pass

  def get_angular_damp_mode(self)->int: pass

  def set_linear_damp(self, linear_damp:float)->None: pass

  def get_linear_damp(self)->float: pass

  def set_angular_damp(self, angular_damp:float)->None: pass

  def get_angular_damp(self)->float: pass

  def set_linear_velocity(self, linear_velocity:__core__.Vector2)->None: pass

  def get_linear_velocity(self)->__core__.Vector2: pass

  def set_angular_velocity(self, angular_velocity:float)->None: pass

  def get_angular_velocity(self)->float: pass

  def set_max_contacts_reported(self, amount:int)->None: pass

  def get_max_contacts_reported(self)->int: pass

  def get_contact_count(self)->int: pass

  def set_use_custom_integrator(self, enable:bool)->None: pass

  def is_using_custom_integrator(self)->bool: pass

  def set_contact_monitor(self, enabled:bool)->None: pass

  def is_contact_monitor_enabled(self)->bool: pass

  def set_continuous_collision_detection_mode(self, mode:int )->None: pass

  def get_continuous_collision_detection_mode(self)->int: pass

  def set_axis_velocity(self, axis_velocity:__core__.Vector2)->None: pass

  def apply_central_impulse(self, impulse:__core__.Vector2= __core__.Vector2.new0())->None: pass

  def apply_impulse(self, impulse:__core__.Vector2, position:__core__.Vector2= __core__.Vector2.new0())->None: pass

  def apply_torque_impulse(self, torque:float)->None: pass

  def apply_central_force(self, force:__core__.Vector2)->None: pass

  def apply_force(self, force:__core__.Vector2, position:__core__.Vector2= __core__.Vector2.new0())->None: pass

  def apply_torque(self, torque:float)->None: pass

  def add_constant_central_force(self, force:__core__.Vector2)->None: pass

  def add_constant_force(self, force:__core__.Vector2, position:__core__.Vector2= __core__.Vector2.new0())->None: pass

  def add_constant_torque(self, torque:float)->None: pass

  def set_constant_force(self, force:__core__.Vector2)->None: pass

  def get_constant_force(self)->__core__.Vector2: pass

  def set_constant_torque(self, torque:float)->None: pass

  def get_constant_torque(self)->float: pass

  def set_sleeping(self, sleeping:bool)->None: pass

  def is_sleeping(self)->bool: pass

  def set_can_sleep(self, able_to_sleep:bool)->None: pass

  def is_able_to_sleep(self)->bool: pass

  def set_lock_rotation_enabled(self, lock_rotation:bool)->None: pass

  def is_lock_rotation_enabled(self)->bool: pass

  def set_freeze_enabled(self, freeze_mode:bool)->None: pass

  def is_freeze_enabled(self)->bool: pass

  def set_freeze_mode(self, freeze_mode:int )->None: pass

  def get_freeze_mode(self)->int: pass

  def get_colliding_bodies(self)->__core__.Array: pass


