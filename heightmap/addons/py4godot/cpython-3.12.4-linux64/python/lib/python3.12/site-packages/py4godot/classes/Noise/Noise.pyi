from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Resource.Resource as __resource__
import py4godot.classes.Image.Image as __image__


class Noise(__resource__.Resource):

  @staticmethod
  def constructor()->Noise:pass



  @staticmethod
  def cast(other:__object__.Object)->Noise:pass


  def get_noise_1d(self, x:float)->float: pass

  def get_noise_2d(self, x:float, y:float)->float: pass

  def get_noise_2dv(self, v:__core__.Vector2)->float: pass

  def get_noise_3d(self, x:float, y:float, z:float)->float: pass

  def get_noise_3dv(self, v:__core__.Vector3)->float: pass

  def get_image(self, width:int, height:int, invert:bool=False, in_3d_space:bool=False, normalize:bool=True)->__image__.Image: pass

  def get_seamless_image(self, width:int, height:int, invert:bool=False, in_3d_space:bool=False, skirt:float=0.1, normalize:bool=True)->__image__.Image: pass

  def get_image_3d(self, width:int, height:int, depth:int, invert:bool=False, normalize:bool=True)->__core__.Array: pass

  def get_seamless_image_3d(self, width:int, height:int, depth:int, invert:bool=False, skirt:float=0.1, normalize:bool=True)->__core__.Array: pass


