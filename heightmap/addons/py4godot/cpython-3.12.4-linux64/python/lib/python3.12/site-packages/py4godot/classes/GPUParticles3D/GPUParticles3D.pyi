from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Node.Node as __node__
import py4godot.classes.GPUParticles3D.GPUParticles3D as __gpuparticles3d__
import py4godot.classes.Material.Material as __material__
import py4godot.classes.ShaderMaterial.ShaderMaterial as __shadermaterial__
import py4godot.classes.Mesh.Mesh as __mesh__
import py4godot.classes.Skin.Skin as __skin__
import py4godot.classes.GeometryInstance3D.GeometryInstance3D as __geometryinstance3d__


class GPUParticles3D(__geometryinstance3d__.GeometryInstance3D):
  finished: BuiltinSignal

  @staticmethod
  def constructor()->GPUParticles3D:pass



  @staticmethod
  def cast(other:__object__.Object)->GPUParticles3D:pass


  @property
  def emitting(self)->bool: pass
  @emitting.setter
  def emitting(self,  value:bool)->None: pass
  @property
  def amount(self)->int: pass
  @amount.setter
  def amount(self,  value:int)->None: pass
  @property
  def amount_ratio(self)->float: pass
  @amount_ratio.setter
  def amount_ratio(self,  value:float)->None: pass
  @property
  def sub_emitter(self)->__core__.NodePath: pass
  @sub_emitter.setter
  def sub_emitter(self,  value:__core__.NodePath)->None: pass
  @property
  def lifetime(self)->float: pass
  @lifetime.setter
  def lifetime(self,  value:float)->None: pass
  @property
  def interp_to_end(self)->float: pass
  @interp_to_end.setter
  def interp_to_end(self,  value:float)->None: pass
  @property
  def one_shot(self)->bool: pass
  @one_shot.setter
  def one_shot(self,  value:bool)->None: pass
  @property
  def preprocess(self)->float: pass
  @preprocess.setter
  def preprocess(self,  value:float)->None: pass
  @property
  def speed_scale(self)->float: pass
  @speed_scale.setter
  def speed_scale(self,  value:float)->None: pass
  @property
  def explosiveness(self)->float: pass
  @explosiveness.setter
  def explosiveness(self,  value:float)->None: pass
  @property
  def randomness(self)->float: pass
  @randomness.setter
  def randomness(self,  value:float)->None: pass
  @property
  def fixed_fps(self)->int: pass
  @fixed_fps.setter
  def fixed_fps(self,  value:int)->None: pass
  @property
  def interpolate(self)->bool: pass
  @interpolate.setter
  def interpolate(self,  value:bool)->None: pass
  @property
  def fract_delta(self)->bool: pass
  @fract_delta.setter
  def fract_delta(self,  value:bool)->None: pass
  @property
  def collision_base_size(self)->float: pass
  @collision_base_size.setter
  def collision_base_size(self,  value:float)->None: pass
  @property
  def visibility_aabb(self)->__core__.AABB: pass
  @visibility_aabb.setter
  def visibility_aabb(self,  value:__core__.AABB)->None: pass
  @property
  def local_coords(self)->bool: pass
  @local_coords.setter
  def local_coords(self,  value:bool)->None: pass
  @property
  def draw_order(self)->int: pass
  @draw_order.setter
  def draw_order(self,  value:int)->None: pass
  @property
  def transform_align(self)->int: pass
  @transform_align.setter
  def transform_align(self,  value:int)->None: pass
  @property
  def trail_enabled(self)->bool: pass
  @trail_enabled.setter
  def trail_enabled(self,  value:bool)->None: pass
  @property
  def trail_lifetime(self)->float: pass
  @trail_lifetime.setter
  def trail_lifetime(self,  value:float)->None: pass
  @property
  def process_material(self)->ParticleProcessMaterial,ShaderMaterial: pass
  @process_material.setter
  def process_material(self,  value:__shadermaterial__.ShaderMaterial)->None: pass
  @property
  def draw_passes(self)->int: pass
  @draw_passes.setter
  def draw_passes(self,  value:int)->None: pass
  @property
  def draw_pass_1(self)->__mesh__.Mesh: pass
  @draw_pass_1.setter
  def draw_pass_1(self,  value:__mesh__.Mesh)->None: pass
  @property
  def draw_pass_2(self)->__mesh__.Mesh: pass
  @draw_pass_2.setter
  def draw_pass_2(self,  value:__mesh__.Mesh)->None: pass
  @property
  def draw_pass_3(self)->__mesh__.Mesh: pass
  @draw_pass_3.setter
  def draw_pass_3(self,  value:__mesh__.Mesh)->None: pass
  @property
  def draw_pass_4(self)->__mesh__.Mesh: pass
  @draw_pass_4.setter
  def draw_pass_4(self,  value:__mesh__.Mesh)->None: pass
  @property
  def draw_skin(self)->__skin__.Skin: pass
  @draw_skin.setter
  def draw_skin(self,  value:__skin__.Skin)->None: pass
  def set_emitting(self, emitting:bool)->None: pass

  def set_amount(self, amount:int)->None: pass

  def set_lifetime(self, secs:float)->None: pass

  def set_one_shot(self, enable:bool)->None: pass

  def set_pre_process_time(self, secs:float)->None: pass

  def set_explosiveness_ratio(self, ratio:float)->None: pass

  def set_randomness_ratio(self, ratio:float)->None: pass

  def set_visibility_aabb(self, aabb:__core__.AABB)->None: pass

  def set_use_local_coordinates(self, enable:bool)->None: pass

  def set_fixed_fps(self, fps:int)->None: pass

  def set_fractional_delta(self, enable:bool)->None: pass

  def set_interpolate(self, enable:bool)->None: pass

  def set_process_material(self, material:__material__.Material)->None: pass

  def set_speed_scale(self, scale:float)->None: pass

  def set_collision_base_size(self, size:float)->None: pass

  def set_interp_to_end(self, interp:float)->None: pass

  def is_emitting(self)->bool: pass

  def get_amount(self)->int: pass

  def get_lifetime(self)->float: pass

  def get_one_shot(self)->bool: pass

  def get_pre_process_time(self)->float: pass

  def get_explosiveness_ratio(self)->float: pass

  def get_randomness_ratio(self)->float: pass

  def get_visibility_aabb(self)->__core__.AABB: pass

  def get_use_local_coordinates(self)->bool: pass

  def get_fixed_fps(self)->int: pass

  def get_fractional_delta(self)->bool: pass

  def get_interpolate(self)->bool: pass

  def get_process_material(self)->__material__.Material: pass

  def get_speed_scale(self)->float: pass

  def get_collision_base_size(self)->float: pass

  def get_interp_to_end(self)->float: pass

  def set_draw_order(self, order:int )->None: pass

  def get_draw_order(self)->int: pass

  def set_draw_passes(self, passes:int)->None: pass

  def set_draw_pass_mesh(self, pass_:int, mesh:__mesh__.Mesh)->None: pass

  def get_draw_passes(self)->int: pass

  def get_draw_pass_mesh(self, pass_:int)->__mesh__.Mesh: pass

  def set_skin(self, skin:__skin__.Skin)->None: pass

  def get_skin(self)->__skin__.Skin: pass

  def restart(self)->None: pass

  def capture_aabb(self)->__core__.AABB: pass

  def set_sub_emitter(self, path:__core__.NodePath)->None: pass

  def get_sub_emitter(self)->__core__.NodePath: pass

  def emit_particle(self, xform:__core__.Transform3D, velocity:__core__.Vector3, color:__core__.Color, custom:__core__.Color, flags:int)->None: pass

  def set_trail_enabled(self, enabled:bool)->None: pass

  def set_trail_lifetime(self, secs:float)->None: pass

  def is_trail_enabled(self)->bool: pass

  def get_trail_lifetime(self)->float: pass

  def set_transform_align(self, align:int )->None: pass

  def get_transform_align(self)->int: pass

  def convert_from_particles(self, particles:__node__.Node)->None: pass

  def set_amount_ratio(self, ratio:float)->None: pass

  def get_amount_ratio(self)->float: pass


