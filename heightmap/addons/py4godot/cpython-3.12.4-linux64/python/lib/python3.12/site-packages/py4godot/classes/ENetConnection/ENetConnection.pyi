from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.ENetPacketPeer.ENetPacketPeer as __enetpacketpeer__
import py4godot.classes.RefCounted.RefCounted as __refcounted__
import py4godot.classes.TLSOptions.TLSOptions as __tlsoptions__
import py4godot.classes.ENetConnection.ENetConnection as __enetconnection__


class ENetConnection(__refcounted__.RefCounted):

  @staticmethod
  def constructor()->ENetConnection:pass



  @staticmethod
  def cast(other:__object__.Object)->ENetConnection:pass


  def create_host_bound(self, bind_address:str, bind_port:int, max_peers:int=32, max_channels:int=0, in_bandwidth:int=0, out_bandwidth:int=0)->int: pass

  def create_host(self, max_peers:int=32, max_channels:int=0, in_bandwidth:int=0, out_bandwidth:int=0)->int: pass

  def destroy(self)->None: pass

  def connect_to_host(self, address:str, port:int, channels:int=0, data:int=0)->__enetpacketpeer__.ENetPacketPeer: pass

  def service(self, timeout:int=0)->__core__.Array: pass

  def flush(self)->None: pass

  def bandwidth_limit(self, in_bandwidth:int=0, out_bandwidth:int=0)->None: pass

  def channel_limit(self, limit:int)->None: pass

  def broadcast(self, channel:int, packet:__core__.PackedByteArray, flags:int)->None: pass

  def compress(self, mode:int )->None: pass

  def dtls_server_setup(self, server_options:__tlsoptions__.TLSOptions)->int: pass

  def dtls_client_setup(self, hostname:str, client_options:__tlsoptions__.TLSOptions= __tlsoptions__.TLSOptions.constructor())->int: pass

  def refuse_new_connections(self, refuse:bool)->None: pass

  def pop_statistic(self, statistic:int )->float: pass

  def get_max_channels(self)->int: pass

  def get_local_port(self)->int: pass

  def get_peers(self)->__core__.Array: pass

  def socket_send(self, destination_address:str, destination_port:int, packet:__core__.PackedByteArray)->None: pass


