from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Object.Object as __object__


class ClassDB(__object__.Object):



  @staticmethod
  def cast(other:__object__.Object)->ClassDB:pass

  @staticmethod
  def get_instance()->ClassDB:pass

  def get_class_list(self)->__core__.PackedStringArray: pass

  def get_inheriters_from_class(self, class_:__core__.StringName)->__core__.PackedStringArray: pass

  def get_parent_class(self, class_:__core__.StringName)->__core__.StringName: pass

  def class_exists(self, class_:__core__.StringName)->bool: pass

  def is_parent_class(self, class_:__core__.StringName, inherits:__core__.StringName)->bool: pass

  def can_instantiate(self, class_:__core__.StringName)->bool: pass

  def instantiate(self, class_:__core__.StringName)->object: pass

  def class_has_signal(self, class_:__core__.StringName, signal:__core__.StringName)->bool: pass

  def class_get_signal(self, class_:__core__.StringName, signal:__core__.StringName)->__core__.Dictionary: pass

  def class_get_signal_list(self, class_:__core__.StringName, no_inheritance:bool=False)->__core__.Array: pass

  def class_get_property_list(self, class_:__core__.StringName, no_inheritance:bool=False)->__core__.Array: pass

  def class_get_property(self, object:__object__.Object, property:__core__.StringName)->object: pass

  def class_set_property(self, object:__object__.Object, property:__core__.StringName, value:object)->int: pass

  def class_get_property_default_value(self, class_:__core__.StringName, property:__core__.StringName)->object: pass

  def class_has_method(self, class_:__core__.StringName, method:__core__.StringName, no_inheritance:bool=False)->bool: pass

  def class_get_method_argument_count(self, class_:__core__.StringName, method:__core__.StringName, no_inheritance:bool=False)->int: pass

  def class_get_method_list(self, class_:__core__.StringName, no_inheritance:bool=False)->__core__.Array: pass

  def class_get_integer_constant_list(self, class_:__core__.StringName, no_inheritance:bool=False)->__core__.PackedStringArray: pass

  def class_has_integer_constant(self, class_:__core__.StringName, name:__core__.StringName)->bool: pass

  def class_get_integer_constant(self, class_:__core__.StringName, name:__core__.StringName)->int: pass

  def class_has_enum(self, class_:__core__.StringName, name:__core__.StringName, no_inheritance:bool=False)->bool: pass

  def class_get_enum_list(self, class_:__core__.StringName, no_inheritance:bool=False)->__core__.PackedStringArray: pass

  def class_get_enum_constants(self, class_:__core__.StringName, enum:__core__.StringName, no_inheritance:bool=False)->__core__.PackedStringArray: pass

  def class_get_integer_constant_enum(self, class_:__core__.StringName, name:__core__.StringName, no_inheritance:bool=False)->__core__.StringName: pass

  def is_class_enum_bitfield(self, class_:__core__.StringName, enum:__core__.StringName, no_inheritance:bool=False)->bool: pass

  def is_class_enabled(self, class_:__core__.StringName)->bool: pass


