from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.MultiplayerPeer.MultiplayerPeer as __multiplayerpeer__


class MultiplayerPeerExtension(__multiplayerpeer__.MultiplayerPeer):

  @staticmethod
  def constructor()->MultiplayerPeerExtension:pass



  @staticmethod
  def cast(other:__object__.Object)->MultiplayerPeerExtension:pass


  def _get_available_packet_count(self)->int: pass

  def _get_max_packet_size(self)->int: pass

  def _get_packet_script(self)->__core__.PackedByteArray: pass

  def _put_packet_script(self, p_buffer:__core__.PackedByteArray)->int: pass

  def _get_packet_channel(self)->int: pass

  def _get_packet_mode(self)->int: pass

  def _set_transfer_channel(self, p_channel:int)->None: pass

  def _get_transfer_channel(self)->int: pass

  def _set_transfer_mode(self, p_mode:int )->None: pass

  def _get_transfer_mode(self)->int: pass

  def _set_target_peer(self, p_peer:int)->None: pass

  def _get_packet_peer(self)->int: pass

  def _is_server(self)->bool: pass

  def _poll(self)->None: pass

  def _close(self)->None: pass

  def _disconnect_peer(self, p_peer:int, p_force:bool)->None: pass

  def _get_unique_id(self)->int: pass

  def _set_refuse_new_connections(self, p_enable:bool)->None: pass

  def _is_refusing_new_connections(self)->bool: pass

  def _is_server_relay_supported(self)->bool: pass

  def _get_connection_status(self)->int: pass


