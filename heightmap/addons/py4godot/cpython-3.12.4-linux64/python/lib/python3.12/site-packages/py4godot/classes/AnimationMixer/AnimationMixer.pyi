from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Node.Node as __node__
import py4godot.classes.AnimationLibrary.AnimationLibrary as __animationlibrary__
import py4godot.classes.Tween.Tween as __tween__
import py4godot.classes.AnimationMixer.AnimationMixer as __animationmixer__
import py4godot.classes.Animation.Animation as __animation__


class AnimationMixer(__node__.Node):
  animation_list_changed: BuiltinSignal
  animation_libraries_updated: BuiltinSignal
  animation_finished: BuiltinSignal
  animation_started: BuiltinSignal
  caches_cleared: BuiltinSignal
  mixer_applied: BuiltinSignal
  mixer_updated: BuiltinSignal

  @staticmethod
  def constructor()->AnimationMixer:pass



  @staticmethod
  def cast(other:__object__.Object)->AnimationMixer:pass


  @property
  def active(self)->bool: pass
  @active.setter
  def active(self,  value:bool)->None: pass
  @property
  def deterministic(self)->bool: pass
  @deterministic.setter
  def deterministic(self,  value:bool)->None: pass
  @property
  def reset_on_save(self)->bool: pass
  @reset_on_save.setter
  def reset_on_save(self,  value:bool)->None: pass
  @property
  def root_node(self)->__core__.NodePath: pass
  @root_node.setter
  def root_node(self,  value:__core__.NodePath)->None: pass
  @property
  def root_motion_track(self)->__core__.NodePath: pass
  @root_motion_track.setter
  def root_motion_track(self,  value:__core__.NodePath)->None: pass
  @property
  def audio_max_polyphony(self)->int: pass
  @audio_max_polyphony.setter
  def audio_max_polyphony(self,  value:int)->None: pass
  @property
  def callback_mode_process(self)->int: pass
  @callback_mode_process.setter
  def callback_mode_process(self,  value:int)->None: pass
  @property
  def callback_mode_method(self)->int: pass
  @callback_mode_method.setter
  def callback_mode_method(self,  value:int)->None: pass
  @property
  def callback_mode_discrete(self)->int: pass
  @callback_mode_discrete.setter
  def callback_mode_discrete(self,  value:int)->None: pass
  def _post_process_key_value(self, animation:__animation__.Animation, track:int, value:object, object_id:int, object_sub_idx:int)->object: pass

  def add_animation_library(self, name:__core__.StringName, library:__animationlibrary__.AnimationLibrary)->int: pass

  def remove_animation_library(self, name:__core__.StringName)->None: pass

  def rename_animation_library(self, name:__core__.StringName, newname:__core__.StringName)->None: pass

  def has_animation_library(self, name:__core__.StringName)->bool: pass

  def get_animation_library(self, name:__core__.StringName)->__animationlibrary__.AnimationLibrary: pass

  def get_animation_library_list(self)->__core__.Array: pass

  def has_animation(self, name:__core__.StringName)->bool: pass

  def get_animation(self, name:__core__.StringName)->__animation__.Animation: pass

  def get_animation_list(self)->__core__.PackedStringArray: pass

  def set_active(self, active:bool)->None: pass

  def is_active(self)->bool: pass

  def set_deterministic(self, deterministic:bool)->None: pass

  def is_deterministic(self)->bool: pass

  def set_root_node(self, path:__core__.NodePath)->None: pass

  def get_root_node(self)->__core__.NodePath: pass

  def set_callback_mode_process(self, mode:int )->None: pass

  def get_callback_mode_process(self)->int: pass

  def set_callback_mode_method(self, mode:int )->None: pass

  def get_callback_mode_method(self)->int: pass

  def set_callback_mode_discrete(self, mode:int )->None: pass

  def get_callback_mode_discrete(self)->int: pass

  def set_audio_max_polyphony(self, max_polyphony:int)->None: pass

  def get_audio_max_polyphony(self)->int: pass

  def set_root_motion_track(self, path:__core__.NodePath)->None: pass

  def get_root_motion_track(self)->__core__.NodePath: pass

  def get_root_motion_position(self)->__core__.Vector3: pass

  def get_root_motion_rotation(self)->__core__.Quaternion: pass

  def get_root_motion_scale(self)->__core__.Vector3: pass

  def get_root_motion_position_accumulator(self)->__core__.Vector3: pass

  def get_root_motion_rotation_accumulator(self)->__core__.Quaternion: pass

  def get_root_motion_scale_accumulator(self)->__core__.Vector3: pass

  def clear_caches(self)->None: pass

  def advance(self, delta:float)->None: pass

  def capture(self, name:__core__.StringName, duration:float, trans_type:int =0, ease_type:int =0)->None: pass

  def set_reset_on_save_enabled(self, enabled:bool)->None: pass

  def is_reset_on_save_enabled(self)->bool: pass

  def find_animation(self, animation:__animation__.Animation)->__core__.StringName: pass

  def find_animation_library(self, animation:__animation__.Animation)->__core__.StringName: pass


