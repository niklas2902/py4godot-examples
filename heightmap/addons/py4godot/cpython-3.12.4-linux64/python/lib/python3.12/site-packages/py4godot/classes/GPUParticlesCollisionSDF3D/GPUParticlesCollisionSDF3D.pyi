from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.GPUParticlesCollisionSDF3D.GPUParticlesCollisionSDF3D as __gpuparticlescollisionsdf3d__
import py4godot.classes.GPUParticlesCollision3D.GPUParticlesCollision3D as __gpuparticlescollision3d__
import py4godot.classes.Texture3D.Texture3D as __texture3d__


class GPUParticlesCollisionSDF3D(__gpuparticlescollision3d__.GPUParticlesCollision3D):

  @staticmethod
  def constructor()->GPUParticlesCollisionSDF3D:pass



  @staticmethod
  def cast(other:__object__.Object)->GPUParticlesCollisionSDF3D:pass


  @property
  def size(self)->__core__.Vector3: pass
  @size.setter
  def size(self,  value:__core__.Vector3)->None: pass
  @property
  def resolution(self)->int: pass
  @resolution.setter
  def resolution(self,  value:int)->None: pass
  @property
  def thickness(self)->float: pass
  @thickness.setter
  def thickness(self,  value:float)->None: pass
  @property
  def bake_mask(self)->int: pass
  @bake_mask.setter
  def bake_mask(self,  value:int)->None: pass
  @property
  def texture(self)->__texture3d__.Texture3D: pass
  @texture.setter
  def texture(self,  value:__texture3d__.Texture3D)->None: pass
  def set_size(self, size:__core__.Vector3)->None: pass

  def get_size(self)->__core__.Vector3: pass

  def set_resolution(self, resolution:int )->None: pass

  def get_resolution(self)->int: pass

  def set_texture(self, texture:__texture3d__.Texture3D)->None: pass

  def get_texture(self)->__texture3d__.Texture3D: pass

  def set_thickness(self, thickness:float)->None: pass

  def get_thickness(self)->float: pass

  def set_bake_mask(self, mask:int)->None: pass

  def get_bake_mask(self)->int: pass

  def set_bake_mask_value(self, layer_number:int, value:bool)->None: pass

  def get_bake_mask_value(self, layer_number:int)->bool: pass


