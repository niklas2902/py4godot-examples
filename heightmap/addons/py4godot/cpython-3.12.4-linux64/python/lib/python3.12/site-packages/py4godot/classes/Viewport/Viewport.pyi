from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.World3D.World3D as __world3d__
import py4godot.classes.Viewport.Viewport as __viewport__
import py4godot.classes.Node.Node as __node__
import py4godot.classes.Camera3D.Camera3D as __camera3d__
import py4godot.classes.Control.Control as __control__
import py4godot.classes.World2D.World2D as __world2d__
import py4godot.classes.Texture2D.Texture2D as __texture2d__
import py4godot.classes.ViewportTexture.ViewportTexture as __viewporttexture__
import py4godot.classes.Camera2D.Camera2D as __camera2d__
import py4godot.classes.InputEvent.InputEvent as __inputevent__


class Viewport(__node__.Node):
  size_changed: BuiltinSignal
  gui_focus_changed: BuiltinSignal

  @staticmethod
  def constructor()->Viewport:pass



  @staticmethod
  def cast(other:__object__.Object)->Viewport:pass


  @property
  def disable_3d(self)->bool: pass
  @disable_3d.setter
  def disable_3d(self,  value:bool)->None: pass
  @property
  def use_xr(self)->bool: pass
  @use_xr.setter
  def use_xr(self,  value:bool)->None: pass
  @property
  def own_world_3d(self)->bool: pass
  @own_world_3d.setter
  def own_world_3d(self,  value:bool)->None: pass
  @property
  def world_3d(self)->__world3d__.World3D: pass
  @world_3d.setter
  def world_3d(self,  value:__world3d__.World3D)->None: pass
  @property
  def world_2d(self)->__world2d__.World2D: pass
  @world_2d.setter
  def world_2d(self,  value:__world2d__.World2D)->None: pass
  @property
  def transparent_bg(self)->bool: pass
  @transparent_bg.setter
  def transparent_bg(self,  value:bool)->None: pass
  @property
  def handle_input_locally(self)->bool: pass
  @handle_input_locally.setter
  def handle_input_locally(self,  value:bool)->None: pass
  @property
  def snap_2d_transforms_to_pixel(self)->bool: pass
  @snap_2d_transforms_to_pixel.setter
  def snap_2d_transforms_to_pixel(self,  value:bool)->None: pass
  @property
  def snap_2d_vertices_to_pixel(self)->bool: pass
  @snap_2d_vertices_to_pixel.setter
  def snap_2d_vertices_to_pixel(self,  value:bool)->None: pass
  @property
  def msaa_2d(self)->int: pass
  @msaa_2d.setter
  def msaa_2d(self,  value:int)->None: pass
  @property
  def msaa_3d(self)->int: pass
  @msaa_3d.setter
  def msaa_3d(self,  value:int)->None: pass
  @property
  def screen_space_aa(self)->int: pass
  @screen_space_aa.setter
  def screen_space_aa(self,  value:int)->None: pass
  @property
  def use_taa(self)->bool: pass
  @use_taa.setter
  def use_taa(self,  value:bool)->None: pass
  @property
  def use_debanding(self)->bool: pass
  @use_debanding.setter
  def use_debanding(self,  value:bool)->None: pass
  @property
  def use_occlusion_culling(self)->bool: pass
  @use_occlusion_culling.setter
  def use_occlusion_culling(self,  value:bool)->None: pass
  @property
  def mesh_lod_threshold(self)->float: pass
  @mesh_lod_threshold.setter
  def mesh_lod_threshold(self,  value:float)->None: pass
  @property
  def debug_draw(self)->int: pass
  @debug_draw.setter
  def debug_draw(self,  value:int)->None: pass
  @property
  def use_hdr_2d(self)->bool: pass
  @use_hdr_2d.setter
  def use_hdr_2d(self,  value:bool)->None: pass
  @property
  def scaling_3d_mode(self)->int: pass
  @scaling_3d_mode.setter
  def scaling_3d_mode(self,  value:int)->None: pass
  @property
  def scaling_3d_scale(self)->float: pass
  @scaling_3d_scale.setter
  def scaling_3d_scale(self,  value:float)->None: pass
  @property
  def texture_mipmap_bias(self)->float: pass
  @texture_mipmap_bias.setter
  def texture_mipmap_bias(self,  value:float)->None: pass
  @property
  def fsr_sharpness(self)->float: pass
  @fsr_sharpness.setter
  def fsr_sharpness(self,  value:float)->None: pass
  @property
  def vrs_mode(self)->int: pass
  @vrs_mode.setter
  def vrs_mode(self,  value:int)->None: pass
  @property
  def vrs_update_mode(self)->int: pass
  @vrs_update_mode.setter
  def vrs_update_mode(self,  value:int)->None: pass
  @property
  def vrs_texture(self)->__texture2d__.Texture2D: pass
  @vrs_texture.setter
  def vrs_texture(self,  value:__texture2d__.Texture2D)->None: pass
  @property
  def canvas_item_default_texture_filter(self)->int: pass
  @canvas_item_default_texture_filter.setter
  def canvas_item_default_texture_filter(self,  value:int)->None: pass
  @property
  def canvas_item_default_texture_repeat(self)->int: pass
  @canvas_item_default_texture_repeat.setter
  def canvas_item_default_texture_repeat(self,  value:int)->None: pass
  @property
  def audio_listener_enable_2d(self)->bool: pass
  @audio_listener_enable_2d.setter
  def audio_listener_enable_2d(self,  value:bool)->None: pass
  @property
  def audio_listener_enable_3d(self)->bool: pass
  @audio_listener_enable_3d.setter
  def audio_listener_enable_3d(self,  value:bool)->None: pass
  @property
  def physics_object_picking(self)->bool: pass
  @physics_object_picking.setter
  def physics_object_picking(self,  value:bool)->None: pass
  @property
  def physics_object_picking_sort(self)->bool: pass
  @physics_object_picking_sort.setter
  def physics_object_picking_sort(self,  value:bool)->None: pass
  @property
  def physics_object_picking_first_only(self)->bool: pass
  @physics_object_picking_first_only.setter
  def physics_object_picking_first_only(self,  value:bool)->None: pass
  @property
  def gui_disable_input(self)->bool: pass
  @gui_disable_input.setter
  def gui_disable_input(self,  value:bool)->None: pass
  @property
  def gui_snap_controls_to_pixels(self)->bool: pass
  @gui_snap_controls_to_pixels.setter
  def gui_snap_controls_to_pixels(self,  value:bool)->None: pass
  @property
  def gui_embed_subwindows(self)->bool: pass
  @gui_embed_subwindows.setter
  def gui_embed_subwindows(self,  value:bool)->None: pass
  @property
  def sdf_oversize(self)->int: pass
  @sdf_oversize.setter
  def sdf_oversize(self,  value:int)->None: pass
  @property
  def sdf_scale(self)->int: pass
  @sdf_scale.setter
  def sdf_scale(self,  value:int)->None: pass
  @property
  def positional_shadow_atlas_size(self)->int: pass
  @positional_shadow_atlas_size.setter
  def positional_shadow_atlas_size(self,  value:int)->None: pass
  @property
  def positional_shadow_atlas_16_bits(self)->bool: pass
  @positional_shadow_atlas_16_bits.setter
  def positional_shadow_atlas_16_bits(self,  value:bool)->None: pass
  @property
  def positional_shadow_atlas_quad_0(self)->int: pass
  @positional_shadow_atlas_quad_0.setter
  def positional_shadow_atlas_quad_0(self,  value:int)->None: pass
  @property
  def positional_shadow_atlas_quad_1(self)->int: pass
  @positional_shadow_atlas_quad_1.setter
  def positional_shadow_atlas_quad_1(self,  value:int)->None: pass
  @property
  def positional_shadow_atlas_quad_2(self)->int: pass
  @positional_shadow_atlas_quad_2.setter
  def positional_shadow_atlas_quad_2(self,  value:int)->None: pass
  @property
  def positional_shadow_atlas_quad_3(self)->int: pass
  @positional_shadow_atlas_quad_3.setter
  def positional_shadow_atlas_quad_3(self,  value:int)->None: pass
  @property
  def canvas_transform(self)->__core__.Transform2D: pass
  @canvas_transform.setter
  def canvas_transform(self,  value:__core__.Transform2D)->None: pass
  @property
  def global_canvas_transform(self)->__core__.Transform2D: pass
  @global_canvas_transform.setter
  def global_canvas_transform(self,  value:__core__.Transform2D)->None: pass
  @property
  def canvas_cull_mask(self)->int: pass
  @canvas_cull_mask.setter
  def canvas_cull_mask(self,  value:int)->None: pass
  def set_world_2d(self, world_2d:__world2d__.World2D)->None: pass

  def get_world_2d(self)->__world2d__.World2D: pass

  def find_world_2d(self)->__world2d__.World2D: pass

  def set_canvas_transform(self, xform:__core__.Transform2D)->None: pass

  def get_canvas_transform(self)->__core__.Transform2D: pass

  def set_global_canvas_transform(self, xform:__core__.Transform2D)->None: pass

  def get_global_canvas_transform(self)->__core__.Transform2D: pass

  def get_final_transform(self)->__core__.Transform2D: pass

  def get_screen_transform(self)->__core__.Transform2D: pass

  def get_visible_rect(self)->__core__.Rect2: pass

  def set_transparent_background(self, enable:bool)->None: pass

  def has_transparent_background(self)->bool: pass

  def set_use_hdr_2d(self, enable:bool)->None: pass

  def is_using_hdr_2d(self)->bool: pass

  def set_msaa_2d(self, msaa:int )->None: pass

  def get_msaa_2d(self)->int: pass

  def set_msaa_3d(self, msaa:int )->None: pass

  def get_msaa_3d(self)->int: pass

  def set_screen_space_aa(self, screen_space_aa:int )->None: pass

  def get_screen_space_aa(self)->int: pass

  def set_use_taa(self, enable:bool)->None: pass

  def is_using_taa(self)->bool: pass

  def set_use_debanding(self, enable:bool)->None: pass

  def is_using_debanding(self)->bool: pass

  def set_use_occlusion_culling(self, enable:bool)->None: pass

  def is_using_occlusion_culling(self)->bool: pass

  def set_debug_draw(self, debug_draw:int )->None: pass

  def get_debug_draw(self)->int: pass

  def get_render_info(self, type:int , info:int )->int: pass

  def get_texture(self)->__viewporttexture__.ViewportTexture: pass

  def set_physics_object_picking(self, enable:bool)->None: pass

  def get_physics_object_picking(self)->bool: pass

  def set_physics_object_picking_sort(self, enable:bool)->None: pass

  def get_physics_object_picking_sort(self)->bool: pass

  def set_physics_object_picking_first_only(self, enable:bool)->None: pass

  def get_physics_object_picking_first_only(self)->bool: pass

  def get_viewport_rid(self)->__core__.RID: pass

  def push_text_input(self, text:str)->None: pass

  def push_input(self, event:__inputevent__.InputEvent, in_local_coords:bool=False)->None: pass

  def push_unhandled_input(self, event:__inputevent__.InputEvent, in_local_coords:bool=False)->None: pass

  def get_mouse_position(self)->__core__.Vector2: pass

  def warp_mouse(self, position:__core__.Vector2)->None: pass

  def update_mouse_cursor_state(self)->None: pass

  def gui_get_drag_data(self)->object: pass

  def gui_is_dragging(self)->bool: pass

  def gui_is_drag_successful(self)->bool: pass

  def gui_release_focus(self)->None: pass

  def gui_get_focus_owner(self)->__control__.Control: pass

  def gui_get_hovered_control(self)->__control__.Control: pass

  def set_disable_input(self, disable:bool)->None: pass

  def is_input_disabled(self)->bool: pass

  def set_positional_shadow_atlas_size(self, size:int)->None: pass

  def get_positional_shadow_atlas_size(self)->int: pass

  def set_positional_shadow_atlas_16_bits(self, enable:bool)->None: pass

  def get_positional_shadow_atlas_16_bits(self)->bool: pass

  def set_snap_controls_to_pixels(self, enabled:bool)->None: pass

  def is_snap_controls_to_pixels_enabled(self)->bool: pass

  def set_snap_2d_transforms_to_pixel(self, enabled:bool)->None: pass

  def is_snap_2d_transforms_to_pixel_enabled(self)->bool: pass

  def set_snap_2d_vertices_to_pixel(self, enabled:bool)->None: pass

  def is_snap_2d_vertices_to_pixel_enabled(self)->bool: pass

  def set_positional_shadow_atlas_quadrant_subdiv(self, quadrant:int, subdiv:int )->None: pass

  def get_positional_shadow_atlas_quadrant_subdiv(self, quadrant:int)->int: pass

  def set_input_as_handled(self)->None: pass

  def is_input_handled(self)->bool: pass

  def set_handle_input_locally(self, enable:bool)->None: pass

  def is_handling_input_locally(self)->bool: pass

  def set_default_canvas_item_texture_filter(self, mode:int )->None: pass

  def get_default_canvas_item_texture_filter(self)->int: pass

  def set_embedding_subwindows(self, enable:bool)->None: pass

  def is_embedding_subwindows(self)->bool: pass

  def get_embedded_subwindows(self)->__core__.Array: pass

  def set_canvas_cull_mask(self, mask:int)->None: pass

  def get_canvas_cull_mask(self)->int: pass

  def set_canvas_cull_mask_bit(self, layer:int, enable:bool)->None: pass

  def get_canvas_cull_mask_bit(self, layer:int)->bool: pass

  def set_default_canvas_item_texture_repeat(self, mode:int )->None: pass

  def get_default_canvas_item_texture_repeat(self)->int: pass

  def set_sdf_oversize(self, oversize:int )->None: pass

  def get_sdf_oversize(self)->int: pass

  def set_sdf_scale(self, scale:int )->None: pass

  def get_sdf_scale(self)->int: pass

  def set_mesh_lod_threshold(self, pixels:float)->None: pass

  def get_mesh_lod_threshold(self)->float: pass

  def set_as_audio_listener_2d(self, enable:bool)->None: pass

  def is_audio_listener_2d(self)->bool: pass

  def get_camera_2d(self)->__camera2d__.Camera2D: pass

  def set_world_3d(self, world_3d:__world3d__.World3D)->None: pass

  def get_world_3d(self)->__world3d__.World3D: pass

  def find_world_3d(self)->__world3d__.World3D: pass

  def set_use_own_world_3d(self, enable:bool)->None: pass

  def is_using_own_world_3d(self)->bool: pass

  def get_camera_3d(self)->__camera3d__.Camera3D: pass

  def set_as_audio_listener_3d(self, enable:bool)->None: pass

  def is_audio_listener_3d(self)->bool: pass

  def set_disable_3d(self, disable:bool)->None: pass

  def is_3d_disabled(self)->bool: pass

  def set_use_xr(self, use:bool)->None: pass

  def is_using_xr(self)->bool: pass

  def set_scaling_3d_mode(self, scaling_3d_mode:int )->None: pass

  def get_scaling_3d_mode(self)->int: pass

  def set_scaling_3d_scale(self, scale:float)->None: pass

  def get_scaling_3d_scale(self)->float: pass

  def set_fsr_sharpness(self, fsr_sharpness:float)->None: pass

  def get_fsr_sharpness(self)->float: pass

  def set_texture_mipmap_bias(self, texture_mipmap_bias:float)->None: pass

  def get_texture_mipmap_bias(self)->float: pass

  def set_vrs_mode(self, mode:int )->None: pass

  def get_vrs_mode(self)->int: pass

  def set_vrs_update_mode(self, mode:int )->None: pass

  def get_vrs_update_mode(self)->int: pass

  def set_vrs_texture(self, texture:__texture2d__.Texture2D)->None: pass

  def get_vrs_texture(self)->__texture2d__.Texture2D: pass


