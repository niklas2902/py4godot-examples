from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Object.Object as __object__
import py4godot.classes.RenderingDevice.RenderingDevice as __renderingdevice__
import py4godot.classes.RenderingServer.RenderingServer as __renderingserver__
import py4godot.classes.Image.Image as __image__


class RenderingServer(__object__.Object):
  frame_pre_draw: BuiltinSignal
  frame_post_draw: BuiltinSignal



  @staticmethod
  def cast(other:__object__.Object)->RenderingServer:pass

  @staticmethod
  def get_instance()->RenderingServer:pass

  @property
  def render_loop_enabled(self)->bool: pass
  @render_loop_enabled.setter
  def render_loop_enabled(self,  value:bool)->None: pass
  def texture_2d_create(self, image:__image__.Image)->__core__.RID: pass

  def texture_2d_layered_create(self, layers:__core__.Array, layered_type:int )->__core__.RID: pass

  def texture_3d_create(self, format:int , width:int, height:int, depth:int, mipmaps:bool, data:__core__.Array)->__core__.RID: pass

  def texture_proxy_create(self, base:__core__.RID)->__core__.RID: pass

  def texture_2d_update(self, texture:__core__.RID, image:__image__.Image, layer:int)->None: pass

  def texture_3d_update(self, texture:__core__.RID, data:__core__.Array)->None: pass

  def texture_proxy_update(self, texture:__core__.RID, proxy_to:__core__.RID)->None: pass

  def texture_2d_placeholder_create(self)->__core__.RID: pass

  def texture_2d_layered_placeholder_create(self, layered_type:int )->__core__.RID: pass

  def texture_3d_placeholder_create(self)->__core__.RID: pass

  def texture_2d_get(self, texture:__core__.RID)->__image__.Image: pass

  def texture_2d_layer_get(self, texture:__core__.RID, layer:int)->__image__.Image: pass

  def texture_3d_get(self, texture:__core__.RID)->__core__.Array: pass

  def texture_replace(self, texture:__core__.RID, by_texture:__core__.RID)->None: pass

  def texture_set_size_override(self, texture:__core__.RID, width:int, height:int)->None: pass

  def texture_set_path(self, texture:__core__.RID, path:str)->None: pass

  def texture_get_path(self, texture:__core__.RID)->str: pass

  def texture_get_format(self, texture:__core__.RID)->int: pass

  def texture_set_force_redraw_if_visible(self, texture:__core__.RID, enable:bool)->None: pass

  def texture_rd_create(self, rd_texture:__core__.RID, layer_type:int =0)->__core__.RID: pass

  def texture_get_rd_texture(self, texture:__core__.RID, srgb:bool=False)->__core__.RID: pass

  def texture_get_native_handle(self, texture:__core__.RID, srgb:bool=False)->int: pass

  def shader_create(self)->__core__.RID: pass

  def shader_set_code(self, shader:__core__.RID, code:str)->None: pass

  def shader_set_path_hint(self, shader:__core__.RID, path:str)->None: pass

  def shader_get_code(self, shader:__core__.RID)->str: pass

  def get_shader_parameter_list(self, shader:__core__.RID)->__core__.Array: pass

  def shader_get_parameter_default(self, shader:__core__.RID, name:__core__.StringName)->object: pass

  def shader_set_default_texture_parameter(self, shader:__core__.RID, name:__core__.StringName, texture:__core__.RID, index:int=0)->None: pass

  def shader_get_default_texture_parameter(self, shader:__core__.RID, name:__core__.StringName, index:int=0)->__core__.RID: pass

  def material_create(self)->__core__.RID: pass

  def material_set_shader(self, shader_material:__core__.RID, shader:__core__.RID)->None: pass

  def material_set_param(self, material:__core__.RID, parameter:__core__.StringName, value:object)->None: pass

  def material_get_param(self, material:__core__.RID, parameter:__core__.StringName)->object: pass

  def material_set_render_priority(self, material:__core__.RID, priority:int)->None: pass

  def material_set_next_pass(self, material:__core__.RID, next_material:__core__.RID)->None: pass

  def mesh_create_from_surfaces(self, surfaces:__core__.Array, blend_shape_count:int=0)->__core__.RID: pass

  def mesh_create(self)->__core__.RID: pass

  def mesh_surface_get_format_offset(self, format:int, vertex_count:int, array_index:int)->int: pass

  def mesh_surface_get_format_vertex_stride(self, format:int, vertex_count:int)->int: pass

  def mesh_surface_get_format_normal_tangent_stride(self, format:int, vertex_count:int)->int: pass

  def mesh_surface_get_format_attribute_stride(self, format:int, vertex_count:int)->int: pass

  def mesh_surface_get_format_skin_stride(self, format:int, vertex_count:int)->int: pass

  def mesh_add_surface(self, mesh:__core__.RID, surface:__core__.Dictionary)->None: pass

  def mesh_add_surface_from_arrays(self, mesh:__core__.RID, primitive:int , arrays:__core__.Array, blend_shapes:__core__.Array= __core__.Array.new0(), lods:__core__.Dictionary= __core__.Dictionary.new0(), compress_format:int=0)->None: pass

  def mesh_get_blend_shape_count(self, mesh:__core__.RID)->int: pass

  def mesh_set_blend_shape_mode(self, mesh:__core__.RID, mode:int )->None: pass

  def mesh_get_blend_shape_mode(self, mesh:__core__.RID)->int: pass

  def mesh_surface_set_material(self, mesh:__core__.RID, surface:int, material:__core__.RID)->None: pass

  def mesh_surface_get_material(self, mesh:__core__.RID, surface:int)->__core__.RID: pass

  def mesh_get_surface(self, mesh:__core__.RID, surface:int)->__core__.Dictionary: pass

  def mesh_surface_get_arrays(self, mesh:__core__.RID, surface:int)->__core__.Array: pass

  def mesh_surface_get_blend_shape_arrays(self, mesh:__core__.RID, surface:int)->__core__.Array: pass

  def mesh_get_surface_count(self, mesh:__core__.RID)->int: pass

  def mesh_set_custom_aabb(self, mesh:__core__.RID, aabb:__core__.AABB)->None: pass

  def mesh_get_custom_aabb(self, mesh:__core__.RID)->__core__.AABB: pass

  def mesh_clear(self, mesh:__core__.RID)->None: pass

  def mesh_surface_update_vertex_region(self, mesh:__core__.RID, surface:int, offset:int, data:__core__.PackedByteArray)->None: pass

  def mesh_surface_update_attribute_region(self, mesh:__core__.RID, surface:int, offset:int, data:__core__.PackedByteArray)->None: pass

  def mesh_surface_update_skin_region(self, mesh:__core__.RID, surface:int, offset:int, data:__core__.PackedByteArray)->None: pass

  def mesh_set_shadow_mesh(self, mesh:__core__.RID, shadow_mesh:__core__.RID)->None: pass

  def multimesh_create(self)->__core__.RID: pass

  def multimesh_allocate_data(self, multimesh:__core__.RID, instances:int, transform_format:int , color_format:bool=False, custom_data_format:bool=False)->None: pass

  def multimesh_get_instance_count(self, multimesh:__core__.RID)->int: pass

  def multimesh_set_mesh(self, multimesh:__core__.RID, mesh:__core__.RID)->None: pass

  def multimesh_instance_set_transform(self, multimesh:__core__.RID, index:int, transform:__core__.Transform3D)->None: pass

  def multimesh_instance_set_transform_2d(self, multimesh:__core__.RID, index:int, transform:__core__.Transform2D)->None: pass

  def multimesh_instance_set_color(self, multimesh:__core__.RID, index:int, color:__core__.Color)->None: pass

  def multimesh_instance_set_custom_data(self, multimesh:__core__.RID, index:int, custom_data:__core__.Color)->None: pass

  def multimesh_get_mesh(self, multimesh:__core__.RID)->__core__.RID: pass

  def multimesh_get_aabb(self, multimesh:__core__.RID)->__core__.AABB: pass

  def multimesh_set_custom_aabb(self, multimesh:__core__.RID, aabb:__core__.AABB)->None: pass

  def multimesh_get_custom_aabb(self, multimesh:__core__.RID)->__core__.AABB: pass

  def multimesh_instance_get_transform(self, multimesh:__core__.RID, index:int)->__core__.Transform3D: pass

  def multimesh_instance_get_transform_2d(self, multimesh:__core__.RID, index:int)->__core__.Transform2D: pass

  def multimesh_instance_get_color(self, multimesh:__core__.RID, index:int)->__core__.Color: pass

  def multimesh_instance_get_custom_data(self, multimesh:__core__.RID, index:int)->__core__.Color: pass

  def multimesh_set_visible_instances(self, multimesh:__core__.RID, visible:int)->None: pass

  def multimesh_get_visible_instances(self, multimesh:__core__.RID)->int: pass

  def multimesh_set_buffer(self, multimesh:__core__.RID, buffer:__core__.PackedFloat32Array)->None: pass

  def multimesh_get_buffer(self, multimesh:__core__.RID)->__core__.PackedFloat32Array: pass

  def skeleton_create(self)->__core__.RID: pass

  def skeleton_allocate_data(self, skeleton:__core__.RID, bones:int, is_2d_skeleton:bool=False)->None: pass

  def skeleton_get_bone_count(self, skeleton:__core__.RID)->int: pass

  def skeleton_bone_set_transform(self, skeleton:__core__.RID, bone:int, transform:__core__.Transform3D)->None: pass

  def skeleton_bone_get_transform(self, skeleton:__core__.RID, bone:int)->__core__.Transform3D: pass

  def skeleton_bone_set_transform_2d(self, skeleton:__core__.RID, bone:int, transform:__core__.Transform2D)->None: pass

  def skeleton_bone_get_transform_2d(self, skeleton:__core__.RID, bone:int)->__core__.Transform2D: pass

  def skeleton_set_base_transform_2d(self, skeleton:__core__.RID, base_transform:__core__.Transform2D)->None: pass

  def directional_light_create(self)->__core__.RID: pass

  def omni_light_create(self)->__core__.RID: pass

  def spot_light_create(self)->__core__.RID: pass

  def light_set_color(self, light:__core__.RID, color:__core__.Color)->None: pass

  def light_set_param(self, light:__core__.RID, param:int , value:float)->None: pass

  def light_set_shadow(self, light:__core__.RID, enabled:bool)->None: pass

  def light_set_projector(self, light:__core__.RID, texture:__core__.RID)->None: pass

  def light_set_negative(self, light:__core__.RID, enable:bool)->None: pass

  def light_set_cull_mask(self, light:__core__.RID, mask:int)->None: pass

  def light_set_distance_fade(self, decal:__core__.RID, enabled:bool, begin:float, shadow:float, length:float)->None: pass

  def light_set_reverse_cull_face_mode(self, light:__core__.RID, enabled:bool)->None: pass

  def light_set_bake_mode(self, light:__core__.RID, bake_mode:int )->None: pass

  def light_set_max_sdfgi_cascade(self, light:__core__.RID, cascade:int)->None: pass

  def light_omni_set_shadow_mode(self, light:__core__.RID, mode:int )->None: pass

  def light_directional_set_shadow_mode(self, light:__core__.RID, mode:int )->None: pass

  def light_directional_set_blend_splits(self, light:__core__.RID, enable:bool)->None: pass

  def light_directional_set_sky_mode(self, light:__core__.RID, mode:int )->None: pass

  def light_projectors_set_filter(self, filter:int )->None: pass

  def positional_soft_shadow_filter_set_quality(self, quality:int )->None: pass

  def directional_soft_shadow_filter_set_quality(self, quality:int )->None: pass

  def directional_shadow_atlas_set_size(self, size:int, is_16bits:bool)->None: pass

  def reflection_probe_create(self)->__core__.RID: pass

  def reflection_probe_set_update_mode(self, probe:__core__.RID, mode:int )->None: pass

  def reflection_probe_set_intensity(self, probe:__core__.RID, intensity:float)->None: pass

  def reflection_probe_set_ambient_mode(self, probe:__core__.RID, mode:int )->None: pass

  def reflection_probe_set_ambient_color(self, probe:__core__.RID, color:__core__.Color)->None: pass

  def reflection_probe_set_ambient_energy(self, probe:__core__.RID, energy:float)->None: pass

  def reflection_probe_set_max_distance(self, probe:__core__.RID, distance:float)->None: pass

  def reflection_probe_set_size(self, probe:__core__.RID, size:__core__.Vector3)->None: pass

  def reflection_probe_set_origin_offset(self, probe:__core__.RID, offset:__core__.Vector3)->None: pass

  def reflection_probe_set_as_interior(self, probe:__core__.RID, enable:bool)->None: pass

  def reflection_probe_set_enable_box_projection(self, probe:__core__.RID, enable:bool)->None: pass

  def reflection_probe_set_enable_shadows(self, probe:__core__.RID, enable:bool)->None: pass

  def reflection_probe_set_cull_mask(self, probe:__core__.RID, layers:int)->None: pass

  def reflection_probe_set_reflection_mask(self, probe:__core__.RID, layers:int)->None: pass

  def reflection_probe_set_resolution(self, probe:__core__.RID, resolution:int)->None: pass

  def reflection_probe_set_mesh_lod_threshold(self, probe:__core__.RID, pixels:float)->None: pass

  def decal_create(self)->__core__.RID: pass

  def decal_set_size(self, decal:__core__.RID, size:__core__.Vector3)->None: pass

  def decal_set_texture(self, decal:__core__.RID, type:int , texture:__core__.RID)->None: pass

  def decal_set_emission_energy(self, decal:__core__.RID, energy:float)->None: pass

  def decal_set_albedo_mix(self, decal:__core__.RID, albedo_mix:float)->None: pass

  def decal_set_modulate(self, decal:__core__.RID, color:__core__.Color)->None: pass

  def decal_set_cull_mask(self, decal:__core__.RID, mask:int)->None: pass

  def decal_set_distance_fade(self, decal:__core__.RID, enabled:bool, begin:float, length:float)->None: pass

  def decal_set_fade(self, decal:__core__.RID, above:float, below:float)->None: pass

  def decal_set_normal_fade(self, decal:__core__.RID, fade:float)->None: pass

  def decals_set_filter(self, filter:int )->None: pass

  def gi_set_use_half_resolution(self, half_resolution:bool)->None: pass

  def voxel_gi_create(self)->__core__.RID: pass

  def voxel_gi_allocate_data(self, voxel_gi:__core__.RID, to_cell_xform:__core__.Transform3D, aabb:__core__.AABB, octree_size:__core__.Vector3i, octree_cells:__core__.PackedByteArray, data_cells:__core__.PackedByteArray, distance_field:__core__.PackedByteArray, level_counts:__core__.PackedInt32Array)->None: pass

  def voxel_gi_get_octree_size(self, voxel_gi:__core__.RID)->__core__.Vector3i: pass

  def voxel_gi_get_octree_cells(self, voxel_gi:__core__.RID)->__core__.PackedByteArray: pass

  def voxel_gi_get_data_cells(self, voxel_gi:__core__.RID)->__core__.PackedByteArray: pass

  def voxel_gi_get_distance_field(self, voxel_gi:__core__.RID)->__core__.PackedByteArray: pass

  def voxel_gi_get_level_counts(self, voxel_gi:__core__.RID)->__core__.PackedInt32Array: pass

  def voxel_gi_get_to_cell_xform(self, voxel_gi:__core__.RID)->__core__.Transform3D: pass

  def voxel_gi_set_dynamic_range(self, voxel_gi:__core__.RID, range:float)->None: pass

  def voxel_gi_set_propagation(self, voxel_gi:__core__.RID, amount:float)->None: pass

  def voxel_gi_set_energy(self, voxel_gi:__core__.RID, energy:float)->None: pass

  def voxel_gi_set_baked_exposure_normalization(self, voxel_gi:__core__.RID, baked_exposure:float)->None: pass

  def voxel_gi_set_bias(self, voxel_gi:__core__.RID, bias:float)->None: pass

  def voxel_gi_set_normal_bias(self, voxel_gi:__core__.RID, bias:float)->None: pass

  def voxel_gi_set_interior(self, voxel_gi:__core__.RID, enable:bool)->None: pass

  def voxel_gi_set_use_two_bounces(self, voxel_gi:__core__.RID, enable:bool)->None: pass

  def voxel_gi_set_quality(self, quality:int )->None: pass

  def lightmap_create(self)->__core__.RID: pass

  def lightmap_set_textures(self, lightmap:__core__.RID, light:__core__.RID, uses_sh:bool)->None: pass

  def lightmap_set_probe_bounds(self, lightmap:__core__.RID, bounds:__core__.AABB)->None: pass

  def lightmap_set_probe_interior(self, lightmap:__core__.RID, interior:bool)->None: pass

  def lightmap_set_probe_capture_data(self, lightmap:__core__.RID, points:__core__.PackedVector3Array, point_sh:__core__.PackedColorArray, tetrahedra:__core__.PackedInt32Array, bsp_tree:__core__.PackedInt32Array)->None: pass

  def lightmap_get_probe_capture_points(self, lightmap:__core__.RID)->__core__.PackedVector3Array: pass

  def lightmap_get_probe_capture_sh(self, lightmap:__core__.RID)->__core__.PackedColorArray: pass

  def lightmap_get_probe_capture_tetrahedra(self, lightmap:__core__.RID)->__core__.PackedInt32Array: pass

  def lightmap_get_probe_capture_bsp_tree(self, lightmap:__core__.RID)->__core__.PackedInt32Array: pass

  def lightmap_set_baked_exposure_normalization(self, lightmap:__core__.RID, baked_exposure:float)->None: pass

  def lightmap_set_probe_capture_update_speed(self, speed:float)->None: pass

  def particles_create(self)->__core__.RID: pass

  def particles_set_mode(self, particles:__core__.RID, mode:int )->None: pass

  def particles_set_emitting(self, particles:__core__.RID, emitting:bool)->None: pass

  def particles_get_emitting(self, particles:__core__.RID)->bool: pass

  def particles_set_amount(self, particles:__core__.RID, amount:int)->None: pass

  def particles_set_amount_ratio(self, particles:__core__.RID, ratio:float)->None: pass

  def particles_set_lifetime(self, particles:__core__.RID, lifetime:float)->None: pass

  def particles_set_one_shot(self, particles:__core__.RID, one_shot:bool)->None: pass

  def particles_set_pre_process_time(self, particles:__core__.RID, time:float)->None: pass

  def particles_set_explosiveness_ratio(self, particles:__core__.RID, ratio:float)->None: pass

  def particles_set_randomness_ratio(self, particles:__core__.RID, ratio:float)->None: pass

  def particles_set_interp_to_end(self, particles:__core__.RID, factor:float)->None: pass

  def particles_set_emitter_velocity(self, particles:__core__.RID, velocity:__core__.Vector3)->None: pass

  def particles_set_custom_aabb(self, particles:__core__.RID, aabb:__core__.AABB)->None: pass

  def particles_set_speed_scale(self, particles:__core__.RID, scale:float)->None: pass

  def particles_set_use_local_coordinates(self, particles:__core__.RID, enable:bool)->None: pass

  def particles_set_process_material(self, particles:__core__.RID, material:__core__.RID)->None: pass

  def particles_set_fixed_fps(self, particles:__core__.RID, fps:int)->None: pass

  def particles_set_interpolate(self, particles:__core__.RID, enable:bool)->None: pass

  def particles_set_fractional_delta(self, particles:__core__.RID, enable:bool)->None: pass

  def particles_set_collision_base_size(self, particles:__core__.RID, size:float)->None: pass

  def particles_set_transform_align(self, particles:__core__.RID, align:int )->None: pass

  def particles_set_trails(self, particles:__core__.RID, enable:bool, length_sec:float)->None: pass

  def particles_set_trail_bind_poses(self, particles:__core__.RID, bind_poses:__core__.Array)->None: pass

  def particles_is_inactive(self, particles:__core__.RID)->bool: pass

  def particles_request_process(self, particles:__core__.RID)->None: pass

  def particles_restart(self, particles:__core__.RID)->None: pass

  def particles_set_subemitter(self, particles:__core__.RID, subemitter_particles:__core__.RID)->None: pass

  def particles_emit(self, particles:__core__.RID, transform:__core__.Transform3D, velocity:__core__.Vector3, color:__core__.Color, custom:__core__.Color, emit_flags:int)->None: pass

  def particles_set_draw_order(self, particles:__core__.RID, order:int )->None: pass

  def particles_set_draw_passes(self, particles:__core__.RID, count:int)->None: pass

  def particles_set_draw_pass_mesh(self, particles:__core__.RID, pass_:int, mesh:__core__.RID)->None: pass

  def particles_get_current_aabb(self, particles:__core__.RID)->__core__.AABB: pass

  def particles_set_emission_transform(self, particles:__core__.RID, transform:__core__.Transform3D)->None: pass

  def particles_collision_create(self)->__core__.RID: pass

  def particles_collision_set_collision_type(self, particles_collision:__core__.RID, type:int )->None: pass

  def particles_collision_set_cull_mask(self, particles_collision:__core__.RID, mask:int)->None: pass

  def particles_collision_set_sphere_radius(self, particles_collision:__core__.RID, radius:float)->None: pass

  def particles_collision_set_box_extents(self, particles_collision:__core__.RID, extents:__core__.Vector3)->None: pass

  def particles_collision_set_attractor_strength(self, particles_collision:__core__.RID, strength:float)->None: pass

  def particles_collision_set_attractor_directionality(self, particles_collision:__core__.RID, amount:float)->None: pass

  def particles_collision_set_attractor_attenuation(self, particles_collision:__core__.RID, curve:float)->None: pass

  def particles_collision_set_field_texture(self, particles_collision:__core__.RID, texture:__core__.RID)->None: pass

  def particles_collision_height_field_update(self, particles_collision:__core__.RID)->None: pass

  def particles_collision_set_height_field_resolution(self, particles_collision:__core__.RID, resolution:int )->None: pass

  def fog_volume_create(self)->__core__.RID: pass

  def fog_volume_set_shape(self, fog_volume:__core__.RID, shape:int )->None: pass

  def fog_volume_set_size(self, fog_volume:__core__.RID, size:__core__.Vector3)->None: pass

  def fog_volume_set_material(self, fog_volume:__core__.RID, material:__core__.RID)->None: pass

  def visibility_notifier_create(self)->__core__.RID: pass

  def visibility_notifier_set_aabb(self, notifier:__core__.RID, aabb:__core__.AABB)->None: pass

  def visibility_notifier_set_callbacks(self, notifier:__core__.RID, enter_callable:__core__.Callable, exit_callable:__core__.Callable)->None: pass

  def occluder_create(self)->__core__.RID: pass

  def occluder_set_mesh(self, occluder:__core__.RID, vertices:__core__.PackedVector3Array, indices:__core__.PackedInt32Array)->None: pass

  def camera_create(self)->__core__.RID: pass

  def camera_set_perspective(self, camera:__core__.RID, fovy_degrees:float, z_near:float, z_far:float)->None: pass

  def camera_set_orthogonal(self, camera:__core__.RID, size:float, z_near:float, z_far:float)->None: pass

  def camera_set_frustum(self, camera:__core__.RID, size:float, offset:__core__.Vector2, z_near:float, z_far:float)->None: pass

  def camera_set_transform(self, camera:__core__.RID, transform:__core__.Transform3D)->None: pass

  def camera_set_cull_mask(self, camera:__core__.RID, layers:int)->None: pass

  def camera_set_environment(self, camera:__core__.RID, env:__core__.RID)->None: pass

  def camera_set_camera_attributes(self, camera:__core__.RID, effects:__core__.RID)->None: pass

  def camera_set_compositor(self, camera:__core__.RID, compositor:__core__.RID)->None: pass

  def camera_set_use_vertical_aspect(self, camera:__core__.RID, enable:bool)->None: pass

  def viewport_create(self)->__core__.RID: pass

  def viewport_set_use_xr(self, viewport:__core__.RID, use_xr:bool)->None: pass

  def viewport_set_size(self, viewport:__core__.RID, width:int, height:int)->None: pass

  def viewport_set_active(self, viewport:__core__.RID, active:bool)->None: pass

  def viewport_set_parent_viewport(self, viewport:__core__.RID, parent_viewport:__core__.RID)->None: pass

  def viewport_attach_to_screen(self, viewport:__core__.RID, rect:__core__.Rect2= __core__.Rect2.new0(), screen:int=0)->None: pass

  def viewport_set_render_direct_to_screen(self, viewport:__core__.RID, enabled:bool)->None: pass

  def viewport_set_canvas_cull_mask(self, viewport:__core__.RID, canvas_cull_mask:int)->None: pass

  def viewport_set_scaling_3d_mode(self, viewport:__core__.RID, scaling_3d_mode:int )->None: pass

  def viewport_set_scaling_3d_scale(self, viewport:__core__.RID, scale:float)->None: pass

  def viewport_set_fsr_sharpness(self, viewport:__core__.RID, sharpness:float)->None: pass

  def viewport_set_texture_mipmap_bias(self, viewport:__core__.RID, mipmap_bias:float)->None: pass

  def viewport_set_update_mode(self, viewport:__core__.RID, update_mode:int )->None: pass

  def viewport_get_update_mode(self, viewport:__core__.RID)->int: pass

  def viewport_set_clear_mode(self, viewport:__core__.RID, clear_mode:int )->None: pass

  def viewport_get_render_target(self, viewport:__core__.RID)->__core__.RID: pass

  def viewport_get_texture(self, viewport:__core__.RID)->__core__.RID: pass

  def viewport_set_disable_3d(self, viewport:__core__.RID, disable:bool)->None: pass

  def viewport_set_disable_2d(self, viewport:__core__.RID, disable:bool)->None: pass

  def viewport_set_environment_mode(self, viewport:__core__.RID, mode:int )->None: pass

  def viewport_attach_camera(self, viewport:__core__.RID, camera:__core__.RID)->None: pass

  def viewport_set_scenario(self, viewport:__core__.RID, scenario:__core__.RID)->None: pass

  def viewport_attach_canvas(self, viewport:__core__.RID, canvas:__core__.RID)->None: pass

  def viewport_remove_canvas(self, viewport:__core__.RID, canvas:__core__.RID)->None: pass

  def viewport_set_snap_2d_transforms_to_pixel(self, viewport:__core__.RID, enabled:bool)->None: pass

  def viewport_set_snap_2d_vertices_to_pixel(self, viewport:__core__.RID, enabled:bool)->None: pass

  def viewport_set_default_canvas_item_texture_filter(self, viewport:__core__.RID, filter:int )->None: pass

  def viewport_set_default_canvas_item_texture_repeat(self, viewport:__core__.RID, repeat:int )->None: pass

  def viewport_set_canvas_transform(self, viewport:__core__.RID, canvas:__core__.RID, offset:__core__.Transform2D)->None: pass

  def viewport_set_canvas_stacking(self, viewport:__core__.RID, canvas:__core__.RID, layer:int, sublayer:int)->None: pass

  def viewport_set_transparent_background(self, viewport:__core__.RID, enabled:bool)->None: pass

  def viewport_set_global_canvas_transform(self, viewport:__core__.RID, transform:__core__.Transform2D)->None: pass

  def viewport_set_sdf_oversize_and_scale(self, viewport:__core__.RID, oversize:int , scale:int )->None: pass

  def viewport_set_positional_shadow_atlas_size(self, viewport:__core__.RID, size:int, use_16_bits:bool=False)->None: pass

  def viewport_set_positional_shadow_atlas_quadrant_subdivision(self, viewport:__core__.RID, quadrant:int, subdivision:int)->None: pass

  def viewport_set_msaa_3d(self, viewport:__core__.RID, msaa:int )->None: pass

  def viewport_set_msaa_2d(self, viewport:__core__.RID, msaa:int )->None: pass

  def viewport_set_use_hdr_2d(self, viewport:__core__.RID, enabled:bool)->None: pass

  def viewport_set_screen_space_aa(self, viewport:__core__.RID, mode:int )->None: pass

  def viewport_set_use_taa(self, viewport:__core__.RID, enable:bool)->None: pass

  def viewport_set_use_debanding(self, viewport:__core__.RID, enable:bool)->None: pass

  def viewport_set_use_occlusion_culling(self, viewport:__core__.RID, enable:bool)->None: pass

  def viewport_set_occlusion_rays_per_thread(self, rays_per_thread:int)->None: pass

  def viewport_set_occlusion_culling_build_quality(self, quality:int )->None: pass

  def viewport_get_render_info(self, viewport:__core__.RID, type:int , info:int )->int: pass

  def viewport_set_debug_draw(self, viewport:__core__.RID, draw:int )->None: pass

  def viewport_set_measure_render_time(self, viewport:__core__.RID, enable:bool)->None: pass

  def viewport_get_measured_render_time_cpu(self, viewport:__core__.RID)->float: pass

  def viewport_get_measured_render_time_gpu(self, viewport:__core__.RID)->float: pass

  def viewport_set_vrs_mode(self, viewport:__core__.RID, mode:int )->None: pass

  def viewport_set_vrs_update_mode(self, viewport:__core__.RID, mode:int )->None: pass

  def viewport_set_vrs_texture(self, viewport:__core__.RID, texture:__core__.RID)->None: pass

  def sky_create(self)->__core__.RID: pass

  def sky_set_radiance_size(self, sky:__core__.RID, radiance_size:int)->None: pass

  def sky_set_mode(self, sky:__core__.RID, mode:int )->None: pass

  def sky_set_material(self, sky:__core__.RID, material:__core__.RID)->None: pass

  def sky_bake_panorama(self, sky:__core__.RID, energy:float, bake_irradiance:bool, size:__core__.Vector2i)->__image__.Image: pass

  def compositor_effect_create(self)->__core__.RID: pass

  def compositor_effect_set_enabled(self, effect:__core__.RID, enabled:bool)->None: pass

  def compositor_effect_set_callback(self, effect:__core__.RID, callback_type:int , callback:__core__.Callable)->None: pass

  def compositor_effect_set_flag(self, effect:__core__.RID, flag:int , set:bool)->None: pass

  def compositor_create(self)->__core__.RID: pass

  def compositor_set_compositor_effects(self, compositor:__core__.RID, effects:__core__.Array)->None: pass

  def environment_create(self)->__core__.RID: pass

  def environment_set_background(self, env:__core__.RID, bg:int )->None: pass

  def environment_set_sky(self, env:__core__.RID, sky:__core__.RID)->None: pass

  def environment_set_sky_custom_fov(self, env:__core__.RID, scale:float)->None: pass

  def environment_set_sky_orientation(self, env:__core__.RID, orientation:__core__.Basis)->None: pass

  def environment_set_bg_color(self, env:__core__.RID, color:__core__.Color)->None: pass

  def environment_set_bg_energy(self, env:__core__.RID, multiplier:float, exposure_value:float)->None: pass

  def environment_set_canvas_max_layer(self, env:__core__.RID, max_layer:int)->None: pass

  def environment_set_ambient_light(self, env:__core__.RID, color:__core__.Color, ambient:int =0, energy:float=1.0, sky_contibution:float=0.0, reflection_source:int =0)->None: pass

  def environment_set_glow(self, env:__core__.RID, enable:bool, levels:__core__.PackedFloat32Array, intensity:float, strength:float, mix:float, bloom_threshold:float, blend_mode:int , hdr_bleed_threshold:float, hdr_bleed_scale:float, hdr_luminance_cap:float, glow_map_strength:float, glow_map:__core__.RID)->None: pass

  def environment_set_tonemap(self, env:__core__.RID, tone_mapper:int , exposure:float, white:float)->None: pass

  def environment_set_adjustment(self, env:__core__.RID, enable:bool, brightness:float, contrast:float, saturation:float, use_1d_color_correction:bool, color_correction:__core__.RID)->None: pass

  def environment_set_ssr(self, env:__core__.RID, enable:bool, max_steps:int, fade_in:float, fade_out:float, depth_tolerance:float)->None: pass

  def environment_set_ssao(self, env:__core__.RID, enable:bool, radius:float, intensity:float, power:float, detail:float, horizon:float, sharpness:float, light_affect:float, ao_channel_affect:float)->None: pass

  def environment_set_fog(self, env:__core__.RID, enable:bool, light_color:__core__.Color, light_energy:float, sun_scatter:float, density:float, height:float, height_density:float, aerial_perspective:float, sky_affect:float, fog_mode:int =0)->None: pass

  def environment_set_sdfgi(self, env:__core__.RID, enable:bool, cascades:int, min_cell_size:float, y_scale:int , use_occlusion:bool, bounce_feedback:float, read_sky:bool, energy:float, normal_bias:float, probe_bias:float)->None: pass

  def environment_set_volumetric_fog(self, env:__core__.RID, enable:bool, density:float, albedo:__core__.Color, emission:__core__.Color, emission_energy:float, anisotropy:float, length:float, p_detail_spread:float, gi_inject:float, temporal_reprojection:bool, temporal_reprojection_amount:float, ambient_inject:float, sky_affect:float)->None: pass

  def environment_glow_set_use_bicubic_upscale(self, enable:bool)->None: pass

  def environment_set_ssr_roughness_quality(self, quality:int )->None: pass

  def environment_set_ssao_quality(self, quality:int , half_size:bool, adaptive_target:float, blur_passes:int, fadeout_from:float, fadeout_to:float)->None: pass

  def environment_set_ssil_quality(self, quality:int , half_size:bool, adaptive_target:float, blur_passes:int, fadeout_from:float, fadeout_to:float)->None: pass

  def environment_set_sdfgi_ray_count(self, ray_count:int )->None: pass

  def environment_set_sdfgi_frames_to_converge(self, frames:int )->None: pass

  def environment_set_sdfgi_frames_to_update_light(self, frames:int )->None: pass

  def environment_set_volumetric_fog_volume_size(self, size:int, depth:int)->None: pass

  def environment_set_volumetric_fog_filter_active(self, active:bool)->None: pass

  def environment_bake_panorama(self, environment:__core__.RID, bake_irradiance:bool, size:__core__.Vector2i)->__image__.Image: pass

  def screen_space_roughness_limiter_set_active(self, enable:bool, amount:float, limit:float)->None: pass

  def sub_surface_scattering_set_quality(self, quality:int )->None: pass

  def sub_surface_scattering_set_scale(self, scale:float, depth_scale:float)->None: pass

  def camera_attributes_create(self)->__core__.RID: pass

  def camera_attributes_set_dof_blur_quality(self, quality:int , use_jitter:bool)->None: pass

  def camera_attributes_set_dof_blur_bokeh_shape(self, shape:int )->None: pass

  def camera_attributes_set_dof_blur(self, camera_attributes:__core__.RID, far_enable:bool, far_distance:float, far_transition:float, near_enable:bool, near_distance:float, near_transition:float, amount:float)->None: pass

  def camera_attributes_set_exposure(self, camera_attributes:__core__.RID, multiplier:float, normalization:float)->None: pass

  def camera_attributes_set_auto_exposure(self, camera_attributes:__core__.RID, enable:bool, min_sensitivity:float, max_sensitivity:float, speed:float, scale:float)->None: pass

  def scenario_create(self)->__core__.RID: pass

  def scenario_set_environment(self, scenario:__core__.RID, environment:__core__.RID)->None: pass

  def scenario_set_fallback_environment(self, scenario:__core__.RID, environment:__core__.RID)->None: pass

  def scenario_set_camera_attributes(self, scenario:__core__.RID, effects:__core__.RID)->None: pass

  def scenario_set_compositor(self, scenario:__core__.RID, compositor:__core__.RID)->None: pass

  def instance_create2(self, base:__core__.RID, scenario:__core__.RID)->__core__.RID: pass

  def instance_create(self)->__core__.RID: pass

  def instance_set_base(self, instance:__core__.RID, base:__core__.RID)->None: pass

  def instance_set_scenario(self, instance:__core__.RID, scenario:__core__.RID)->None: pass

  def instance_set_layer_mask(self, instance:__core__.RID, mask:int)->None: pass

  def instance_set_pivot_data(self, instance:__core__.RID, sorting_offset:float, use_aabb_center:bool)->None: pass

  def instance_set_transform(self, instance:__core__.RID, transform:__core__.Transform3D)->None: pass

  def instance_attach_object_instance_id(self, instance:__core__.RID, id:int)->None: pass

  def instance_set_blend_shape_weight(self, instance:__core__.RID, shape:int, weight:float)->None: pass

  def instance_set_surface_override_material(self, instance:__core__.RID, surface:int, material:__core__.RID)->None: pass

  def instance_set_visible(self, instance:__core__.RID, visible:bool)->None: pass

  def instance_geometry_set_transparency(self, instance:__core__.RID, transparency:float)->None: pass

  def instance_set_custom_aabb(self, instance:__core__.RID, aabb:__core__.AABB)->None: pass

  def instance_attach_skeleton(self, instance:__core__.RID, skeleton:__core__.RID)->None: pass

  def instance_set_extra_visibility_margin(self, instance:__core__.RID, margin:float)->None: pass

  def instance_set_visibility_parent(self, instance:__core__.RID, parent:__core__.RID)->None: pass

  def instance_set_ignore_culling(self, instance:__core__.RID, enabled:bool)->None: pass

  def instance_geometry_set_flag(self, instance:__core__.RID, flag:int , enabled:bool)->None: pass

  def instance_geometry_set_cast_shadows_setting(self, instance:__core__.RID, shadow_casting_setting:int )->None: pass

  def instance_geometry_set_material_override(self, instance:__core__.RID, material:__core__.RID)->None: pass

  def instance_geometry_set_material_overlay(self, instance:__core__.RID, material:__core__.RID)->None: pass

  def instance_geometry_set_visibility_range(self, instance:__core__.RID, min:float, max:float, min_margin:float, max_margin:float, fade_mode:int )->None: pass

  def instance_geometry_set_lightmap(self, instance:__core__.RID, lightmap:__core__.RID, lightmap_uv_scale:__core__.Rect2, lightmap_slice:int)->None: pass

  def instance_geometry_set_lod_bias(self, instance:__core__.RID, lod_bias:float)->None: pass

  def instance_geometry_set_shader_parameter(self, instance:__core__.RID, parameter:__core__.StringName, value:object)->None: pass

  def instance_geometry_get_shader_parameter(self, instance:__core__.RID, parameter:__core__.StringName)->object: pass

  def instance_geometry_get_shader_parameter_default_value(self, instance:__core__.RID, parameter:__core__.StringName)->object: pass

  def instance_geometry_get_shader_parameter_list(self, instance:__core__.RID)->__core__.Array: pass

  def instances_cull_aabb(self, aabb:__core__.AABB, scenario:__core__.RID= __core__.RID.new0())->__core__.PackedInt64Array: pass

  def instances_cull_ray(self, from_:__core__.Vector3, to:__core__.Vector3, scenario:__core__.RID= __core__.RID.new0())->__core__.PackedInt64Array: pass

  def instances_cull_convex(self, convex:__core__.Array, scenario:__core__.RID= __core__.RID.new0())->__core__.PackedInt64Array: pass

  def bake_render_uv2(self, base:__core__.RID, material_overrides:__core__.Array, image_size:__core__.Vector2i)->__core__.Array: pass

  def canvas_create(self)->__core__.RID: pass

  def canvas_set_item_mirroring(self, canvas:__core__.RID, item:__core__.RID, mirroring:__core__.Vector2)->None: pass

  def canvas_set_item_repeat(self, item:__core__.RID, repeat_size:__core__.Vector2, repeat_times:int)->None: pass

  def canvas_set_modulate(self, canvas:__core__.RID, color:__core__.Color)->None: pass

  def canvas_set_disable_scale(self, disable:bool)->None: pass

  def canvas_texture_create(self)->__core__.RID: pass

  def canvas_texture_set_channel(self, canvas_texture:__core__.RID, channel:int , texture:__core__.RID)->None: pass

  def canvas_texture_set_shading_parameters(self, canvas_texture:__core__.RID, base_color:__core__.Color, shininess:float)->None: pass

  def canvas_texture_set_texture_filter(self, canvas_texture:__core__.RID, filter:int )->None: pass

  def canvas_texture_set_texture_repeat(self, canvas_texture:__core__.RID, repeat:int )->None: pass

  def canvas_item_create(self)->__core__.RID: pass

  def canvas_item_set_parent(self, item:__core__.RID, parent:__core__.RID)->None: pass

  def canvas_item_set_default_texture_filter(self, item:__core__.RID, filter:int )->None: pass

  def canvas_item_set_default_texture_repeat(self, item:__core__.RID, repeat:int )->None: pass

  def canvas_item_set_visible(self, item:__core__.RID, visible:bool)->None: pass

  def canvas_item_set_light_mask(self, item:__core__.RID, mask:int)->None: pass

  def canvas_item_set_visibility_layer(self, item:__core__.RID, visibility_layer:int)->None: pass

  def canvas_item_set_transform(self, item:__core__.RID, transform:__core__.Transform2D)->None: pass

  def canvas_item_set_clip(self, item:__core__.RID, clip:bool)->None: pass

  def canvas_item_set_distance_field_mode(self, item:__core__.RID, enabled:bool)->None: pass

  def canvas_item_set_custom_rect(self, item:__core__.RID, use_custom_rect:bool, rect:__core__.Rect2= __core__.Rect2.new0())->None: pass

  def canvas_item_set_modulate(self, item:__core__.RID, color:__core__.Color)->None: pass

  def canvas_item_set_self_modulate(self, item:__core__.RID, color:__core__.Color)->None: pass

  def canvas_item_set_draw_behind_parent(self, item:__core__.RID, enabled:bool)->None: pass

  def canvas_item_set_interpolated(self, item:__core__.RID, interpolated:bool)->None: pass

  def canvas_item_reset_physics_interpolation(self, item:__core__.RID)->None: pass

  def canvas_item_transform_physics_interpolation(self, item:__core__.RID, transform:__core__.Transform2D)->None: pass

  def canvas_item_add_line(self, item:__core__.RID, from_:__core__.Vector2, to:__core__.Vector2, color:__core__.Color, width:float=-1.0, antialiased:bool=False)->None: pass

  def canvas_item_add_polyline(self, item:__core__.RID, points:__core__.PackedVector2Array, colors:__core__.PackedColorArray, width:float=-1.0, antialiased:bool=False)->None: pass

  def canvas_item_add_multiline(self, item:__core__.RID, points:__core__.PackedVector2Array, colors:__core__.PackedColorArray, width:float=-1.0, antialiased:bool=False)->None: pass

  def canvas_item_add_rect(self, item:__core__.RID, rect:__core__.Rect2, color:__core__.Color, antialiased:bool=False)->None: pass

  def canvas_item_add_circle(self, item:__core__.RID, pos:__core__.Vector2, radius:float, color:__core__.Color, antialiased:bool=False)->None: pass

  def canvas_item_add_texture_rect(self, item:__core__.RID, rect:__core__.Rect2, texture:__core__.RID, tile:bool=False, modulate:__core__.Color= __core__.Color.new0(), transpose:bool=False)->None: pass

  def canvas_item_add_msdf_texture_rect_region(self, item:__core__.RID, rect:__core__.Rect2, texture:__core__.RID, src_rect:__core__.Rect2, modulate:__core__.Color= __core__.Color.new0(), outline_size:int=0, px_range:float=1.0, scale:float=1.0)->None: pass

  def canvas_item_add_lcd_texture_rect_region(self, item:__core__.RID, rect:__core__.Rect2, texture:__core__.RID, src_rect:__core__.Rect2, modulate:__core__.Color)->None: pass

  def canvas_item_add_texture_rect_region(self, item:__core__.RID, rect:__core__.Rect2, texture:__core__.RID, src_rect:__core__.Rect2, modulate:__core__.Color= __core__.Color.new0(), transpose:bool=False, clip_uv:bool=True)->None: pass

  def canvas_item_add_nine_patch(self, item:__core__.RID, rect:__core__.Rect2, source:__core__.Rect2, texture:__core__.RID, topleft:__core__.Vector2, bottomright:__core__.Vector2, x_axis_mode:int =0, y_axis_mode:int =0, draw_center:bool=True, modulate:__core__.Color= __core__.Color.new0())->None: pass

  def canvas_item_add_primitive(self, item:__core__.RID, points:__core__.PackedVector2Array, colors:__core__.PackedColorArray, uvs:__core__.PackedVector2Array, texture:__core__.RID)->None: pass

  def canvas_item_add_polygon(self, item:__core__.RID, points:__core__.PackedVector2Array, colors:__core__.PackedColorArray, uvs:__core__.PackedVector2Array= __core__.PackedVector2Array.new0(), texture:__core__.RID= __core__.RID.new0())->None: pass

  def canvas_item_add_triangle_array(self, item:__core__.RID, indices:__core__.PackedInt32Array, points:__core__.PackedVector2Array, colors:__core__.PackedColorArray, uvs:__core__.PackedVector2Array= __core__.PackedVector2Array.new0(), bones:__core__.PackedInt32Array= __core__.PackedInt32Array.new0(), weights:__core__.PackedFloat32Array= __core__.PackedFloat32Array.new0(), texture:__core__.RID= __core__.RID.new0(), count:int=-1)->None: pass

  def canvas_item_add_mesh(self, item:__core__.RID, mesh:__core__.RID, transform:__core__.Transform2D= __core__.Transform2D.new0(), modulate:__core__.Color= __core__.Color.new0(), texture:__core__.RID= __core__.RID.new0())->None: pass

  def canvas_item_add_multimesh(self, item:__core__.RID, mesh:__core__.RID, texture:__core__.RID= __core__.RID.new0())->None: pass

  def canvas_item_add_particles(self, item:__core__.RID, particles:__core__.RID, texture:__core__.RID)->None: pass

  def canvas_item_add_set_transform(self, item:__core__.RID, transform:__core__.Transform2D)->None: pass

  def canvas_item_add_clip_ignore(self, item:__core__.RID, ignore:bool)->None: pass

  def canvas_item_add_animation_slice(self, item:__core__.RID, animation_length:float, slice_begin:float, slice_end:float, offset:float=0.0)->None: pass

  def canvas_item_set_sort_children_by_y(self, item:__core__.RID, enabled:bool)->None: pass

  def canvas_item_set_z_index(self, item:__core__.RID, z_index:int)->None: pass

  def canvas_item_set_z_as_relative_to_parent(self, item:__core__.RID, enabled:bool)->None: pass

  def canvas_item_set_copy_to_backbuffer(self, item:__core__.RID, enabled:bool, rect:__core__.Rect2)->None: pass

  def canvas_item_clear(self, item:__core__.RID)->None: pass

  def canvas_item_set_draw_index(self, item:__core__.RID, index:int)->None: pass

  def canvas_item_set_material(self, item:__core__.RID, material:__core__.RID)->None: pass

  def canvas_item_set_use_parent_material(self, item:__core__.RID, enabled:bool)->None: pass

  def canvas_item_set_visibility_notifier(self, item:__core__.RID, enable:bool, area:__core__.Rect2, enter_callable:__core__.Callable, exit_callable:__core__.Callable)->None: pass

  def canvas_item_set_canvas_group_mode(self, item:__core__.RID, mode:int , clear_margin:float=5.0, fit_empty:bool=False, fit_margin:float=0.0, blur_mipmaps:bool=False)->None: pass

  def debug_canvas_item_get_rect(self, item:__core__.RID)->__core__.Rect2: pass

  def canvas_light_create(self)->__core__.RID: pass

  def canvas_light_attach_to_canvas(self, light:__core__.RID, canvas:__core__.RID)->None: pass

  def canvas_light_set_enabled(self, light:__core__.RID, enabled:bool)->None: pass

  def canvas_light_set_texture_scale(self, light:__core__.RID, scale:float)->None: pass

  def canvas_light_set_transform(self, light:__core__.RID, transform:__core__.Transform2D)->None: pass

  def canvas_light_set_texture(self, light:__core__.RID, texture:__core__.RID)->None: pass

  def canvas_light_set_texture_offset(self, light:__core__.RID, offset:__core__.Vector2)->None: pass

  def canvas_light_set_color(self, light:__core__.RID, color:__core__.Color)->None: pass

  def canvas_light_set_height(self, light:__core__.RID, height:float)->None: pass

  def canvas_light_set_energy(self, light:__core__.RID, energy:float)->None: pass

  def canvas_light_set_z_range(self, light:__core__.RID, min_z:int, max_z:int)->None: pass

  def canvas_light_set_layer_range(self, light:__core__.RID, min_layer:int, max_layer:int)->None: pass

  def canvas_light_set_item_cull_mask(self, light:__core__.RID, mask:int)->None: pass

  def canvas_light_set_item_shadow_cull_mask(self, light:__core__.RID, mask:int)->None: pass

  def canvas_light_set_mode(self, light:__core__.RID, mode:int )->None: pass

  def canvas_light_set_shadow_enabled(self, light:__core__.RID, enabled:bool)->None: pass

  def canvas_light_set_shadow_filter(self, light:__core__.RID, filter:int )->None: pass

  def canvas_light_set_shadow_color(self, light:__core__.RID, color:__core__.Color)->None: pass

  def canvas_light_set_shadow_smooth(self, light:__core__.RID, smooth:float)->None: pass

  def canvas_light_set_blend_mode(self, light:__core__.RID, mode:int )->None: pass

  def canvas_light_set_interpolated(self, light:__core__.RID, interpolated:bool)->None: pass

  def canvas_light_reset_physics_interpolation(self, light:__core__.RID)->None: pass

  def canvas_light_transform_physics_interpolation(self, light:__core__.RID, transform:__core__.Transform2D)->None: pass

  def canvas_light_occluder_create(self)->__core__.RID: pass

  def canvas_light_occluder_attach_to_canvas(self, occluder:__core__.RID, canvas:__core__.RID)->None: pass

  def canvas_light_occluder_set_enabled(self, occluder:__core__.RID, enabled:bool)->None: pass

  def canvas_light_occluder_set_polygon(self, occluder:__core__.RID, polygon:__core__.RID)->None: pass

  def canvas_light_occluder_set_as_sdf_collision(self, occluder:__core__.RID, enable:bool)->None: pass

  def canvas_light_occluder_set_transform(self, occluder:__core__.RID, transform:__core__.Transform2D)->None: pass

  def canvas_light_occluder_set_light_mask(self, occluder:__core__.RID, mask:int)->None: pass

  def canvas_light_occluder_set_interpolated(self, occluder:__core__.RID, interpolated:bool)->None: pass

  def canvas_light_occluder_reset_physics_interpolation(self, occluder:__core__.RID)->None: pass

  def canvas_light_occluder_transform_physics_interpolation(self, occluder:__core__.RID, transform:__core__.Transform2D)->None: pass

  def canvas_occluder_polygon_create(self)->__core__.RID: pass

  def canvas_occluder_polygon_set_shape(self, occluder_polygon:__core__.RID, shape:__core__.PackedVector2Array, closed:bool)->None: pass

  def canvas_occluder_polygon_set_cull_mode(self, occluder_polygon:__core__.RID, mode:int )->None: pass

  def canvas_set_shadow_texture_size(self, size:int)->None: pass

  def global_shader_parameter_add(self, name:__core__.StringName, type:int , default_value:object)->None: pass

  def global_shader_parameter_remove(self, name:__core__.StringName)->None: pass

  def global_shader_parameter_get_list(self)->__core__.Array: pass

  def global_shader_parameter_set(self, name:__core__.StringName, value:object)->None: pass

  def global_shader_parameter_set_override(self, name:__core__.StringName, value:object)->None: pass

  def global_shader_parameter_get(self, name:__core__.StringName)->object: pass

  def global_shader_parameter_get_type(self, name:__core__.StringName)->int: pass

  def free_rid(self, rid:__core__.RID)->None: pass

  def request_frame_drawn_callback(self, callable:__core__.Callable)->None: pass

  def has_changed(self)->bool: pass

  def get_rendering_info(self, info:int )->int: pass

  def get_video_adapter_name(self)->str: pass

  def get_video_adapter_vendor(self)->str: pass

  def get_video_adapter_type(self)->int: pass

  def get_video_adapter_api_version(self)->str: pass

  def make_sphere_mesh(self, latitudes:int, longitudes:int, radius:float)->__core__.RID: pass

  def get_test_cube(self)->__core__.RID: pass

  def get_test_texture(self)->__core__.RID: pass

  def get_white_texture(self)->__core__.RID: pass

  def set_boot_image(self, image:__image__.Image, color:__core__.Color, scale:bool, use_filter:bool=True)->None: pass

  def get_default_clear_color(self)->__core__.Color: pass

  def set_default_clear_color(self, color:__core__.Color)->None: pass

  def has_os_feature(self, feature:str)->bool: pass

  def set_debug_generate_wireframes(self, generate:bool)->None: pass

  def is_render_loop_enabled(self)->bool: pass

  def set_render_loop_enabled(self, enabled:bool)->None: pass

  def get_frame_setup_time_cpu(self)->float: pass

  def force_sync(self)->None: pass

  def force_draw(self, swap_buffers:bool=True, frame_step:float=0.0)->None: pass

  def get_rendering_device(self)->__renderingdevice__.RenderingDevice: pass

  def create_local_rendering_device(self)->__renderingdevice__.RenderingDevice: pass

  def is_on_render_thread(self)->bool: pass

  def call_on_render_thread(self, callable:__core__.Callable)->None: pass

  def has_feature(self, feature:int )->bool: pass


