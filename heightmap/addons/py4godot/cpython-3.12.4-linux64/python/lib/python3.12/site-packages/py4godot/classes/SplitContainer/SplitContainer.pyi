from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.SplitContainer.SplitContainer as __splitcontainer__
import py4godot.classes.Container.Container as __container__


class SplitContainer(__container__.Container):
  dragged: BuiltinSignal

  @staticmethod
  def constructor()->SplitContainer:pass



  @staticmethod
  def cast(other:__object__.Object)->SplitContainer:pass


  @property
  def split_offset(self)->int: pass
  @split_offset.setter
  def split_offset(self,  value:int)->None: pass
  @property
  def collapsed(self)->bool: pass
  @collapsed.setter
  def collapsed(self,  value:bool)->None: pass
  @property
  def dragger_visibility(self)->int: pass
  @dragger_visibility.setter
  def dragger_visibility(self,  value:int)->None: pass
  @property
  def vertical(self)->bool: pass
  @vertical.setter
  def vertical(self,  value:bool)->None: pass
  def set_split_offset(self, offset:int)->None: pass

  def get_split_offset(self)->int: pass

  def clamp_split_offset(self)->None: pass

  def set_collapsed(self, collapsed:bool)->None: pass

  def is_collapsed(self)->bool: pass

  def set_dragger_visibility(self, mode:int )->None: pass

  def get_dragger_visibility(self)->int: pass

  def set_vertical(self, vertical:bool)->None: pass

  def is_vertical(self)->bool: pass


