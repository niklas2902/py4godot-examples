from py4godot.utils.VariantTypeWrapper4 import *
import py4godot.classes.Object.Object as __object__

import py4godot.classes.core as __core__
import py4godot.classes.typedarrays as __typedarrays__
from py4godot.signals import BuiltinSignal
import py4godot.classes.Object.Object as __object__


class WorkerThreadPool(__object__.Object):



  @staticmethod
  def cast(other:__object__.Object)->WorkerThreadPool:pass

  @staticmethod
  def get_instance()->WorkerThreadPool:pass

  def add_task(self, action:__core__.Callable, high_priority:bool=False, description:str= __core__.String.new0())->int: pass

  def is_task_completed(self, task_id:int)->bool: pass

  def wait_for_task_completion(self, task_id:int)->int: pass

  def add_group_task(self, action:__core__.Callable, elements:int, tasks_needed:int=-1, high_priority:bool=False, description:str= __core__.String.new0())->int: pass

  def is_group_task_completed(self, group_id:int)->bool: pass

  def get_group_processed_element_count(self, group_id:int)->int: pass

  def wait_for_group_task_completion(self, group_id:int)->None: pass


